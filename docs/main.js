import {
  cibCcAmex,
  cibCcApplePay,
  cibCcMastercard,
  cibCcPaypal,
  cibCcStripe,
  cibCcVisa,
  cibFacebook,
  cibGoogle,
  cibLinkedin,
  cibSkype,
  cibTwitter,
  cifBr,
  cifEs,
  cifFr,
  cifIn,
  cifPl,
  cifUs,
  cilAccountLogout,
  cilAlignCenter,
  cilAlignLeft,
  cilAlignRight,
  cilApplicationsSettings,
  cilArrowBottom,
  cilArrowRight,
  cilArrowTop,
  cilBasket,
  cilBell,
  cilBold,
  cilBookmark,
  cilCalculator,
  cilCalendar,
  cilChart,
  cilChartPie,
  cilCheck,
  cilChevronLeft,
  cilChevronRight,
  cilCloudDownload,
  cilCode,
  cilCommentSquare,
  cilContrast,
  cilCreditCard,
  cilCursor,
  cilCut,
  cilDescription,
  cilDollar,
  cilDrop,
  cilEnvelopeClosed,
  cilEnvelopeOpen,
  cilFax,
  cilFile,
  cilFilter,
  cilGrid,
  cilHome,
  cilInbox,
  cilIndentDecrease,
  cilIndentIncrease,
  cilItalic,
  cilJustifyCenter,
  cilLanguage,
  cilLayers,
  cilList,
  cilListNumbered,
  cilLocationPin,
  cilLockLocked,
  cilMagnifyingGlass,
  cilMap,
  cilMediaPlay,
  cilMediaRecord,
  cilMenu,
  cilMoon,
  cilNotes,
  cilOptions,
  cilPaperPlane,
  cilPaperclip,
  cilPen,
  cilPencil,
  cilPeople,
  cilPrint,
  cilPuzzle,
  cilReportSlash,
  cilSave,
  cilSettings,
  cilShare,
  cilShareAll,
  cilShareBoxed,
  cilSpeech,
  cilSpeedometer,
  cilSpreadsheet,
  cilStar,
  cilSun,
  cilTags,
  cilTask,
  cilTrash,
  cilUnderline,
  cilUser,
  cilUserFemale,
  cilUserFollow,
  cilUserUnfollow
} from "./chunk-UAVO64J3.js";
import {
  AUTO_STYLE,
  ActivatedRoute,
  AnimationGroupPlayer,
  AnimationMetadataType,
  AvatarComponent,
  BadgeComponent,
  BreadcrumbRouterComponent,
  BrowserModule,
  ColorModeService,
  ContainerComponent,
  DOCUMENT,
  DomRendererFactory2,
  DropdownComponent,
  DropdownDividerDirective,
  DropdownHeaderDirective,
  DropdownItemDirective,
  DropdownMenuDirective,
  DropdownModule,
  DropdownToggleDirective,
  FooterComponent,
  HeaderComponent,
  HeaderNavComponent,
  HeaderTogglerDirective,
  IconDirective,
  IconSetService,
  NavigationEnd,
  NgIf,
  NgTemplateOutlet,
  NoopAnimationPlayer,
  Platform,
  Router,
  RouterLink,
  RouterOutlet,
  ShadowOnScrollDirective,
  SidebarBrandComponent,
  SidebarComponent,
  SidebarFooterComponent,
  SidebarHeaderComponent,
  SidebarModule,
  SidebarNavComponent,
  SidebarToggleDirective,
  SidebarTogglerDirective,
  Title,
  bootstrapApplication,
  coerceBooleanProperty,
  coerceElement,
  coerceNumberProperty,
  getRtlScrollAxisType,
  isPlatformBrowser,
  provideRouter,
  sequence,
  style,
  takeUntilDestroyed,
  withEnabledBlockingInitialNavigation,
  withInMemoryScrolling,
  withRouterConfig,
  withViewTransitions,
  ɵPRE_STYLE
} from "./chunk-JAOOB3SV.js";
import {
  ANIMATION_MODULE_TYPE,
  BehaviorSubject,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  Component,
  ContentChild,
  DestroyRef,
  Directive,
  EMPTY,
  ElementRef,
  EventEmitter,
  Inject,
  Injectable,
  InjectionToken,
  Input,
  NgModule,
  NgZone,
  Observable,
  Optional,
  Output,
  PLATFORM_ID,
  Renderer2,
  RendererFactory2,
  RendererStyleFlags2,
  RuntimeError,
  Subject,
  Subscription,
  ViewChild,
  animationFrameScheduler,
  auditTime,
  computed,
  debounceTime,
  delay,
  distinctUntilChanged,
  expand,
  filter,
  finalize,
  fromEvent,
  importProvidersFrom,
  inject,
  input,
  map,
  merge,
  mergeMap,
  of,
  pairwise,
  performanceMarkFeature,
  setClassMetadata,
  switchMap,
  take,
  takeUntil,
  takeWhile,
  tap,
  ɵsetClassDebugInfo,
  ɵɵInheritDefinitionFeature,
  ɵɵNgOnChangesFeature,
  ɵɵProvidersFeature,
  ɵɵStandaloneFeature,
  ɵɵadvance,
  ɵɵattribute,
  ɵɵclassMap,
  ɵɵclassMapInterpolate1,
  ɵɵclassProp,
  ɵɵconditional,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineDirective,
  ɵɵdefineInjectable,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdirectiveInject,
  ɵɵelement,
  ɵɵelementContainer,
  ɵɵelementContainerEnd,
  ɵɵelementContainerStart,
  ɵɵelementEnd,
  ɵɵelementStart,
  ɵɵgetCurrentView,
  ɵɵinject,
  ɵɵlistener,
  ɵɵloadQuery,
  ɵɵnamespaceHTML,
  ɵɵnamespaceSVG,
  ɵɵnextContext,
  ɵɵprojection,
  ɵɵprojectionDef,
  ɵɵproperty,
  ɵɵpureFunction0,
  ɵɵqueryRefresh,
  ɵɵreference,
  ɵɵrepeater,
  ɵɵrepeaterCreate,
  ɵɵresetView,
  ɵɵrestoreView,
  ɵɵtemplate,
  ɵɵtemplateRefExtractor,
  ɵɵtext,
  ɵɵtextInterpolate1,
  ɵɵviewQuery
} from "./chunk-TU2APFZU.js";
import {
  __objRest,
  __privateAdd,
  __privateGet,
  __privateSet,
  __spreadProps,
  __spreadValues
} from "./chunk-6WCCERUZ.js";

// src/app/icons/signet.ts
var signet = [
  "102 115",
  `<g style="fill: currentColor">
    <path d="M96 24.124 57 1.608a12 12 0 0 0-12 0L6 24.124a12.034 12.034 0 0 0-6 10.393V79.55a12.033 12.033 0 0 0 6 10.392l39 22.517a12 12 0 0 0 12 0l39-22.517a12.033 12.033 0 0 0 6-10.392V34.517a12.034 12.034 0 0 0-6-10.393ZM94 79.55a4 4 0 0 1-2 3.464l-39 22.517a4 4 0 0 1-4 0L10 83.014a4 4 0 0 1-2-3.464V34.517a4 4 0 0 1 2-3.464L49 8.536a4 4 0 0 1 4 0l39 22.517a4 4 0 0 1 2 3.464V79.55Z"/>
    <path d="M74.022 70.071h-2.866a4 4 0 0 0-1.925.494L51.95 80.05 32 68.531V45.554l19.95-11.519 17.29 9.455a4 4 0 0 0 1.919.49h2.863a2 2 0 0 0 2-2v-2.71a2 2 0 0 0-1.04-1.756L55.793 27.02a8.04 8.04 0 0 0-7.843.09L28 38.626a8.025 8.025 0 0 0-4 6.929V68.53a8 8 0 0 0 4 6.928l19.95 11.519a8.043 8.043 0 0 0 7.843.088l19.19-10.532a2 2 0 0 0 1.038-1.753v-2.71a2 2 0 0 0-2-2Z"/>
  </g>`
];

// src/app/icons/logo.ts
var logo = [
  `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="1105px" height="184px" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd" xmlns:xlink="http://www.w3.org/1999/xlink">
<g><path style="opacity:1" fill="#7f7741" d="M 226.5,2.5 C 230.82,1.83419 235.32,1.50086 240,1.5C 244.886,1.50727 249.386,2.17393 253.5,3.5C 244.584,2.52895 235.584,2.19561 226.5,2.5 Z"/></g>
<g><path style="opacity:1" fill="#807843" d="M 603.5,2.5 C 590.456,1.85301 577.789,2.51967 565.5,4.5C 564.596,3.79105 564.263,2.79105 564.5,1.5C 577.677,1.17119 590.677,1.50452 603.5,2.5 Z"/></g>
<g><path style="opacity:1" fill="#7f7743" d="M 722.5,4.5 C 721.082,2.69206 719.082,2.02539 716.5,2.5C 705.779,1.85805 695.446,2.52472 685.5,4.5C 684.596,3.79105 684.263,2.79105 684.5,1.5C 697.5,1.5 710.5,1.5 723.5,1.5C 723.737,2.79105 723.404,3.79105 722.5,4.5 Z"/></g>
<g><path style="opacity:1" fill="#c7be69" d="M 112.5,8.5 C 110.05,8.70197 107.717,8.36863 105.5,7.5C 91.0673,3.73079 76.4006,2.73079 61.5,4.5C 65.8384,5.28689 70.1717,5.95356 74.5,6.5C 74.5,6.83333 74.5,7.16667 74.5,7.5C 62.8494,6.16542 51.8494,8.16542 41.5,13.5C 41.5,12.5 41.5,11.5 41.5,10.5C 46.6575,9.46149 51.6575,7.96149 56.5,6C 52.141,5.46573 47.8076,5.6324 43.5,6.5C 66.6753,-0.432144 89.6753,0.234522 112.5,8.5 Z"/></g>
<g><path style="opacity:1" fill="#d5cb70" d="M 442.5,2.5 C 445.171,4.11805 448.171,4.78472 451.5,4.5C 456.522,5.1802 460.856,7.1802 464.5,10.5C 458.569,9.60215 452.902,7.93548 447.5,5.5C 446.167,5.66667 444.833,5.83333 443.5,6C 445.145,10.0464 446.478,14.2131 447.5,18.5C 444.795,16.4884 442.128,14.4884 439.5,12.5C 439.5,12.1667 439.5,11.8333 439.5,11.5C 440.833,11.5 442.167,11.5 443.5,11.5C 441.588,9.17825 440.255,6.51159 439.5,3.5C 406.498,3.33335 373.498,3.50002 340.5,4C 343.781,5.29403 346.448,7.29403 348.5,10C 347.748,10.6708 347.414,11.5041 347.5,12.5C 346.03,10.8487 344.697,9.01533 343.5,7C 340.268,5.53392 336.935,4.36726 333.5,3.5C 333.709,2.91395 334.043,2.41395 334.5,2C 370.523,1.19262 406.523,1.35928 442.5,2.5 Z"/></g>
<g><path style="opacity:1" fill="#f1e985" d="M 603.5,2.5 C 604.167,2.5 604.5,2.83333 604.5,3.5C 594.167,3.5 583.833,3.5 573.5,3.5C 573.5,4.5 573.5,5.5 573.5,6.5C 571.007,5.22642 568.341,4.55975 565.5,4.5C 577.789,2.51967 590.456,1.85301 603.5,2.5 Z"/></g>
<g><path style="opacity:1" fill="#fef172" d="M 439.5,11.5 C 439.389,10.8826 439.056,10.3826 438.5,10C 435.522,9.30404 432.522,8.80404 429.5,8.5C 429.167,8.5 428.833,8.5 428.5,8.5C 426.974,6.87003 424.974,6.03669 422.5,6C 406.661,5.17202 390.995,5.33868 375.5,6.5C 374.17,41.0024 374.17,75.669 375.5,110.5C 378.29,112.333 377.957,113.333 374.5,113.5C 374.17,134.007 374.503,154.34 375.5,174.5C 376.552,176.256 378.219,176.923 380.5,176.5C 380.5,177.167 380.5,177.833 380.5,178.5C 367.496,178.667 354.496,178.5 341.5,178C 344.142,176.532 345.809,174.365 346.5,171.5C 348.074,171.063 349.241,170.063 350,168.5C 350.573,164.152 351.24,159.819 352,155.5C 352.667,111.167 352.667,66.8333 352,22.5C 351.385,19.6971 350.218,17.3637 348.5,15.5C 347.596,14.791 347.263,13.791 347.5,12.5C 347.414,11.5041 347.748,10.6708 348.5,10C 346.448,7.29403 343.781,5.29403 340.5,4C 373.498,3.50002 406.498,3.33335 439.5,3.5C 440.255,6.51159 441.588,9.17825 443.5,11.5C 442.167,11.5 440.833,11.5 439.5,11.5 Z"/></g>
<g><path style="opacity:1" fill="#9d9855" d="M 442.5,2.5 C 445.727,2.67615 448.727,3.34281 451.5,4.5C 448.171,4.78472 445.171,4.11805 442.5,2.5 Z"/></g>
<g><path style="opacity:1" fill="#faee73" d="M 716.5,2.5 C 715.264,4.04279 713.598,5.04279 711.5,5.5C 710.548,7.04533 710.215,8.71199 710.5,10.5C 709.345,13.4569 708.345,16.4569 707.5,19.5C 705.933,20.6808 705.099,22.3474 705,24.5C 704.5,75.1656 704.333,125.832 704.5,176.5C 702.123,176.784 699.956,176.784 698,176.5C 696.577,171.123 695.243,165.79 694,160.5C 693.241,158.937 692.074,157.937 690.5,157.5C 687.988,153.134 685.988,148.467 684.5,143.5C 683.833,138.164 682.166,133.164 679.5,128.5C 678.583,127.873 677.583,127.539 676.5,127.5C 652.509,86.8121 622.843,50.4787 587.5,18.5C 587.5,18.1667 587.5,17.8333 587.5,17.5C 586.791,16.596 585.791,16.2627 584.5,16.5C 584.99,63.2513 584.49,109.918 583,156.5C 582.667,110.833 582.333,65.1667 582,19.5C 581.261,17.1112 580.095,15.1112 578.5,13.5C 577.091,11.0283 575.424,8.695 573.5,6.5C 573.5,5.5 573.5,4.5 573.5,3.5C 583.833,3.5 594.167,3.5 604.5,3.5C 605.5,4.16667 606.5,4.83333 607.5,5.5C 607.525,8.17901 608.858,9.51234 611.5,9.5C 639.804,36.6267 664.971,66.2934 687,98.5C 691.7,105.901 695.866,113.568 699.5,121.5C 699.116,123.665 699.783,125.332 701.5,126.5C 702.667,93.1717 702.833,59.8383 702,26.5C 701.722,25.5842 701.222,24.9175 700.5,24.5C 700.087,19.182 698.587,14.182 696,9.5C 693.195,6.34749 689.695,4.68082 685.5,4.5C 695.446,2.52472 705.779,1.85805 716.5,2.5 Z"/></g>
<g><path style="opacity:1" fill="#f9ed72" d="M 949.5,12.5 C 951.566,16.2667 951.899,20.2667 950.5,24.5C 946.96,27.944 945.293,32.2774 945.5,37.5C 945.5,38.1667 945.167,38.5 944.5,38.5C 943.167,38.5 941.833,38.5 940.5,38.5C 940.785,40.288 940.452,41.9547 939.5,43.5C 938.786,40.9728 938.12,38.4728 937.5,36C 933.974,34.6632 930.308,34.1632 926.5,34.5C 916.478,28.5902 913.978,20.2568 919,9.5C 920.777,7.21008 922.944,5.54341 925.5,4.5C 930.968,2.85079 936.301,3.18413 941.5,5.5C 942.429,6.68884 942.762,8.02218 942.5,9.5C 945.195,9.6815 947.528,10.6815 949.5,12.5 Z"/></g>
<g><path style="opacity:1" fill="#dcd26f" d="M 1070.5,8.5 C 1068.86,8.28649 1067.36,8.61983 1066,9.5C 1060.21,7.70842 1054.21,6.37509 1048,5.5C 1046.17,5.83333 1044.33,6.16667 1042.5,6.5C 1046.48,8.63538 1050.65,10.302 1055,11.5C 1056.88,10.394 1058.72,10.394 1060.5,11.5C 1059.97,12.1924 1059.31,12.6924 1058.5,13C 1059.25,13.6708 1059.59,14.5041 1059.5,15.5C 1038.11,4.69739 1016.78,4.86406 995.5,16C 985.682,22.1366 981.015,30.97 981.5,42.5C 980.281,36.643 980.281,30.643 981.5,24.5C 982.5,24.5 983.5,24.5 984.5,24.5C 984.351,23.448 984.517,22.448 985,21.5C 995.512,13.9027 994.345,11.9027 981.5,15.5C 993.865,7.48215 1007.53,2.98215 1022.5,2C 1039.09,0.820783 1055.09,2.98745 1070.5,8.5 Z"/></g>
<g><path style="opacity:1" fill="#d5cb70" d="M 837.5,3.5 C 837.833,4.16667 838.167,4.83333 838.5,5.5C 831.211,4.44328 823.878,3.77661 816.5,3.5C 808.535,4.46767 800.535,5.46767 792.5,6.5C 807.093,1.23322 822.093,0.233218 837.5,3.5 Z"/></g>
<g><path style="opacity:1" fill="#a49e50" d="M 837.5,3.5 C 840.067,3.72148 842.401,4.38815 844.5,5.5C 842.5,5.5 840.5,5.5 838.5,5.5C 838.167,4.83333 837.833,4.16667 837.5,3.5 Z"/></g>
<g><path style="opacity:1" fill="#f3ea87" d="M 375.5,6.5 C 390.995,5.33868 406.661,5.17202 422.5,6C 424.974,6.03669 426.974,6.87003 428.5,8.5C 425.482,8.29619 422.482,7.96286 419.5,7.5C 405.01,6.50398 390.343,6.17065 375.5,6.5 Z"/></g>
<g><path style="opacity:1" fill="#d0c76d" d="M 716.5,2.5 C 719.082,2.02539 721.082,2.69206 722.5,4.5C 717.379,4.41971 713.379,6.41971 710.5,10.5C 710.215,8.71199 710.548,7.04533 711.5,5.5C 713.598,5.04279 715.264,4.04279 716.5,2.5 Z"/></g>
<g><path style="opacity:1" fill="#d4cc71" d="M 949.5,12.5 C 947.528,10.6815 945.195,9.6815 942.5,9.5C 942.762,8.02218 942.429,6.68884 941.5,5.5C 936.301,3.18413 930.968,2.85079 925.5,4.5C 931.73,0.487726 938.063,0.654392 944.5,5C 946.808,7.12769 948.474,9.62769 949.5,12.5 Z"/></g>
<g><path style="opacity:1" fill="#fbf075" d="M 41.5,13.5 C 40.8333,13.8333 40.1667,14.1667 39.5,14.5C 38.4324,13.5655 37.099,13.2322 35.5,13.5C 35.33,12.1779 35.6634,11.0113 36.5,10C 39.4422,9.85611 41.7756,8.68944 43.5,6.5C 47.8076,5.6324 52.141,5.46573 56.5,6C 51.6575,7.96149 46.6575,9.46149 41.5,10.5C 41.5,11.5 41.5,12.5 41.5,13.5 Z"/></g>
<g><path style="opacity:1" fill="#fcf274" d="M 105.5,7.5 C 103.708,8.30912 101.708,8.80912 99.5,9C 98.91,10.2989 97.91,11.1322 96.5,11.5C 89.7594,7.70379 82.4261,6.03713 74.5,6.5C 70.1717,5.95356 65.8384,5.28689 61.5,4.5C 76.4006,2.73079 91.0673,3.73079 105.5,7.5 Z"/></g>
<g><path style="opacity:1" fill="#afa75f" d="M 607.5,5.5 C 609.167,6.5 610.5,7.83333 611.5,9.5C 608.858,9.51234 607.525,8.17901 607.5,5.5 Z"/></g>
<g><path style="opacity:1" fill="#cec76e" d="M 829.5,13.5 C 820.786,10.358 811.786,9.02472 802.5,9.5C 807.855,8.76895 813.355,8.10228 819,7.5C 823.111,8.55306 826.611,10.5531 829.5,13.5 Z"/></g>
<g><path style="opacity:1" fill="#c4bb68" d="M 845.5,5.5 C 849.739,6.7958 853.739,8.46247 857.5,10.5C 852.54,10.719 848.54,9.0523 845.5,5.5 Z"/></g>
<g><path style="opacity:1" fill="#c7bd68" d="M 429.5,8.5 C 432.522,8.80404 435.522,9.30404 438.5,10C 439.056,10.3826 439.389,10.8826 439.5,11.5C 439.5,11.8333 439.5,12.1667 439.5,12.5C 436.011,11.342 432.678,10.0086 429.5,8.5 Z"/></g>
<g><path style="opacity:1" fill="#f7eb73" d="M 838.5,5.5 C 840.5,5.5 842.5,5.5 844.5,5.5C 844.833,5.5 845.167,5.5 845.5,5.5C 848.54,9.0523 852.54,10.719 857.5,10.5C 864.372,13.7173 870.706,17.7173 876.5,22.5C 875.883,22.6107 875.383,22.944 875,23.5C 873.274,21.0892 871.107,20.4225 868.5,21.5C 868.403,23.7485 868.57,26.0819 869,28.5C 868.017,26.5516 866.85,24.7183 865.5,23C 863.926,22.3013 862.593,22.6346 861.5,24C 863,26.8333 865.167,29 868,30.5C 868,33.1667 868,35.8333 868,38.5C 868.741,39.6405 869.575,39.6405 870.5,38.5C 871.429,37.3112 871.762,35.9778 871.5,34.5C 874.167,34.5 876.833,34.5 879.5,34.5C 879.799,36.604 879.466,38.604 878.5,40.5C 877.522,40.0233 876.689,39.3567 876,38.5C 876.148,42.1199 874.648,44.6199 871.5,46C 873.724,50.7177 875.724,55.551 877.5,60.5C 877.833,60.8333 878.167,61.1667 878.5,61.5C 879.474,59.2573 879.808,56.924 879.5,54.5C 882.243,54.0772 883.576,55.2439 883.5,58C 882.112,60.4272 881.445,63.0939 881.5,66C 882.364,71.1488 883.03,76.3155 883.5,81.5C 877.208,58.747 865.208,39.5804 847.5,24C 841.637,20.236 835.637,16.736 829.5,13.5C 826.611,10.5531 823.111,8.55306 819,7.5C 813.355,8.10228 807.855,8.76895 802.5,9.5C 801.833,9.5 801.167,9.5 800.5,9.5C 797.5,9.5 794.5,9.5 791.5,9.5C 791.5,8.5 791.5,7.5 791.5,6.5C 791.833,6.5 792.167,6.5 792.5,6.5C 800.535,5.46767 808.535,4.46767 816.5,3.5C 823.878,3.77661 831.211,4.44328 838.5,5.5 Z"/></g>
<g><path style="opacity:1" fill="#dbd171" d="M 791.5,6.5 C 791.5,7.5 791.5,8.5 791.5,9.5C 794.5,9.5 797.5,9.5 800.5,9.5C 794.653,10.7203 788.986,12.7203 783.5,15.5C 783.762,14.0222 783.429,12.6888 782.5,11.5C 780.929,12.3094 779.262,12.6427 777.5,12.5C 781.679,9.54523 786.346,7.54523 791.5,6.5 Z"/></g>
<g><path style="opacity:1" fill="#bcb467" d="M 1071.5,8.5 C 1074.74,9.46291 1077.74,10.7962 1080.5,12.5C 1076.76,12.459 1073.76,11.1257 1071.5,8.5 Z"/></g>
<g><path style="opacity:1" fill="#fdf173" d="M 552.5,22.5 C 552.5,23.8333 552.5,25.1667 552.5,26.5C 537.167,26.5 521.833,26.5 506.5,26.5C 506.704,23.4824 507.037,20.4824 507.5,17.5C 509.442,12.5588 512.775,8.89217 517.5,6.5C 518.496,6.41423 519.329,6.74756 520,7.5C 522.554,6.22895 525.387,5.56228 528.5,5.5C 531.167,5.66667 533.833,5.83333 536.5,6C 538.976,8.57114 541.976,10.0711 545.5,10.5C 545.34,12.1992 545.506,13.8659 546,15.5C 548.393,17.6853 550.559,20.0187 552.5,22.5 Z"/></g>
<g><path style="opacity:1" fill="#e6de77" d="M 552.5,20.5 C 552.5,21.1667 552.5,21.8333 552.5,22.5C 550.559,20.0187 548.393,17.6853 546,15.5C 545.506,13.8659 545.34,12.1992 545.5,10.5C 541.976,10.0711 538.976,8.57114 536.5,6C 533.833,5.83333 531.167,5.66667 528.5,5.5C 525.387,5.56228 522.554,6.22895 520,7.5C 519.329,6.74756 518.496,6.41423 517.5,6.5C 518.6,5.44153 519.934,4.6082 521.5,4C 536.802,0.645789 547.135,6.14579 552.5,20.5 Z"/></g>
<g><path style="opacity:1" fill="#fcf175" d="M 783.5,15.5 C 783.167,15.5 782.833,15.5 782.5,15.5C 780.105,16.3635 777.771,16.3635 775.5,15.5C 776.612,14.7348 777.279,13.7348 777.5,12.5C 779.262,12.6427 780.929,12.3094 782.5,11.5C 783.429,12.6888 783.762,14.0222 783.5,15.5 Z"/></g>
<g><path style="opacity:1" fill="#f6eb72" d="M 74.5,7.5 C 74.5,7.16667 74.5,6.83333 74.5,6.5C 82.4261,6.03713 89.7594,7.70379 96.5,11.5C 97.91,11.1322 98.91,10.2989 99.5,9C 101.708,8.80912 103.708,8.30912 105.5,7.5C 107.717,8.36863 110.05,8.70197 112.5,8.5C 120.864,10.8499 128.531,14.5166 135.5,19.5C 136.413,21.0861 136.413,22.5861 135.5,24C 137.5,24.3333 139.5,24.6667 141.5,25C 142.517,26.0495 142.684,27.2161 142,28.5C 138.31,25.1596 136.143,25.8262 135.5,30.5C 137.167,30.5 138.833,30.5 140.5,30.5C 139.755,35.11 138.255,39.4434 136,43.5C 134.99,40.5525 133.157,39.8858 130.5,41.5C 129.274,39.7221 127.607,38.7221 125.5,38.5C 118.653,29.885 110.653,22.385 101.5,16C 93.0878,11.2513 84.0878,8.41792 74.5,7.5 Z"/></g>
<g><path style="opacity:1" fill="#ece173" d="M 43.5,6.5 C 41.7756,8.68944 39.4422,9.85611 36.5,10C 35.6634,11.0113 35.33,12.1779 35.5,13.5C 37.099,13.2322 38.4324,13.5655 39.5,14.5C 34.2056,18.1266 29.539,22.46 25.5,27.5C 26.0667,24.6516 25.4,21.985 23.5,19.5C 20.8333,20.1667 18.1667,20.8333 15.5,21.5C 19.4168,17.0943 24.0834,13.5943 29.5,11C 34.037,8.98727 38.7037,7.48727 43.5,6.5 Z"/></g>
<g><path style="opacity:1" fill="#f9ed73" d="M 1070.5,8.5 C 1070.83,8.5 1071.17,8.5 1071.5,8.5C 1073.76,11.1257 1076.76,12.459 1080.5,12.5C 1088.13,14.9762 1094.79,18.9762 1100.5,24.5C 1099.79,29.9737 1098.79,35.3071 1097.5,40.5C 1096.55,44.4031 1095.05,48.0698 1093,51.5C 1083.86,37.5045 1072.69,25.5045 1059.5,15.5C 1059.59,14.5041 1059.25,13.6708 1058.5,13C 1059.31,12.6924 1059.97,12.1924 1060.5,11.5C 1058.72,10.394 1056.88,10.394 1055,11.5C 1050.65,10.302 1046.48,8.63538 1042.5,6.5C 1044.33,6.16667 1046.17,5.83333 1048,5.5C 1054.21,6.37509 1060.21,7.70842 1066,9.5C 1067.36,8.61983 1068.86,8.28649 1070.5,8.5 Z"/></g>
<g><path style="opacity:1" fill="#3d3810" d="M 375.5,6.5 C 390.343,6.17065 405.01,6.50398 419.5,7.5C 405.167,7.5 390.833,7.5 376.5,7.5C 376.168,41.3375 376.502,75.0041 377.5,108.5C 377.44,109.043 377.107,109.376 376.5,109.5C 375.5,75.1731 375.167,40.8398 375.5,6.5 Z"/></g>
<g><path style="opacity:1" fill="#f1e775" d="M 777.5,12.5 C 777.279,13.7348 776.612,14.7348 775.5,15.5C 777.771,16.3635 780.105,16.3635 782.5,15.5C 778.021,18.919 773.688,22.5857 769.5,26.5C 766.05,25.7564 764.384,27.0897 764.5,30.5C 763.448,30.3505 762.448,30.5172 761.5,31C 762.406,32.6995 762.739,34.5328 762.5,36.5C 762.167,36.5 761.833,36.5 761.5,36.5C 761.657,35.1266 761.49,33.7932 761,32.5C 758.519,34.3137 755.685,34.9804 752.5,34.5C 752.067,37.1656 751.567,39.8323 751,42.5C 749.75,43.5733 748.416,43.5733 747,42.5C 745.649,44.0182 744.149,45.3515 742.5,46.5C 750.885,31.782 762.551,20.4487 777.5,12.5 Z"/></g>
<g><path style="opacity:1" fill="#e8e091" d="M 507.5,17.5 C 507.037,20.4824 506.704,23.4824 506.5,26.5C 521.833,26.5 537.167,26.5 552.5,26.5C 552.5,25.1667 552.5,23.8333 552.5,22.5C 552.5,21.8333 552.5,21.1667 552.5,20.5C 553.468,22.6074 553.802,24.9407 553.5,27.5C 537.167,27.5 520.833,27.5 504.5,27.5C 504.59,23.7858 505.59,20.4525 507.5,17.5 Z"/></g>
<g><path style="opacity:1" fill="#d8cd6c" d="M 769.5,26.5 C 767.154,29.8708 764.821,33.2041 762.5,36.5C 762.739,34.5328 762.406,32.6995 761.5,31C 762.448,30.5172 763.448,30.3505 764.5,30.5C 764.384,27.0897 766.05,25.7564 769.5,26.5 Z"/></g>
<g><path style="opacity:1" fill="#b1ac68" d="M 587.5,17.5 C 587.5,17.8333 587.5,18.1667 587.5,18.5C 586.501,62.6635 586.168,106.997 586.5,151.5C 585.833,129.336 585.5,107.003 585.5,84.5C 585.5,61.8232 586.167,39.4899 587.5,17.5 Z"/></g>
<g><path style="opacity:1" fill="#bfb764" d="M 950.5,24.5 C 949.796,29.2897 948.129,33.623 945.5,37.5C 945.293,32.2774 946.96,27.944 950.5,24.5 Z"/></g>
<g><path style="opacity:1" fill="#fcf079" d="M 553.5,29.5 C 553.5,30.1667 553.5,30.8333 553.5,31.5C 537.74,33.4613 521.74,34.128 505.5,33.5C 505.5,32.1667 505.5,30.8333 505.5,29.5C 521.5,29.5 537.5,29.5 553.5,29.5 Z"/></g>
<g><path style="opacity:1" fill="#beb352" d="M 553.5,29.5 C 537.5,29.5 521.5,29.5 505.5,29.5C 505.5,30.8333 505.5,32.1667 505.5,33.5C 521.74,34.128 537.74,33.4613 553.5,31.5C 554.55,31.9046 554.55,32.5712 553.5,33.5C 537.18,34.4994 520.847,34.8328 504.5,34.5C 504.5,32.5 504.5,30.5 504.5,28.5C 521.009,28.1702 537.342,28.5036 553.5,29.5 Z"/></g>
<g><path style="opacity:1" fill="#c2bd6b" d="M 1100.5,24.5 C 1102,24.4148 1103,25.0815 1103.5,26.5C 1101.45,31.2562 1099.45,35.9228 1097.5,40.5C 1098.79,35.3071 1099.79,29.9737 1100.5,24.5 Z"/></g>
<g><path style="opacity:1" fill="#cac16a" d="M 235.5,27.5 C 237.942,27.1192 238.609,27.7859 237.5,29.5C 240.046,34.8899 241.713,40.5566 242.5,46.5C 239.932,40.3424 237.598,34.0091 235.5,27.5 Z"/></g>
<g><path style="opacity:1" fill="#ede597" d="M 502.5,35.5 C 520.17,35.3334 537.836,35.5001 555.5,36C 556.833,37.6667 556.833,39.3333 555.5,41C 537.836,41.4999 520.17,41.6666 502.5,41.5C 502.5,39.5 502.5,37.5 502.5,35.5 Z"/></g>
<g><path style="opacity:1" fill="#fcf072" d="M 25.5,27.5 C 24.5,27.5 23.5,27.5 22.5,27.5C 21.5659,32.4594 20.7325,37.4594 20,42.5C 18.331,44.1691 17.4977,46.1691 17.5,48.5C 19.8244,48.6615 21.4911,49.8282 22.5,52C 22.5,53.3333 22.5,54.6667 22.5,56C 24.9422,57.11 27.1089,58.61 29,60.5C 29.3333,60.1667 29.6667,59.8333 30,59.5C 30.1953,61.2072 30.1953,62.8739 30,64.5C 32.2185,62.3813 34.7185,62.048 37.5,63.5C 36.8333,64.1667 36.1667,64.8333 35.5,65.5C 36,65.8333 36.5,66.1667 37,66.5C 40.1161,63.5108 43.6161,62.8442 47.5,64.5C 50.9679,65.1009 54.3012,66.1009 57.5,67.5C 61.5106,70.3437 66.1773,71.6771 71.5,71.5C 74.6235,71.9084 76.9568,73.575 78.5,76.5C 84.1197,75.7383 89.7864,75.7383 95.5,76.5C 95.8333,76.5 96.1667,76.5 96.5,76.5C 96.5774,77.7498 97.244,78.5831 98.5,79C 103.402,80.6425 108.402,81.8091 113.5,82.5C 113.574,84.4109 114.574,85.5776 116.5,86C 115.376,86.2492 114.376,86.7492 113.5,87.5C 115.635,88.6454 117.801,88.6454 120,87.5C 121.567,88.8561 123.4,89.5228 125.5,89.5C 125.5,90.8333 125.5,92.1667 125.5,93.5C 127.821,93.2289 129.821,93.8955 131.5,95.5C 131.599,98.1213 131.933,100.788 132.5,103.5C 133.386,102.675 133.719,101.675 133.5,100.5C 134.959,100.433 136.292,100.766 137.5,101.5C 139.771,103.612 141.104,106.279 141.5,109.5C 143.145,119.085 143.812,128.752 143.5,138.5C 143.139,142.915 141.806,146.915 139.5,150.5C 138.5,150.5 137.5,150.5 136.5,150.5C 136.5,151.833 136.5,153.167 136.5,154.5C 135.167,154.5 133.833,154.5 132.5,154.5C 132.719,155.675 132.386,156.675 131.5,157.5C 130.167,156.833 128.833,156.167 127.5,155.5C 126.943,153.282 126.943,150.949 127.5,148.5C 127.5,148.167 127.5,147.833 127.5,147.5C 129.752,142.593 130.085,137.426 128.5,132C 128.392,130.319 127.725,129.152 126.5,128.5C 122.847,121.337 117.847,115.17 111.5,110C 105.53,106.846 99.53,104.012 93.5,101.5C 90.0689,98.886 86.0689,97.886 81.5,98.5C 75.4059,97.4758 69.4059,96.1425 63.5,94.5C 62.9094,93.8485 62.2427,93.1818 61.5,92.5C 58.2317,91.513 54.8984,91.1796 51.5,91.5C 51.3893,90.8826 51.056,90.3826 50.5,90C 47.5219,89.304 44.5219,88.804 41.5,88.5C 27.9222,85.4232 16.4222,78.7566 7,68.5C 5.29501,66.4234 4.12835,64.09 3.5,61.5C 1.20753,50.4643 2.87419,40.1309 8.5,30.5C 9.7202,29.2889 10.8869,29.2889 12,30.5C 12.6667,29.1667 13.3333,27.8333 14,26.5C 14.3333,27.1667 14.6667,27.8333 15,28.5C 16.0603,26.0499 16.227,23.7166 15.5,21.5C 18.1667,20.8333 20.8333,20.1667 23.5,19.5C 25.4,21.985 26.0667,24.6516 25.5,27.5 Z"/></g>
<g><path style="opacity:1" fill="#ebe17e" d="M 578.5,13.5 C 580.095,15.1112 581.261,17.1112 582,19.5C 582.333,65.1667 582.667,110.833 583,156.5C 584.49,109.918 584.99,63.2513 584.5,16.5C 585.791,16.2627 586.791,16.596 587.5,17.5C 586.167,39.4899 585.5,61.8232 585.5,84.5C 585.5,107.003 585.833,129.336 586.5,151.5C 587.248,156.485 587.915,161.485 588.5,166.5C 587.035,163.883 585.369,161.217 583.5,158.5C 581.203,163.729 579.537,169.062 578.5,174.5C 577.167,174.5 575.833,174.5 574.5,174.5C 578.995,167.221 581.162,159.221 581,150.5C 581.667,111.5 581.667,72.5 581,33.5C 580.716,26.7482 579.882,20.0816 578.5,13.5 Z"/></g>
<g><path style="opacity:1" fill="#d4ca71" d="M 218.5,25.5 C 218.07,29.6442 217.07,33.6442 215.5,37.5C 215.667,38.5 215.833,39.5 216,40.5C 216.498,38.4556 217.665,37.1223 219.5,36.5C 217.675,41.986 215.675,47.3194 213.5,52.5C 214.341,48.8366 214.841,45.1699 215,41.5C 213.454,44.4394 211.621,47.1061 209.5,49.5C 212.129,41.2698 215.129,33.2698 218.5,25.5 Z"/></g>
<g><path style="opacity:1" fill="#857e47" d="M 706.5,29.5 C 706.5,79.8333 706.5,130.167 706.5,180.5C 703.287,180.81 700.287,180.477 697.5,179.5C 700.167,179.5 702.833,179.5 705.5,179.5C 705.168,129.331 705.501,79.3306 706.5,29.5 Z"/></g>
<g><path style="opacity:1" fill="#fcf072" d="M 876.5,22.5 C 887.915,31.5796 896.248,42.913 901.5,56.5C 902.412,62.5746 903.745,68.5746 905.5,74.5C 906.692,87.8365 906.692,101.17 905.5,114.5C 905.5,114.833 905.5,115.167 905.5,115.5C 904.542,115.953 903.708,116.619 903,117.5C 898.875,126.08 895.041,134.747 891.5,143.5C 887.873,148.794 883.54,153.461 878.5,157.5C 869.529,157.952 868.529,155.785 875.5,151C 876.793,150.51 878.127,150.343 879.5,150.5C 877.918,145.734 878.752,141.4 882,137.5C 882.696,134.522 883.196,131.522 883.5,128.5C 886.539,121.611 887.872,114.277 887.5,106.5C 887.384,99.1136 886.718,91.7803 885.5,84.5C 884.817,84.1373 884.15,83.8039 883.5,83.5C 883.5,82.8333 883.5,82.1667 883.5,81.5C 883.03,76.3155 882.364,71.1488 881.5,66C 881.445,63.0939 882.112,60.4272 883.5,58C 883.576,55.2439 882.243,54.0772 879.5,54.5C 879.808,56.924 879.474,59.2573 878.5,61.5C 878.167,61.1667 877.833,60.8333 877.5,60.5C 875.724,55.551 873.724,50.7177 871.5,46C 874.648,44.6199 876.148,42.1199 876,38.5C 876.689,39.3567 877.522,40.0233 878.5,40.5C 879.466,38.604 879.799,36.604 879.5,34.5C 876.833,34.5 874.167,34.5 871.5,34.5C 871.762,35.9778 871.429,37.3112 870.5,38.5C 869.575,39.6405 868.741,39.6405 868,38.5C 868,35.8333 868,33.1667 868,30.5C 865.167,29 863,26.8333 861.5,24C 862.593,22.6346 863.926,22.3013 865.5,23C 866.85,24.7183 868.017,26.5516 869,28.5C 868.57,26.0819 868.403,23.7485 868.5,21.5C 871.107,20.4225 873.274,21.0892 875,23.5C 875.383,22.944 875.883,22.6107 876.5,22.5 Z"/></g>
<g><path style="opacity:1" fill="#fbf07b" d="M 503.5,36.5 C 520.5,36.5 537.5,36.5 554.5,36.5C 554.5,37.8333 554.5,39.1667 554.5,40.5C 537.5,40.5 520.5,40.5 503.5,40.5C 503.5,39.1667 503.5,37.8333 503.5,36.5 Z"/></g>
<g><path style="opacity:1" fill="#e6dd74" d="M 135.5,19.5 C 139.275,21.0562 142.275,23.5562 144.5,27C 141.726,35.3239 138.559,43.4906 135,51.5C 131.824,47.1372 128.657,42.8039 125.5,38.5C 127.607,38.7221 129.274,39.7221 130.5,41.5C 133.157,39.8858 134.99,40.5525 136,43.5C 138.255,39.4434 139.755,35.11 140.5,30.5C 138.833,30.5 137.167,30.5 135.5,30.5C 136.143,25.8262 138.31,25.1596 142,28.5C 142.684,27.2161 142.517,26.0495 141.5,25C 139.5,24.6667 137.5,24.3333 135.5,24C 136.413,22.5861 136.413,21.0861 135.5,19.5 Z"/></g>
<g><path style="opacity:1" fill="#a39a59" d="M 961.5,37.5 C 961.59,40.1522 960.924,42.4855 959.5,44.5C 959.41,41.8478 960.076,39.5145 961.5,37.5 Z"/></g>
<g><path style="opacity:1" fill="#cfc76f" d="M 348.5,15.5 C 350.218,17.3637 351.385,19.6971 352,22.5C 352.667,66.8333 352.667,111.167 352,155.5C 351.24,159.819 350.573,164.152 350,168.5C 349.241,170.063 348.074,171.063 346.5,171.5C 348.446,166.713 349.613,161.713 350,156.5C 350.667,113.167 350.667,69.8333 350,26.5C 349.58,22.8086 349.08,19.1419 348.5,15.5 Z"/></g>
<g><path style="opacity:1" fill="#e5dd76" d="M 448.5,52.5 C 454.146,40.8913 453.813,29.558 447.5,18.5C 448.583,18.5394 449.583,18.8728 450.5,19.5C 451.192,18.9747 451.692,18.3081 452,17.5C 454.253,27.0428 454.919,36.7094 454,46.5C 452.327,48.7889 450.493,50.7889 448.5,52.5 Z"/></g>
<g><path style="opacity:1" fill="#d7ce72" d="M 926.5,34.5 C 930.308,34.1632 933.974,34.6632 937.5,36C 938.12,38.4728 938.786,40.9728 939.5,43.5C 940.452,41.9547 940.785,40.288 940.5,38.5C 941.833,38.5 943.167,38.5 944.5,38.5C 941.708,44.3904 937.708,49.3904 932.5,53.5C 931.5,53.1667 930.833,52.5 930.5,51.5C 934.403,47.2271 936.403,42.3938 936.5,37C 932.91,36.6894 929.577,35.856 926.5,34.5 Z"/></g>
<g><path style="opacity:1" fill="#d6cd76" d="M 261.5,27.5 C 264.734,34.5288 267.401,41.8621 269.5,49.5C 267.919,47.3263 266.419,44.9929 265,42.5C 263.109,37.6625 261.942,32.6625 261.5,27.5 Z"/></g>
<g><path style="opacity:1" fill="#dad175" d="M 700.5,24.5 C 701.222,24.9175 701.722,25.5842 702,26.5C 702.833,59.8383 702.667,93.1717 701.5,126.5C 699.783,125.332 699.116,123.665 699.5,121.5C 700.222,121.918 700.722,122.584 701,123.5C 701.775,90.4874 701.608,57.4874 700.5,24.5 Z"/></g>
<g><path style="opacity:1" fill="#c9c26b" d="M 761.5,36.5 C 761.833,36.5 762.167,36.5 762.5,36.5C 761.07,40.3544 759.403,44.0211 757.5,47.5C 757.677,43.2924 759.01,39.6257 761.5,36.5 Z"/></g>
<g><path style="opacity:1" fill="#faef7a" d="M 213.5,52.5 C 213.5,52.8333 213.5,53.1667 213.5,53.5C 211.39,54.4525 210.223,56.1192 210,58.5C 208.705,55.9949 208.539,53.3283 209.5,50.5C 209.5,50.1667 209.5,49.8333 209.5,49.5C 211.621,47.1061 213.454,44.4394 215,41.5C 214.841,45.1699 214.341,48.8366 213.5,52.5 Z"/></g>
<g><path style="opacity:1" fill="#d0c96d" d="M 15.5,21.5 C 16.227,23.7166 16.0603,26.0499 15,28.5C 14.6667,27.8333 14.3333,27.1667 14,26.5C 13.3333,27.8333 12.6667,29.1667 12,30.5C 10.8869,29.2889 9.7202,29.2889 8.5,30.5C 2.87419,40.1309 1.20753,50.4643 3.5,61.5C -2.01746,46.2934 1.31587,33.1267 13.5,22C 14.0944,21.5357 14.7611,21.369 15.5,21.5 Z"/></g>
<g><path style="opacity:1" fill="#fef172" d="M 761.5,36.5 C 759.01,39.6257 757.677,43.2924 757.5,47.5C 757.5,47.8333 757.5,48.1667 757.5,48.5C 756.414,48.62 755.747,49.2867 755.5,50.5C 752.702,61.8958 751.702,73.5624 752.5,85.5C 752.335,88.5184 752.502,91.5184 753,94.5C 754.554,101.93 756.388,109.263 758.5,116.5C 757.402,117.397 757.402,118.23 758.5,119C 757.234,119.309 756.067,119.809 755,120.5C 754.55,117.894 753.05,116.561 750.5,116.5C 750.151,119.99 751.651,122.323 755,123.5C 755.167,124.333 755.333,125.167 755.5,126C 754.22,128.36 753.553,130.86 753.5,133.5C 750.289,133.986 747.289,134.986 744.5,136.5C 744.512,133.858 743.179,132.525 740.5,132.5C 740.923,130.219 740.256,128.552 738.5,127.5C 738.322,124.784 737.822,122.117 737,119.5C 736.583,118.244 735.75,117.577 734.5,117.5C 732.565,103.254 732.065,88.9211 733,74.5C 734.012,69.7576 735.345,65.0909 737,60.5C 737.508,58.0958 738.675,57.4291 740.5,58.5C 741.343,56.7688 741.343,54.9354 740.5,53C 741.618,50.941 742.285,48.7743 742.5,46.5C 744.149,45.3515 745.649,44.0182 747,42.5C 748.416,43.5733 749.75,43.5733 751,42.5C 751.567,39.8323 752.067,37.1656 752.5,34.5C 755.685,34.9804 758.519,34.3137 761,32.5C 761.49,33.7932 761.657,35.1266 761.5,36.5 Z"/></g>
<g><path style="opacity:1" fill="#f4e875" d="M 25.5,27.5 C 20.1894,40.0872 23.1894,50.2539 34.5,58C 38.9252,60.2126 43.2585,62.3793 47.5,64.5C 43.6161,62.8442 40.1161,63.5108 37,66.5C 36.5,66.1667 36,65.8333 35.5,65.5C 36.1667,64.8333 36.8333,64.1667 37.5,63.5C 34.7185,62.048 32.2185,62.3813 30,64.5C 30.1953,62.8739 30.1953,61.2072 30,59.5C 29.6667,59.8333 29.3333,60.1667 29,60.5C 27.1089,58.61 24.9422,57.11 22.5,56C 22.5,54.6667 22.5,53.3333 22.5,52C 21.4911,49.8282 19.8244,48.6615 17.5,48.5C 17.4977,46.1691 18.331,44.1691 20,42.5C 20.7325,37.4594 21.5659,32.4594 22.5,27.5C 23.5,27.5 24.5,27.5 25.5,27.5 Z"/></g>
<g><path style="opacity:1" fill="#dad16f" d="M 477.5,42.5 C 476.269,50.2951 472.936,56.9618 467.5,62.5C 467.249,60.8297 466.582,59.3297 465.5,58C 467.134,57.5065 468.801,57.3398 470.5,57.5C 470.215,55.712 470.548,54.0453 471.5,52.5C 473.498,49.1714 475.498,45.8381 477.5,42.5 Z"/></g>
<g><path style="opacity:1" fill="#cdc46f" d="M 242.5,46.5 C 243.497,46.4701 244.164,46.9701 244.5,48C 246.053,52.0468 247.053,56.2135 247.5,60.5C 245.313,56.1046 243.646,51.4379 242.5,46.5 Z"/></g>
<g><path style="opacity:1" fill="#cdc36b" d="M 209.5,50.5 C 208.539,53.3283 208.705,55.9949 210,58.5C 210.223,56.1192 211.39,54.4525 213.5,53.5C 209.538,65.7274 205.204,77.7274 200.5,89.5C 200.354,86.1737 201.021,83.007 202.5,80C 202.318,77.4219 201.318,76.9219 199.5,78.5C 199.796,76.597 200.463,74.9303 201.5,73.5C 201.5,74.5 201.5,75.5 201.5,76.5C 202.5,76.5 203.5,76.5 204.5,76.5C 205.742,72.0459 207.075,67.5459 208.5,63C 208.318,60.4219 207.318,59.9219 205.5,61.5C 206.462,57.6052 207.796,53.9385 209.5,50.5 Z"/></g>
<g><path style="opacity:1" fill="#b4ae5a" d="M 757.5,48.5 C 754.019,60.5701 752.685,72.9034 753.5,85.5C 753.167,85.5 752.833,85.5 752.5,85.5C 751.702,73.5624 752.702,61.8958 755.5,50.5C 755.747,49.2867 756.414,48.62 757.5,48.5 Z"/></g>
<g><path style="opacity:1" fill="#fcf072" d="M 981.5,42.5 C 985.199,52.1988 991.865,58.8655 1001.5,62.5C 1001.41,63.4959 1001.75,64.3292 1002.5,65C 1007.81,66.4996 1013.14,67.6662 1018.5,68.5C 1018.83,68.5 1019.17,68.5 1019.5,68.5C 1020.43,69.3149 1021.43,70.1482 1022.5,71C 1027.47,71.2242 1032.14,72.3909 1036.5,74.5C 1042.13,75.5267 1047.8,76.1934 1053.5,76.5C 1055.29,76.366 1056.96,76.6993 1058.5,77.5C 1058.47,78.4972 1058.97,79.1639 1060,79.5C 1066.79,82.2799 1073.29,84.6133 1079.5,86.5C 1088.56,90.5611 1094.89,97.2278 1098.5,106.5C 1100.47,118.075 1100.97,129.742 1100,141.5C 1098.2,144.678 1096.7,148.012 1095.5,151.5C 1094.15,152.95 1092.48,153.617 1090.5,153.5C 1090.52,151.857 1089.85,150.524 1088.5,149.5C 1088.71,148.914 1089.04,148.414 1089.5,148C 1088.59,140.175 1087.42,132.341 1086,124.5C 1084.31,123.675 1084.15,122.675 1085.5,121.5C 1083.89,121.611 1082.22,121.278 1080.5,120.5C 1078.2,117.859 1075.86,115.192 1073.5,112.5C 1072.59,110.914 1072.59,109.414 1073.5,108C 1072.45,106.461 1071.12,106.295 1069.5,107.5C 1064.99,104.453 1059.99,102.787 1054.5,102.5C 1054.17,102.5 1053.83,102.5 1053.5,102.5C 1051.91,101.017 1050.24,99.517 1048.5,98C 1045.18,97.8612 1042.18,96.8612 1039.5,95C 1039.83,94.6667 1040.17,94.3333 1040.5,94C 1038.73,93.0296 1036.89,92.1963 1035,91.5C 1031.92,92.5627 1028.75,93.2293 1025.5,93.5C 1019.26,91.8501 1012.93,90.8501 1006.5,90.5C 1002.11,88.6538 997.778,86.4871 993.5,84C 991.19,83.5034 988.857,83.3367 986.5,83.5C 986.167,83.5 985.833,83.5 985.5,83.5C 984.766,82.2921 984.433,80.9587 984.5,79.5C 981.813,79.6585 979.48,78.8252 977.5,77C 979.645,76.2569 979.811,75.4235 978,74.5C 975.83,75.7201 973.663,75.7201 971.5,74.5C 961.816,66.7836 957.816,56.7836 959.5,44.5C 960.924,42.4855 961.59,40.1522 961.5,37.5C 965.724,27.943 972.39,20.6097 981.5,15.5C 994.345,11.9027 995.512,13.9027 985,21.5C 984.517,22.448 984.351,23.448 984.5,24.5C 983.5,24.5 982.5,24.5 981.5,24.5C 980.281,30.643 980.281,36.643 981.5,42.5 Z"/></g>
<g><path style="opacity:1" fill="#c5bf6a" d="M 1001.5,62.5 C 1007.25,64.5269 1012.92,66.5269 1018.5,68.5C 1013.14,67.6662 1007.81,66.4996 1002.5,65C 1001.75,64.3292 1001.41,63.4959 1001.5,62.5 Z"/></g>
<g><path style="opacity:1" fill="#b8b060" d="M 57.5,67.5 C 62.9739,68.7228 68.3073,70.0561 73.5,71.5C 72.8333,71.5 72.1667,71.5 71.5,71.5C 66.1773,71.6771 61.5106,70.3437 57.5,67.5 Z"/></g>
<g><path style="opacity:1" fill="#ded578" d="M 742.5,46.5 C 742.285,48.7743 741.618,50.941 740.5,53C 741.343,54.9354 741.343,56.7688 740.5,58.5C 738.675,57.4291 737.508,58.0958 737,60.5C 735.345,65.0909 734.012,69.7576 733,74.5C 732.065,88.9211 732.565,103.254 734.5,117.5C 728.794,97.812 729.294,78.1453 736,58.5C 737.904,54.2222 740.071,50.2222 742.5,46.5 Z"/></g>
<g><path style="opacity:1" fill="#cec66e" d="M 247.5,61.5 C 249.53,63.9218 251.197,66.7551 252.5,70C 253.322,72.4339 253.656,74.9339 253.5,77.5C 250.987,72.4532 248.987,67.1198 247.5,61.5 Z"/></g>
<g><path style="opacity:1" fill="#dbd273" d="M 71.5,71.5 C 72.1667,71.5 72.8333,71.5 73.5,71.5C 81.0863,72.5657 88.4196,74.2324 95.5,76.5C 89.7864,75.7383 84.1197,75.7383 78.5,76.5C 76.9568,73.575 74.6235,71.9084 71.5,71.5 Z"/></g>
<g><path style="opacity:1" fill="#f2e978" d="M 201.5,73.5 C 202.238,69.2854 203.572,65.2854 205.5,61.5C 207.318,59.9219 208.318,60.4219 208.5,63C 207.075,67.5459 205.742,72.0459 204.5,76.5C 203.5,76.5 202.5,76.5 201.5,76.5C 201.5,75.5 201.5,74.5 201.5,73.5 Z"/></g>
<g><path style="opacity:1" fill="#cfc66d" d="M 1019.5,68.5 C 1031.09,70.5658 1042.42,73.2325 1053.5,76.5C 1047.8,76.1934 1042.13,75.5267 1036.5,74.5C 1032.14,72.3909 1027.47,71.2242 1022.5,71C 1021.43,70.1482 1020.43,69.3149 1019.5,68.5 Z"/></g>
<g><path style="opacity:1" fill="#beb665" d="M 96.5,76.5 C 102.533,77.7315 108.2,79.7315 113.5,82.5C 108.402,81.8091 103.402,80.6425 98.5,79C 97.244,78.5831 96.5774,77.7498 96.5,76.5 Z"/></g>
<g><path style="opacity:1" fill="#dad172" d="M 971.5,74.5 C 973.663,75.7201 975.83,75.7201 978,74.5C 979.811,75.4235 979.645,76.2569 977.5,77C 979.48,78.8252 981.813,79.6585 984.5,79.5C 984.433,80.9587 984.766,82.2921 985.5,83.5C 980.291,81.2809 975.624,78.2809 971.5,74.5 Z"/></g>
<g><path style="opacity:1" fill="#cbc56f" d="M 253.5,78.5 C 254.376,78.3691 255.043,78.7025 255.5,79.5C 257.999,86.313 259.999,93.313 261.5,100.5C 258.32,93.45 255.653,86.1167 253.5,78.5 Z"/></g>
<g><path style="opacity:1" fill="#fcf072" d="M 226.5,2.5 C 235.584,2.19561 244.584,2.52895 253.5,3.5C 256.762,11.2855 259.428,19.2855 261.5,27.5C 261.942,32.6625 263.109,37.6625 265,42.5C 266.419,44.9929 267.919,47.3263 269.5,49.5C 276.094,66.6154 282.094,83.9487 287.5,101.5C 287.399,107.766 289.399,113.099 293.5,117.5C 293.5,117.833 293.5,118.167 293.5,118.5C 293.936,123.188 294.936,127.688 296.5,132C 294.791,134.267 293.957,137.434 294,141.5C 294.414,141.957 294.914,142.291 295.5,142.5C 296.694,139.381 298.194,139.048 300,141.5C 301.34,147.521 303.84,152.854 307.5,157.5C 309.033,161.433 310.367,165.433 311.5,169.5C 311.666,172.168 312.666,174.502 314.5,176.5C 304.339,177.865 294.005,178.531 283.5,178.5C 285.238,175.904 286.238,172.904 286.5,169.5C 286.614,166.622 285.948,163.956 284.5,161.5C 285.815,160.105 285.481,159.105 283.5,158.5C 282.702,156.922 282.202,155.256 282,153.5C 281.329,152.748 280.496,152.414 279.5,152.5C 278.29,146.236 276.624,140.069 274.5,134C 274.164,132.97 273.497,132.47 272.5,132.5C 272.506,127.849 271.173,123.849 268.5,120.5C 268.5,118.833 268.5,117.167 268.5,115.5C 265.784,115.614 263.784,114.614 262.5,112.5C 262.953,111.542 263.619,110.708 264.5,110C 262.998,106.995 261.998,103.829 261.5,100.5C 259.999,93.313 257.999,86.313 255.5,79.5C 255.043,78.7025 254.376,78.3691 253.5,78.5C 253.5,78.1667 253.5,77.8333 253.5,77.5C 253.656,74.9339 253.322,72.4339 252.5,70C 251.197,66.7551 249.53,63.9218 247.5,61.5C 247.5,61.1667 247.5,60.8333 247.5,60.5C 247.053,56.2135 246.053,52.0468 244.5,48C 244.164,46.9701 243.497,46.4701 242.5,46.5C 241.713,40.5566 240.046,34.8899 237.5,29.5C 238.609,27.7859 237.942,27.1192 235.5,27.5C 235.5,27.1667 235.5,26.8333 235.5,26.5C 235.264,23.0861 234.598,19.7527 233.5,16.5C 232.859,15.0065 231.859,14.0065 230.5,13.5C 230.5,13.1667 230.5,12.8333 230.5,12.5C 230.5,11.5 230.5,10.5 230.5,9.5C 229.167,9.5 227.833,9.5 226.5,9.5C 224.187,18.1396 221.854,26.8063 219.5,35.5C 219.5,35.8333 219.5,36.1667 219.5,36.5C 217.665,37.1223 216.498,38.4556 216,40.5C 215.833,39.5 215.667,38.5 215.5,37.5C 217.07,33.6442 218.07,29.6442 218.5,25.5C 220.398,17.47 223.064,9.8033 226.5,2.5 Z"/></g>
<g><path style="opacity:1" fill="#c8c16b" d="M 230.5,13.5 C 231.859,14.0065 232.859,15.0065 233.5,16.5C 234.598,19.7527 235.264,23.0861 235.5,26.5C 233.598,22.3447 231.931,18.0114 230.5,13.5 Z"/></g>
<g><path style="opacity:1" fill="#c3b968" d="M 230.5,12.5 C 229.778,12.0825 229.278,11.4158 229,10.5C 226.099,19.0493 222.933,27.3826 219.5,35.5C 221.854,26.8063 224.187,18.1396 226.5,9.5C 227.833,9.5 229.167,9.5 230.5,9.5C 230.5,10.5 230.5,11.5 230.5,12.5 Z"/></g>
<g><path style="opacity:1" fill="#dad072" d="M 986.5,83.5 C 988.857,83.3367 991.19,83.5034 993.5,84C 997.778,86.4871 1002.11,88.6538 1006.5,90.5C 999.335,89.3354 992.669,87.002 986.5,83.5 Z"/></g>
<g><path style="opacity:1" fill="#ccc36d" d="M 1058.5,77.5 C 1066.02,79.5535 1073.02,82.5535 1079.5,86.5C 1073.29,84.6133 1066.79,82.2799 1060,79.5C 1058.97,79.1639 1058.47,78.4972 1058.5,77.5 Z"/></g>
<g><path style="opacity:1" fill="#e5db73" d="M 113.5,82.5 C 123.926,85.942 131.926,92.2753 137.5,101.5C 136.292,100.766 134.959,100.433 133.5,100.5C 133.719,101.675 133.386,102.675 132.5,103.5C 131.933,100.788 131.599,98.1213 131.5,95.5C 129.821,93.8955 127.821,93.2289 125.5,93.5C 125.5,92.1667 125.5,90.8333 125.5,89.5C 123.4,89.5228 121.567,88.8561 120,87.5C 117.801,88.6454 115.635,88.6454 113.5,87.5C 114.376,86.7492 115.376,86.2492 116.5,86C 114.574,85.5776 113.574,84.4109 113.5,82.5 Z"/></g>
<g><path style="opacity:1" fill="#cac26d" d="M 436.5,82.5 C 443.067,83.7257 449.4,85.7257 455.5,88.5C 453.143,88.6633 450.81,88.4966 448.5,88C 444.312,86.0798 439.979,84.5798 435.5,83.5C 435.624,82.8933 435.957,82.56 436.5,82.5 Z"/></g>
<g><path style="opacity:1" fill="#e1d774" d="M 200.5,89.5 C 197.671,97.8129 195.171,106.146 193,114.5C 193.383,113.944 193.883,113.611 194.5,113.5C 194.5,114.5 194.5,115.5 194.5,116.5C 193.178,116.33 192.011,116.663 191,117.5C 190.667,115.833 190.333,114.167 190,112.5C 187.305,115.611 185.972,119.277 186,123.5C 185.119,126.014 183.619,128.014 181.5,129.5C 187.107,112.344 193.107,95.344 199.5,78.5C 201.318,76.9219 202.318,77.4219 202.5,80C 201.021,83.007 200.354,86.1737 200.5,89.5 Z"/></g>
<g><path style="opacity:1" fill="#d4cc71" d="M 901.5,56.5 C 906.295,67.8909 908.961,79.8909 909.5,92.5C 908.95,100.107 907.616,107.441 905.5,114.5C 906.692,101.17 906.692,87.8365 905.5,74.5C 903.745,68.5746 902.412,62.5746 901.5,56.5 Z"/></g>
<g><path style="opacity:1" fill="#d3ca76" d="M 41.5,88.5 C 44.5219,88.804 47.5219,89.304 50.5,90C 51.056,90.3826 51.3893,90.8826 51.5,91.5C 47.8379,91.2766 44.5046,90.2766 41.5,88.5 Z"/></g>
<g><path style="opacity:1" fill="#cac06a" d="M 51.5,91.5 C 54.8984,91.1796 58.2317,91.513 61.5,92.5C 62.2427,93.1818 62.9094,93.8485 63.5,94.5C 59.2393,94.1016 55.2393,93.1016 51.5,91.5 Z"/></g>
<g><path style="opacity:1" fill="#eadf75" d="M 1006.5,90.5 C 1012.93,90.8501 1019.26,91.8501 1025.5,93.5C 1028.75,93.2293 1031.92,92.5627 1035,91.5C 1036.89,92.1963 1038.73,93.0296 1040.5,94C 1040.17,94.3333 1039.83,94.6667 1039.5,95C 1042.18,96.8612 1045.18,97.8612 1048.5,98C 1050.24,99.517 1051.91,101.017 1053.5,102.5C 1037.69,98.6308 1022.02,94.6308 1006.5,90.5 Z"/></g>
<g><path style="opacity:1" fill="#e2d770" d="M 448.5,107.5 C 437.444,93.897 423.444,89.897 406.5,95.5C 407.335,94.0568 408.668,93.0568 410.5,92.5C 418.508,91.0013 426.342,91.3346 434,93.5C 437.155,92.7219 440.322,92.5552 443.5,93C 441.715,94.1628 439.715,94.8295 437.5,95C 440.417,97.8905 443.417,98.0572 446.5,95.5C 447.795,96.0983 449.128,96.5983 450.5,97C 448.785,97.7771 447.785,99.1105 447.5,101C 448.077,103.137 448.41,105.304 448.5,107.5 Z"/></g>
<g><path style="opacity:1" fill="#fcef72" d="M 464.5,10.5 C 475.994,18.1662 480.327,28.8328 477.5,42.5C 475.498,45.8381 473.498,49.1714 471.5,52.5C 470.548,54.0453 470.215,55.712 470.5,57.5C 468.801,57.3398 467.134,57.5065 465.5,58C 466.582,59.3297 467.249,60.8297 467.5,62.5C 458.706,71.4064 448.373,78.073 436.5,82.5C 435.957,82.56 435.624,82.8933 435.5,83.5C 439.979,84.5798 444.312,86.0798 448.5,88C 450.81,88.4966 453.143,88.6633 455.5,88.5C 460.224,90.5293 464.224,93.5293 467.5,97.5C 467.439,102.583 469.439,106.583 473.5,109.5C 477.343,117.383 479.01,125.716 478.5,134.5C 479.867,143.63 477.367,150.63 471,155.5C 470.091,158.513 469.258,161.513 468.5,164.5C 464.857,163.881 463.857,161.881 465.5,158.5C 464.528,156.695 463.361,155.028 462,153.5C 461.667,154.833 461.333,156.167 461,157.5C 460.252,155.668 459.252,154.001 458,152.5C 457.977,148.146 458.144,144.146 458.5,140.5C 456.852,134.317 456.018,127.984 456,121.5C 455.583,120.244 454.75,119.577 453.5,119.5C 452.383,115.266 450.716,111.266 448.5,107.5C 448.41,105.304 448.077,103.137 447.5,101C 447.785,99.1105 448.785,97.7771 450.5,97C 449.128,96.5983 447.795,96.0983 446.5,95.5C 443.417,98.0572 440.417,97.8905 437.5,95C 439.715,94.8295 441.715,94.1628 443.5,93C 440.322,92.5552 437.155,92.7219 434,93.5C 426.342,91.3346 418.508,91.0013 410.5,92.5C 408.668,93.0568 407.335,94.0568 406.5,95.5C 403.927,95.8515 401.594,95.3515 399.5,94C 401.447,91.9805 403.78,90.4805 406.5,89.5C 407.451,90.3256 408.451,90.4922 409.5,90C 408.663,88.9887 408.33,87.8221 408.5,86.5C 416.767,80.6889 425.1,74.8556 433.5,69C 439.105,63.9028 444.105,58.4028 448.5,52.5C 450.493,50.7889 452.327,48.7889 454,46.5C 454.919,36.7094 454.253,27.0428 452,17.5C 451.692,18.3081 451.192,18.9747 450.5,19.5C 449.583,18.8728 448.583,18.5394 447.5,18.5C 446.478,14.2131 445.145,10.0464 443.5,6C 444.833,5.83333 446.167,5.66667 447.5,5.5C 452.902,7.93548 458.569,9.60215 464.5,10.5 Z"/></g>
<g><path style="opacity:1" fill="#c7bd6f" d="M 81.5,98.5 C 86.0689,97.886 90.0689,98.886 93.5,101.5C 89.2976,100.868 85.2976,99.8684 81.5,98.5 Z"/></g>
<g><path style="opacity:1" fill="#dbd474" d="M 752.5,85.5 C 752.833,85.5 753.167,85.5 753.5,85.5C 754.939,99.1486 758.606,112.149 764.5,124.5C 763.883,124.611 763.383,124.944 763,125.5C 762.585,123.709 761.585,122.376 760,121.5C 759.802,119.618 759.302,117.952 758.5,116.5C 756.388,109.263 754.554,101.93 753,94.5C 752.502,91.5184 752.335,88.5184 752.5,85.5 Z"/></g>
<g><path style="opacity:1" fill="#e9e07b" d="M 375.5,6.5 C 375.167,40.8398 375.5,75.1731 376.5,109.5C 377.107,109.376 377.44,109.043 377.5,108.5C 386.717,99.6202 397.05,92.2868 408.5,86.5C 408.33,87.8221 408.663,88.9887 409.5,90C 408.451,90.4922 407.451,90.3256 406.5,89.5C 403.78,90.4805 401.447,91.9805 399.5,94C 401.594,95.3515 403.927,95.8515 406.5,95.5C 395.173,100.506 385.173,107.506 376.5,116.5C 375.503,135.659 375.17,154.993 375.5,174.5C 374.503,154.34 374.17,134.007 374.5,113.5C 377.957,113.333 378.29,112.333 375.5,110.5C 374.17,75.669 374.17,41.0024 375.5,6.5 Z"/></g>
<g><path style="opacity:1" fill="#ddd472" d="M 1054.5,102.5 C 1059.99,102.787 1064.99,104.453 1069.5,107.5C 1071.12,106.295 1072.45,106.461 1073.5,108C 1072.59,109.414 1072.59,110.914 1073.5,112.5C 1067.55,108.408 1061.22,105.075 1054.5,102.5 Z"/></g>
<g><path style="opacity:1" fill="#d0c66b" d="M 883.5,83.5 C 884.15,83.8039 884.817,84.1373 885.5,84.5C 886.718,91.7803 887.384,99.1136 887.5,106.5C 887.872,114.277 886.539,121.611 883.5,128.5C 886.114,113.489 886.114,98.489 883.5,83.5 Z"/></g>
<g><path style="opacity:1" fill="#cec96d" d="M 287.5,101.5 C 290.068,106.525 292.068,111.859 293.5,117.5C 289.399,113.099 287.399,107.766 287.5,101.5 Z"/></g>
<g><path style="opacity:1" fill="#c8c06a" d="M 223.5,108.5 C 217.491,108.334 211.491,108.501 205.5,109C 202.061,111.198 198.394,112.698 194.5,113.5C 203.278,106.544 212.945,104.877 223.5,108.5 Z"/></g>
<g><path style="opacity:1" fill="#c8c26b" d="M 225.5,108.5 C 231.659,110.331 237.659,112.331 243.5,114.5C 237.981,114.163 232.648,112.996 227.5,111C 226.619,110.292 225.953,109.458 225.5,108.5 Z"/></g>
<g><path style="opacity:1" fill="#dcd374" d="M 467.5,97.5 C 476.841,107.344 481.174,119.177 480.5,133C 481.063,145.674 477.063,156.508 468.5,165.5C 468.5,165.167 468.5,164.833 468.5,164.5C 469.258,161.513 470.091,158.513 471,155.5C 477.367,150.63 479.867,143.63 478.5,134.5C 479.01,125.716 477.343,117.383 473.5,109.5C 469.439,106.583 467.439,102.583 467.5,97.5 Z"/></g>
<g><path style="opacity:1" fill="#fef172" d="M 223.5,108.5 C 224.167,108.5 224.833,108.5 225.5,108.5C 225.953,109.458 226.619,110.292 227.5,111C 232.648,112.996 237.981,114.163 243.5,114.5C 243.833,114.5 244.167,114.5 244.5,114.5C 244.414,115.496 244.748,116.329 245.5,117C 248.817,117.498 252.15,117.665 255.5,117.5C 255.5,118.833 255.5,120.167 255.5,121.5C 256.5,121.5 257.5,121.5 258.5,121.5C 258.5,123.167 258.5,124.833 258.5,126.5C 258.5,127.167 258.167,127.5 257.5,127.5C 254.813,127.336 252.146,127.503 249.5,128C 246.277,131.327 242.277,133.16 237.5,133.5C 233.446,132.976 229.446,132.143 225.5,131C 225.833,130.667 226.167,130.333 226.5,130C 224.468,127.987 222.134,126.487 219.5,125.5C 214.878,126.385 210.211,126.718 205.5,126.5C 205.167,126.5 204.833,126.5 204.5,126.5C 199.695,125.513 194.695,125.179 189.5,125.5C 189.5,126.5 189.5,127.5 189.5,128.5C 186.671,128.325 185.004,129.658 184.5,132.5C 183.808,131.975 183.308,131.308 183,130.5C 183.813,133.5 183.647,136.5 182.5,139.5C 181.5,139.5 180.5,139.5 179.5,139.5C 179.5,138.5 179.5,137.5 179.5,136.5C 179.767,134.035 180.434,131.701 181.5,129.5C 183.619,128.014 185.119,126.014 186,123.5C 185.972,119.277 187.305,115.611 190,112.5C 190.333,114.167 190.667,115.833 191,117.5C 192.011,116.663 193.178,116.33 194.5,116.5C 194.5,115.5 194.5,114.5 194.5,113.5C 198.394,112.698 202.061,111.198 205.5,109C 211.491,108.501 217.491,108.334 223.5,108.5 Z"/></g>
<g><path style="opacity:1" fill="#ebe072" d="M 262.5,112.5 C 263.784,114.614 265.784,115.614 268.5,115.5C 268.5,117.167 268.5,118.833 268.5,120.5C 267.442,119.4 266.608,118.066 266,116.5C 264.209,120.439 261.709,123.772 258.5,126.5C 258.5,124.833 258.5,123.167 258.5,121.5C 257.5,121.5 256.5,121.5 255.5,121.5C 255.5,120.167 255.5,118.833 255.5,117.5C 252.15,117.665 248.817,117.498 245.5,117C 244.748,116.329 244.414,115.496 244.5,114.5C 250.74,116.016 256.74,115.349 262.5,112.5 Z"/></g>
<g><path style="opacity:1" fill="#f9ed73" d="M 758.5,116.5 C 759.302,117.952 759.802,119.618 760,121.5C 761.585,122.376 762.585,123.709 763,125.5C 763.383,124.944 763.883,124.611 764.5,124.5C 774.139,144.139 788.806,158.806 808.5,168.5C 808.414,169.496 808.748,170.329 809.5,171C 813.965,172.926 818.632,173.76 823.5,173.5C 823.918,174.222 824.584,174.722 825.5,175C 829.833,175.333 834.167,175.667 838.5,176C 838.167,176.333 837.833,176.667 837.5,177C 826.221,178.383 814.888,178.883 803.5,178.5C 775.177,173.175 754.177,157.842 740.5,132.5C 743.179,132.525 744.512,133.858 744.5,136.5C 747.289,134.986 750.289,133.986 753.5,133.5C 753.553,130.86 754.22,128.36 755.5,126C 755.333,125.167 755.167,124.333 755,123.5C 751.651,122.323 750.151,119.99 750.5,116.5C 753.05,116.561 754.55,117.894 755,120.5C 756.067,119.809 757.234,119.309 758.5,119C 757.402,118.23 757.402,117.397 758.5,116.5 Z"/></g>
<g><path style="opacity:1" fill="#ebe279" d="M 3.5,108.5 C 7.94261,124.387 15.2759,138.72 25.5,151.5C 19.8357,152.501 17.5024,150.167 18.5,144.5C 16.8561,144.714 15.3561,144.38 14,143.5C 11.4912,138.46 9.49117,133.127 8,127.5C 7.33333,128.167 6.66667,128.833 6,129.5C 5.60534,127.821 5.772,126.155 6.5,124.5C 5.25395,121.972 4.25395,119.305 3.5,116.5C 2.3341,128.486 2.16744,140.486 3,152.5C 5.5,154.667 8,156.833 10.5,159C 13.0135,160.252 15.6802,160.752 18.5,160.5C 18.3505,159.448 18.5172,158.448 19,157.5C 19.6355,158.966 20.4688,160.3 21.5,161.5C 20.624,162.251 19.624,162.751 18.5,163C 20.0009,164.252 21.6675,165.252 23.5,166C 24.2524,166.671 24.5858,167.504 24.5,168.5C 15.9713,164.741 8.30467,159.741 1.5,153.5C 0.849661,138.129 1.51633,123.129 3.5,108.5 Z"/></g>
<g><path style="opacity:1" fill="#8f884d" d="M 3.5,108.5 C 1.51633,123.129 0.849661,138.129 1.5,153.5C 0.503802,138.342 0.170469,123.009 0.5,107.5C 1.79105,107.263 2.79105,107.596 3.5,108.5 Z"/></g>
<g><path style="opacity:1" fill="#978f4e" d="M 505.5,42.5 C 521.167,42.5 536.833,42.5 552.5,42.5C 552.5,76.1667 552.5,109.833 552.5,143.5C 536.833,143.5 521.167,143.5 505.5,143.5C 505.5,109.833 505.5,76.1667 505.5,42.5 Z M 534.5,124.5 C 529.516,126.326 524.849,128.659 520.5,131.5C 516.266,132.617 512.266,134.284 508.5,136.5C 508.334,132.486 508.501,128.486 509,124.5C 514.642,121.599 520.142,118.599 525.5,115.5C 527.284,115.107 528.95,114.441 530.5,113.5C 534.818,112.008 538.818,110.008 542.5,107.5C 542.833,107.5 543.167,107.5 543.5,107.5C 545.386,106.639 547.22,105.639 549,104.5C 549.828,108.871 549.661,113.205 548.5,117.5C 543.741,119.879 539.075,122.213 534.5,124.5 Z M 548.5,77.5 C 549.794,81.7327 549.794,86.0661 548.5,90.5C 546.181,90.9925 544.181,91.9925 542.5,93.5C 532.858,97.3233 523.524,101.657 514.5,106.5C 512.847,106.66 511.514,107.326 510.5,108.5C 509.206,106.952 508.539,104.952 508.5,102.5C 508.833,100.5 509.167,98.5 509.5,96.5C 511.396,95.7255 513.063,94.7255 514.5,93.5C 521.024,90.7365 527.357,87.7365 533.5,84.5C 533.833,84.5 534.167,84.5 534.5,84.5C 539.167,82.1667 543.833,79.8333 548.5,77.5 Z M 548.5,50.5 C 549.483,54.2984 549.817,58.2984 549.5,62.5C 543.187,64.9899 537.187,67.9899 531.5,71.5C 525.402,73.384 519.735,76.0506 514.5,79.5C 512.742,79.8769 511.075,80.5435 509.5,81.5C 508.34,77.5411 508.173,73.5411 509,69.5C 510.78,68.3606 512.614,67.3606 514.5,66.5C 524.289,62.1058 533.955,57.4391 543.5,52.5C 545.284,52.1075 546.95,51.4408 548.5,50.5 Z M 528.5,44.5 C 524.599,47.4833 519.932,50.15 514.5,52.5C 512.742,52.8769 511.075,53.5435 509.5,54.5C 508.513,51.2317 508.18,47.8984 508.5,44.5C 515.167,44.5 521.833,44.5 528.5,44.5 Z M 549.5,140.5 C 542.646,140.824 535.979,140.491 529.5,139.5C 534.919,137.956 539.919,135.622 544.5,132.5C 544.833,132.5 545.167,132.5 545.5,132.5C 546.583,132.461 547.583,132.127 548.5,131.5C 549.484,134.428 549.817,137.428 549.5,140.5 Z"/></g>
<g><path style="opacity:1" fill="#c9c06d" d="M 525.5,115.5 C 520.142,118.599 514.642,121.599 509,124.5C 508.501,128.486 508.334,132.486 508.5,136.5C 507.513,131.695 507.179,126.695 507.5,121.5C 513.512,119.492 519.512,117.492 525.5,115.5 Z"/></g>
<g><path style="opacity:1" fill="#fbf074" d="M 543.5,107.5 C 543.167,107.5 542.833,107.5 542.5,107.5C 537.605,107.947 533.605,109.947 530.5,113.5C 528.95,114.441 527.284,115.107 525.5,115.5C 519.512,117.492 513.512,119.492 507.5,121.5C 507.5,117.5 507.5,113.5 507.5,109.5C 508.791,109.737 509.791,109.404 510.5,108.5C 511.514,107.326 512.847,106.66 514.5,106.5C 520.563,105.423 526.229,103.256 531.5,100C 534.167,100 536.833,100 539.5,100C 538.328,99.5814 537.328,98.9147 536.5,98C 538.859,96.7575 540.859,95.2575 542.5,93.5C 545.394,93.9577 547.894,93.291 550,91.5C 550.499,95.4862 550.666,99.4862 550.5,103.5C 548.167,103.5 545.833,103.5 543.5,103.5C 543.5,104.833 543.5,106.167 543.5,107.5 Z"/></g>
<g><path style="opacity:1" fill="#b6b15f" d="M 542.5,107.5 C 538.818,110.008 534.818,112.008 530.5,113.5C 533.605,109.947 537.605,107.947 542.5,107.5 Z"/></g>
<g><path style="opacity:1" fill="#ddd475" d="M 542.5,93.5 C 540.859,95.2575 538.859,96.7575 536.5,98C 537.328,98.9147 538.328,99.5814 539.5,100C 536.833,100 534.167,100 531.5,100C 526.229,103.256 520.563,105.423 514.5,106.5C 523.524,101.657 532.858,97.3233 542.5,93.5 Z"/></g>
<g><path style="opacity:1" fill="#c3ba73" d="M 507.5,93.5 C 509.833,93.5 512.167,93.5 514.5,93.5C 513.063,94.7255 511.396,95.7255 509.5,96.5C 509.167,98.5 508.833,100.5 508.5,102.5C 508.539,104.952 509.206,106.952 510.5,108.5C 509.791,109.404 508.791,109.737 507.5,109.5C 507.5,104.167 507.5,98.8333 507.5,93.5 Z"/></g>
<g><path style="opacity:1" fill="#eae17a" d="M 551.5,46.5 C 551.5,74.5 551.5,102.5 551.5,130.5C 551.167,130.5 550.833,130.5 550.5,130.5C 548.219,130.077 546.552,130.744 545.5,132.5C 545.167,132.5 544.833,132.5 544.5,132.5C 544.5,131.5 544.5,130.5 544.5,129.5C 546.5,129.5 548.5,129.5 550.5,129.5C 550.5,128.167 550.5,126.833 550.5,125.5C 549.5,125.5 548.5,125.5 547.5,125.5C 547.48,123.857 548.147,122.524 549.5,121.5C 548.833,121.167 548.167,120.833 547.5,120.5C 543.535,122.91 539.201,124.243 534.5,124.5C 539.075,122.213 543.741,119.879 548.5,117.5C 549.661,113.205 549.828,108.871 549,104.5C 547.22,105.639 545.386,106.639 543.5,107.5C 543.5,106.167 543.5,104.833 543.5,103.5C 545.833,103.5 548.167,103.5 550.5,103.5C 550.666,99.4862 550.499,95.4862 550,91.5C 547.894,93.291 545.394,93.9577 542.5,93.5C 544.181,91.9925 546.181,90.9925 548.5,90.5C 549.805,88.6028 550.471,86.2695 550.5,83.5C 550.167,81.1667 549.833,78.8333 549.5,76.5C 548.893,76.6236 548.56,76.9569 548.5,77.5C 543.833,79.8333 539.167,82.1667 534.5,84.5C 535.167,82.5 535.833,80.5 536.5,78.5C 540.819,79.2008 544.486,78.0341 547.5,75C 546.663,73.9887 546.33,72.8221 546.5,71.5C 548.355,71.728 549.188,71.0613 549,69.5C 546.876,68.7728 544.709,68.1062 542.5,67.5C 540.77,68.0256 539.436,69.0256 538.5,70.5C 536.257,71.4742 533.924,71.8076 531.5,71.5C 537.187,67.9899 543.187,64.9899 549.5,62.5C 550.811,58.3171 550.811,53.9838 549.5,49.5C 548.893,49.6236 548.56,49.9569 548.5,50.5C 546.95,51.4408 545.284,52.1075 543.5,52.5C 543.586,51.5041 543.252,50.6708 542.5,50C 545.963,49.8826 548.963,48.7159 551.5,46.5 Z"/></g>
<g><path style="opacity:1" fill="#f2e773" d="M 531.5,71.5 C 528.467,73.8677 525.134,76.0343 521.5,78C 529.081,80.8242 529.081,82.1575 521.5,82C 520.138,79.5612 518.305,79.0612 516,80.5C 516.617,82.0948 516.284,83.4281 515,84.5C 512.31,83.5411 511.976,84.2078 514,86.5C 514.333,86.1667 514.667,85.8333 515,85.5C 517.796,86.2113 520.63,86.878 523.5,87.5C 524.197,85.6155 525.197,85.2822 526.5,86.5C 528.618,85.0541 530.951,84.3874 533.5,84.5C 527.357,87.7365 521.024,90.7365 514.5,93.5C 512.167,93.5 509.833,93.5 507.5,93.5C 507.674,90.1262 508.174,86.7928 509,83.5C 510.399,82.7734 511.899,82.2734 513.5,82C 514.252,81.3292 514.586,80.4959 514.5,79.5C 519.735,76.0506 525.402,73.384 531.5,71.5 Z"/></g>
<g><path style="opacity:1" fill="#837c2e" d="M 548.5,77.5 C 548.56,76.9569 548.893,76.6236 549.5,76.5C 549.833,78.8333 550.167,81.1667 550.5,83.5C 550.471,86.2695 549.805,88.6028 548.5,90.5C 549.794,86.0661 549.794,81.7327 548.5,77.5 Z"/></g>
<g><path style="opacity:1" fill="#fdf172" d="M 534.5,84.5 C 534.167,84.5 533.833,84.5 533.5,84.5C 530.951,84.3874 528.618,85.0541 526.5,86.5C 525.197,85.2822 524.197,85.6155 523.5,87.5C 520.63,86.878 517.796,86.2113 515,85.5C 514.667,85.8333 514.333,86.1667 514,86.5C 511.976,84.2078 512.31,83.5411 515,84.5C 516.284,83.4281 516.617,82.0948 516,80.5C 518.305,79.0612 520.138,79.5612 521.5,82C 529.081,82.1575 529.081,80.8242 521.5,78C 525.134,76.0343 528.467,73.8677 531.5,71.5C 533.924,71.8076 536.257,71.4742 538.5,70.5C 539.436,69.0256 540.77,68.0256 542.5,67.5C 544.709,68.1062 546.876,68.7728 549,69.5C 549.188,71.0613 548.355,71.728 546.5,71.5C 546.33,72.8221 546.663,73.9887 547.5,75C 544.486,78.0341 540.819,79.2008 536.5,78.5C 535.833,80.5 535.167,82.5 534.5,84.5 Z"/></g>
<g><path style="opacity:1" fill="#f9ed73" d="M 528.5,44.5 C 528.5,44.1667 528.5,43.8333 528.5,43.5C 536.167,43.5 543.833,43.5 551.5,43.5C 551.5,44.5 551.5,45.5 551.5,46.5C 548.963,48.7159 545.963,49.8826 542.5,50C 543.252,50.6708 543.586,51.5041 543.5,52.5C 533.955,57.4391 524.289,62.1058 514.5,66.5C 514.083,65.8761 513.416,65.5427 512.5,65.5C 510.944,66.5471 509.277,67.2137 507.5,67.5C 507.241,63.7604 507.574,60.0938 508.5,56.5C 510.396,55.5344 512.396,55.2011 514.5,55.5C 514.5,54.5 514.5,53.5 514.5,52.5C 519.932,50.15 524.599,47.4833 528.5,44.5 Z"/></g>
<g><path style="opacity:1" fill="#7d7629" d="M 548.5,50.5 C 548.56,49.9569 548.893,49.6236 549.5,49.5C 550.811,53.9838 550.811,58.3171 549.5,62.5C 549.817,58.2984 549.483,54.2984 548.5,50.5 Z"/></g>
<g><path style="opacity:1" fill="#d0c86e" d="M 905.5,115.5 C 902.909,125.983 898.243,135.316 891.5,143.5C 895.041,134.747 898.875,126.08 903,117.5C 903.708,116.619 904.542,115.953 905.5,115.5 Z"/></g>
<g><path style="opacity:1" fill="#b7af61" d="M 962.5,112.5 C 961.883,112.389 961.383,112.056 961,111.5C 960.5,125.496 960.333,139.496 960.5,153.5C 959.883,153.389 959.383,153.056 959,152.5C 958.333,137.833 958.333,123.167 959,108.5C 960,107.167 961,107.167 962,108.5C 962.49,109.793 962.657,111.127 962.5,112.5 Z"/></g>
<g><path style="opacity:1" fill="#c7c26b" d="M 734.5,117.5 C 735.75,117.577 736.583,118.244 737,119.5C 737.822,122.117 738.322,124.784 738.5,127.5C 736.206,124.63 734.872,121.297 734.5,117.5 Z"/></g>
<g><path style="opacity:1" fill="#c0bb62" d="M 204.5,126.5 C 199.308,126.091 194.308,126.758 189.5,128.5C 189.5,127.5 189.5,126.5 189.5,125.5C 194.695,125.179 199.695,125.513 204.5,126.5 Z"/></g>
<g><path style="opacity:1" fill="#faee73" d="M 962.5,112.5 C 966.89,126.613 973.89,139.279 983.5,150.5C 983.543,153.088 984.543,155.254 986.5,157C 984.193,158.828 984.526,160.494 987.5,162C 990.362,162.27 993.028,163.104 995.5,164.5C 993.941,166.131 991.941,166.964 989.5,167C 991.918,169.31 991.252,169.976 987.5,169C 986.241,168.077 984.908,167.243 983.5,166.5C 984.025,165.808 984.692,165.308 985.5,165C 978.892,163.539 972.558,161.372 966.5,158.5C 963.891,157.557 961.891,155.89 960.5,153.5C 960.333,139.496 960.5,125.496 961,111.5C 961.383,112.056 961.883,112.389 962.5,112.5 Z"/></g>
<g><path style="opacity:1" fill="#ccc479" d="M 141.5,109.5 C 142.776,111.562 143.61,113.896 144,116.5C 144.822,124.012 144.655,131.345 143.5,138.5C 143.812,128.752 143.145,119.085 141.5,109.5 Z"/></g>
<g><path style="opacity:1" fill="#cac36c" d="M 268.5,120.5 C 271.173,123.849 272.506,127.849 272.5,132.5C 270.595,128.784 269.261,124.784 268.5,120.5 Z"/></g>
<g><path style="opacity:1" fill="#b3ab61" d="M 738.5,127.5 C 740.256,128.552 740.923,130.219 740.5,132.5C 739.069,131.22 738.402,129.553 738.5,127.5 Z"/></g>
<g><path style="opacity:1" fill="#e2d873" d="M 257.5,127.5 C 256.284,129.451 254.618,130.951 252.5,132C 243.283,136.033 233.95,136.366 224.5,133C 218.021,130.897 211.687,128.73 205.5,126.5C 210.211,126.718 214.878,126.385 219.5,125.5C 222.134,126.487 224.468,127.987 226.5,130C 226.167,130.333 225.833,130.667 225.5,131C 229.446,132.143 233.446,132.976 237.5,133.5C 242.277,133.16 246.277,131.327 249.5,128C 252.146,127.503 254.813,127.336 257.5,127.5 Z"/></g>
<g><path style="opacity:1" fill="#f9ee72" d="M 544.5,132.5 C 539.919,135.622 534.919,137.956 529.5,139.5C 528.5,139.833 527.833,140.5 527.5,141.5C 521.167,141.5 514.833,141.5 508.5,141.5C 508.33,140.178 508.663,139.011 509.5,138C 513.527,136.324 517.194,134.158 520.5,131.5C 524.849,128.659 529.516,126.326 534.5,124.5C 539.201,124.243 543.535,122.91 547.5,120.5C 548.167,120.833 548.833,121.167 549.5,121.5C 548.147,122.524 547.48,123.857 547.5,125.5C 548.5,125.5 549.5,125.5 550.5,125.5C 550.5,126.833 550.5,128.167 550.5,129.5C 548.5,129.5 546.5,129.5 544.5,129.5C 544.5,130.5 544.5,131.5 544.5,132.5 Z"/></g>
<g><path style="opacity:1" fill="#f3ea83" d="M 707.5,19.5 C 707.167,22.8333 706.833,26.1667 706.5,29.5C 705.501,79.3306 705.168,129.331 705.5,179.5C 702.833,179.5 700.167,179.5 697.5,179.5C 694.768,172.305 692.435,164.971 690.5,157.5C 692.074,157.937 693.241,158.937 694,160.5C 695.243,165.79 696.577,171.123 698,176.5C 699.956,176.784 702.123,176.784 704.5,176.5C 704.333,125.832 704.5,75.1656 705,24.5C 705.099,22.3474 705.933,20.6808 707.5,19.5 Z"/></g>
<g><path style="opacity:1" fill="#d4cb6d" d="M 676.5,127.5 C 677.583,127.539 678.583,127.873 679.5,128.5C 682.166,133.164 683.833,138.164 684.5,143.5C 681.326,138.484 678.659,133.151 676.5,127.5 Z"/></g>
<g><path style="opacity:1" fill="#e8dd76" d="M 293.5,118.5 C 298.538,131.273 303.204,144.273 307.5,157.5C 303.84,152.854 301.34,147.521 300,141.5C 298.194,139.048 296.694,139.381 295.5,142.5C 294.914,142.291 294.414,141.957 294,141.5C 293.957,137.434 294.791,134.267 296.5,132C 294.936,127.688 293.936,123.188 293.5,118.5 Z"/></g>
<g><path style="opacity:1" fill="#cac172" d="M 126.5,128.5 C 127.725,129.152 128.392,130.319 128.5,132C 130.085,137.426 129.752,142.593 127.5,147.5C 128.627,141.117 128.294,134.784 126.5,128.5 Z"/></g>
<g><path style="opacity:1" fill="#c6bf6a" d="M 272.5,132.5 C 273.497,132.47 274.164,132.97 274.5,134C 276.624,140.069 278.29,146.236 279.5,152.5C 276.792,146.047 274.459,139.38 272.5,132.5 Z"/></g>
<g><path style="opacity:1" fill="#efe78e" d="M 528.5,43.5 C 528.5,43.8333 528.5,44.1667 528.5,44.5C 521.833,44.5 515.167,44.5 508.5,44.5C 508.18,47.8984 508.513,51.2317 509.5,54.5C 511.075,53.5435 512.742,52.8769 514.5,52.5C 514.5,53.5 514.5,54.5 514.5,55.5C 512.396,55.2011 510.396,55.5344 508.5,56.5C 507.574,60.0938 507.241,63.7604 507.5,67.5C 509.277,67.2137 510.944,66.5471 512.5,65.5C 513.416,65.5427 514.083,65.8761 514.5,66.5C 512.614,67.3606 510.78,68.3606 509,69.5C 508.173,73.5411 508.34,77.5411 509.5,81.5C 511.075,80.5435 512.742,79.8769 514.5,79.5C 514.586,80.4959 514.252,81.3292 513.5,82C 511.899,82.2734 510.399,82.7734 509,83.5C 508.174,86.7928 507.674,90.1262 507.5,93.5C 507.5,98.8333 507.5,104.167 507.5,109.5C 507.5,113.5 507.5,117.5 507.5,121.5C 507.179,126.695 507.513,131.695 508.5,136.5C 512.266,134.284 516.266,132.617 520.5,131.5C 517.194,134.158 513.527,136.324 509.5,138C 508.663,139.011 508.33,140.178 508.5,141.5C 514.833,141.5 521.167,141.5 527.5,141.5C 535.019,141.825 542.352,141.492 549.5,140.5C 550.479,137.375 550.813,134.042 550.5,130.5C 550.833,130.5 551.167,130.5 551.5,130.5C 551.5,134.5 551.5,138.5 551.5,142.5C 536.5,142.5 521.5,142.5 506.5,142.5C 506.5,109.5 506.5,76.5 506.5,43.5C 513.833,43.5 521.167,43.5 528.5,43.5 Z M 549.5,140.5 C 542.646,140.824 535.979,140.491 529.5,139.5C 534.919,137.956 539.919,135.622 544.5,132.5C 544.833,132.5 545.167,132.5 545.5,132.5C 546.583,132.461 547.583,132.127 548.5,131.5C 549.484,134.428 549.817,137.428 549.5,140.5 Z"/></g>
<g><path style="opacity:1" fill="#817b30" d="M 529.5,139.5 C 535.979,140.491 542.646,140.824 549.5,140.5C 542.352,141.492 535.019,141.825 527.5,141.5C 527.833,140.5 528.5,139.833 529.5,139.5 Z"/></g>
<g><path style="opacity:1" fill="#8a803a" d="M 550.5,130.5 C 550.813,134.042 550.479,137.375 549.5,140.5C 549.817,137.428 549.484,134.428 548.5,131.5C 547.583,132.127 546.583,132.461 545.5,132.5C 546.552,130.744 548.219,130.077 550.5,130.5 Z"/></g>
<g><path style="opacity:1" fill="#f5e974" d="M 453.5,119.5 C 454.75,119.577 455.583,120.244 456,121.5C 456.018,127.984 456.852,134.317 458.5,140.5C 458.144,144.146 457.977,148.146 458,152.5C 459.252,154.001 460.252,155.668 461,157.5C 461.333,156.167 461.667,154.833 462,153.5C 463.361,155.028 464.528,156.695 465.5,158.5C 463.857,161.881 464.857,163.881 468.5,164.5C 468.5,164.833 468.5,165.167 468.5,165.5C 462.52,172.661 454.853,176.994 445.5,178.5C 423.833,178.5 402.167,178.5 380.5,178.5C 380.5,177.833 380.5,177.167 380.5,176.5C 393.837,176.667 407.171,176.5 420.5,176C 423.522,175.902 426.189,175.068 428.5,173.5C 445.708,165.561 454.708,151.894 455.5,132.5C 455.017,128.117 454.35,123.784 453.5,119.5 Z"/></g>
<g><path style="opacity:1" fill="#e0d671" d="M 1098.5,106.5 C 1105.85,123.63 1104.69,140.297 1095,156.5C 1091.62,161.377 1087.46,165.377 1082.5,168.5C 1082.63,166.8 1083.29,165.3 1084.5,164C 1083.2,162.061 1083.87,160.894 1086.5,160.5C 1088.17,162.167 1089.17,161.833 1089.5,159.5C 1088.24,157.321 1086.74,155.321 1085,153.5C 1084.51,154.793 1084.34,156.127 1084.5,157.5C 1083.5,157.5 1082.5,157.5 1081.5,157.5C 1088.36,144.99 1088.03,132.657 1080.5,120.5C 1082.22,121.278 1083.89,121.611 1085.5,121.5C 1084.15,122.675 1084.31,123.675 1086,124.5C 1087.42,132.341 1088.59,140.175 1089.5,148C 1089.04,148.414 1088.71,148.914 1088.5,149.5C 1089.85,150.524 1090.52,151.857 1090.5,153.5C 1092.48,153.617 1094.15,152.95 1095.5,151.5C 1096.7,148.012 1098.2,144.678 1100,141.5C 1100.97,129.742 1100.47,118.075 1098.5,106.5 Z"/></g>
<g><path style="opacity:1" fill="#fcf072" d="M 25.5,151.5 C 28.859,154.529 32.1924,157.529 35.5,160.5C 35.6567,161.873 35.49,163.207 35,164.5C 34.1072,163.289 33.2739,163.289 32.5,164.5C 34.8156,167.427 36.3156,167.093 37,163.5C 38.2051,164.071 39.3717,164.738 40.5,165.5C 39.5,166.833 38.5,168.167 37.5,169.5C 39.6241,170.149 41.6241,170.983 43.5,172C 40.5184,172.498 37.5184,172.665 34.5,172.5C 30.8632,171.737 27.5299,170.403 24.5,168.5C 24.5858,167.504 24.2524,166.671 23.5,166C 21.6675,165.252 20.0009,164.252 18.5,163C 19.624,162.751 20.624,162.251 21.5,161.5C 20.4688,160.3 19.6355,158.966 19,157.5C 18.5172,158.448 18.3505,159.448 18.5,160.5C 15.6802,160.752 13.0135,160.252 10.5,159C 8,156.833 5.5,154.667 3,152.5C 2.16744,140.486 2.3341,128.486 3.5,116.5C 4.25395,119.305 5.25395,121.972 6.5,124.5C 5.772,126.155 5.60534,127.821 6,129.5C 6.66667,128.833 7.33333,128.167 8,127.5C 9.49117,133.127 11.4912,138.46 14,143.5C 15.3561,144.38 16.8561,144.714 18.5,144.5C 17.5024,150.167 19.8357,152.501 25.5,151.5 Z"/></g>
<g><path style="opacity:1" fill="#e4d974" d="M 189.5,128.5 C 182.683,138.45 179.183,149.45 179,161.5C 180.274,165.154 181.44,168.82 182.5,172.5C 181.18,171.058 179.514,170.392 177.5,170.5C 177.617,168.516 176.95,166.85 175.5,165.5C 176.527,162.946 175.694,160.946 173,159.5C 172.086,164.338 169.92,168.338 166.5,171.5C 170.659,159.681 174.992,148.014 179.5,136.5C 179.5,137.5 179.5,138.5 179.5,139.5C 180.5,139.5 181.5,139.5 182.5,139.5C 183.647,136.5 183.813,133.5 183,130.5C 183.308,131.308 183.808,131.975 184.5,132.5C 185.004,129.658 186.671,128.325 189.5,128.5 Z"/></g>
<g><path style="opacity:1" fill="#f3e782" d="M 555.5,150.5 C 538.167,150.5 520.833,150.5 503.5,150.5C 502.539,148.735 502.205,146.735 502.5,144.5C 520.17,144.333 537.836,144.5 555.5,145C 556.752,146.828 556.752,148.661 555.5,150.5 Z"/></g>
<g><path style="opacity:1" fill="#fdf172" d="M 504.5,145.5 C 521.167,145.5 537.833,145.5 554.5,145.5C 554.5,146.833 554.5,148.167 554.5,149.5C 537.833,149.5 521.167,149.5 504.5,149.5C 504.5,148.167 504.5,146.833 504.5,145.5 Z"/></g>
<g><path style="opacity:1" fill="#4c4409" d="M 503.5,150.5 C 520.833,150.5 538.167,150.5 555.5,150.5C 555.158,151.338 554.492,151.672 553.5,151.5C 537.325,151.17 521.325,151.504 505.5,152.5C 505.5,153.833 505.5,155.167 505.5,156.5C 505.5,156.833 505.5,157.167 505.5,157.5C 504.732,155.285 504.065,152.952 503.5,150.5 Z"/></g>
<g><path style="opacity:1" fill="#837b36" d="M 505.5,152.5 C 521.325,151.504 537.325,151.17 553.5,151.5C 554.116,152.798 554.116,153.798 553.5,154.5C 553.167,154.5 552.833,154.5 552.5,154.5C 537.202,152.516 521.536,151.849 505.5,152.5 Z"/></g>
<g><path style="opacity:1" fill="#fbf07d" d="M 505.5,152.5 C 521.536,151.849 537.202,152.516 552.5,154.5C 537.202,156.484 521.536,157.151 505.5,156.5C 505.5,155.167 505.5,153.833 505.5,152.5 Z"/></g>
<g><path style="opacity:1" fill="#f5ed9e" d="M 552.5,154.5 C 552.833,154.5 553.167,154.5 553.5,154.5C 553.5,155.5 553.5,156.5 553.5,157.5C 537.5,157.5 521.5,157.5 505.5,157.5C 505.5,157.167 505.5,156.833 505.5,156.5C 521.536,157.151 537.202,156.484 552.5,154.5 Z"/></g>
<g><path style="opacity:1" fill="#ece279" d="M 553.5,161.5 C 553.167,161.5 552.833,161.5 552.5,161.5C 537.536,159.516 522.203,158.849 506.5,159.5C 506.659,163.992 508.159,167.992 511,171.5C 512.171,169.384 513.671,168.718 515.5,169.5C 512.119,171.923 511.786,174.589 514.5,177.5C 507.811,173.131 504.478,166.797 504.5,158.5C 520.833,158.5 537.167,158.5 553.5,158.5C 553.5,159.5 553.5,160.5 553.5,161.5 Z"/></g>
<g><path style="opacity:1" fill="#fdf172" d="M 552.5,161.5 C 550.047,165.085 548.714,169.085 548.5,173.5C 547.833,174.833 546.833,175.833 545.5,176.5C 542.927,176.148 540.594,176.648 538.5,178C 539.167,178.333 539.833,178.667 540.5,179C 531.577,182.343 522.91,181.843 514.5,177.5C 511.786,174.589 512.119,171.923 515.5,169.5C 513.671,168.718 512.171,169.384 511,171.5C 508.159,167.992 506.659,163.992 506.5,159.5C 522.203,158.849 537.536,159.516 552.5,161.5 Z"/></g>
<g><path style="opacity:1" fill="#d2c86f" d="M 552.5,161.5 C 552.833,161.5 553.167,161.5 553.5,161.5C 553.373,166.232 551.707,170.232 548.5,173.5C 548.714,169.085 550.047,165.085 552.5,161.5 Z"/></g>
<g><path style="opacity:1" fill="#ece274" d="M 983.5,150.5 C 989.607,157.274 996.607,162.94 1004.5,167.5C 1000.28,167.505 996.951,168.671 994.5,171C 998.326,172.623 1001.99,174.457 1005.5,176.5C 991.027,173.426 978.027,167.426 966.5,158.5C 972.558,161.372 978.892,163.539 985.5,165C 984.692,165.308 984.025,165.808 983.5,166.5C 984.908,167.243 986.241,168.077 987.5,169C 991.252,169.976 991.918,169.31 989.5,167C 991.941,166.964 993.941,166.131 995.5,164.5C 993.028,163.104 990.362,162.27 987.5,162C 984.526,160.494 984.193,158.828 986.5,157C 984.543,155.254 983.543,153.088 983.5,150.5 Z"/></g>
<g><path style="opacity:1" fill="#f7eb74" d="M 1082.5,168.5 C 1081.17,169.167 1079.83,169.833 1078.5,170.5C 1077.29,169.766 1075.96,169.433 1074.5,169.5C 1074.5,167.833 1074.5,166.167 1074.5,164.5C 1076.5,161.833 1078.83,159.5 1081.5,157.5C 1082.5,157.5 1083.5,157.5 1084.5,157.5C 1084.34,156.127 1084.51,154.793 1085,153.5C 1086.74,155.321 1088.24,157.321 1089.5,159.5C 1089.17,161.833 1088.17,162.167 1086.5,160.5C 1083.87,160.894 1083.2,162.061 1084.5,164C 1083.29,165.3 1082.63,166.8 1082.5,168.5 Z"/></g>
<g><path style="opacity:1" fill="#fdf172" d="M 182.5,172.5 C 182.722,174.607 183.722,176.274 185.5,177.5C 178.532,178.497 171.532,178.83 164.5,178.5C 164.878,176.079 165.545,173.746 166.5,171.5C 169.92,168.338 172.086,164.338 173,159.5C 175.694,160.946 176.527,162.946 175.5,165.5C 176.95,166.85 177.617,168.516 177.5,170.5C 179.514,170.392 181.18,171.058 182.5,172.5 Z"/></g>
<g><path style="opacity:1" fill="#f9ee73" d="M 588.5,166.5 C 589.744,169.982 591.744,172.982 594.5,175.5C 594.577,176.75 595.244,177.583 596.5,178C 591.105,177.913 585.605,178.08 580,178.5C 576.833,178.333 573.667,178.167 570.5,178C 572.544,177.502 573.878,176.335 574.5,174.5C 575.833,174.5 577.167,174.5 578.5,174.5C 579.537,169.062 581.203,163.729 583.5,158.5C 585.369,161.217 587.035,163.883 588.5,166.5 Z"/></g>
<g><path style="opacity:1" fill="#ede273" d="M 35.5,160.5 C 45.4293,167.63 56.4293,172.296 68.5,174.5C 69.7489,176.136 71.4156,177.303 73.5,178C 67.8431,178.499 62.1764,178.666 56.5,178.5C 48.7206,177.724 41.3873,175.724 34.5,172.5C 37.5184,172.665 40.5184,172.498 43.5,172C 41.6241,170.983 39.6241,170.149 37.5,169.5C 38.5,168.167 39.5,166.833 40.5,165.5C 39.3717,164.738 38.2051,164.071 37,163.5C 36.3156,167.093 34.8156,167.427 32.5,164.5C 33.2739,163.289 34.1072,163.289 35,164.5C 35.49,163.207 35.6567,161.873 35.5,160.5 Z"/></g>
<g><path style="opacity:1" fill="#c2b965" d="M 1005.5,167.5 C 1014.72,172.202 1024.38,174.869 1034.5,175.5C 1031.5,175.5 1028.5,175.5 1025.5,175.5C 1020.04,174.802 1014.71,173.469 1009.5,171.5C 1007.46,170.789 1006.12,169.456 1005.5,167.5 Z"/></g>
<g><path style="opacity:1" fill="#f9ee73" d="M 104.5,170.5 C 108.953,168.439 113.287,166.106 117.5,163.5C 118.675,163.719 119.675,163.386 120.5,162.5C 121.902,158.634 124.569,157.134 128.5,158C 129.815,159.395 129.481,160.395 127.5,161C 127.957,161.414 128.291,161.914 128.5,162.5C 127.052,163.354 125.719,164.354 124.5,165.5C 123.808,164.975 123.308,164.308 123,163.5C 121.887,164.76 121.72,165.927 122.5,167C 120.564,167.813 118.564,168.313 116.5,168.5C 116.5,169.5 116.5,170.5 116.5,171.5C 110.319,172.839 104.319,174.672 98.5,177C 94.1667,177.667 89.8333,177.667 85.5,177C 91.6637,176.068 97.6637,174.568 103.5,172.5C 103.863,171.817 104.196,171.15 104.5,170.5 Z"/></g>
<g><path style="opacity:1" fill="#c7c165" d="M 808.5,168.5 C 815.081,171.037 821.747,172.704 828.5,173.5C 826.833,173.5 825.167,173.5 823.5,173.5C 818.632,173.76 813.965,172.926 809.5,171C 808.748,170.329 808.414,169.496 808.5,168.5 Z"/></g>
<g><path style="opacity:1" fill="#dcd372" d="M 1074.5,164.5 C 1074.5,166.167 1074.5,167.833 1074.5,169.5C 1075.96,169.433 1077.29,169.766 1078.5,170.5C 1073.9,173.262 1068.9,175.262 1063.5,176.5C 1063.51,174.692 1063.01,173.025 1062,171.5C 1060.64,172.38 1059.14,172.714 1057.5,172.5C 1060.68,170.991 1064.01,169.658 1067.5,168.5C 1069.66,166.917 1072,165.584 1074.5,164.5 Z"/></g>
<g><path style="opacity:1" fill="#fdf172" d="M 1067.5,168.5 C 1069.26,168.643 1070.93,168.309 1072.5,167.5C 1073.43,168.689 1073.76,170.022 1073.5,171.5C 1070.57,172.578 1067.57,173.078 1064.5,173C 1064.17,172.667 1063.83,172.333 1063.5,172C 1065.91,171.943 1067.24,170.776 1067.5,168.5 Z"/></g>
<g><path style="opacity:1" fill="#e0d673" d="M 883.5,128.5 C 883.196,131.522 882.696,134.522 882,137.5C 878.752,141.4 877.918,145.734 879.5,150.5C 878.127,150.343 876.793,150.51 875.5,151C 868.529,155.785 869.529,157.952 878.5,157.5C 861.911,172.612 842.244,180.279 819.5,180.5C 813.923,180.632 808.59,179.965 803.5,178.5C 814.888,178.883 826.221,178.383 837.5,177C 837.833,176.667 838.167,176.333 838.5,176C 834.167,175.667 829.833,175.333 825.5,175C 824.584,174.722 823.918,174.222 823.5,173.5C 825.167,173.5 826.833,173.5 828.5,173.5C 848.947,173.529 864.447,164.862 875,147.5C 878.432,141.313 881.266,134.979 883.5,128.5 Z"/></g>
<g><path style="opacity:1" fill="#fcf271" d="M 1004.5,167.5 C 1004.83,167.5 1005.17,167.5 1005.5,167.5C 1006.12,169.456 1007.46,170.789 1009.5,171.5C 1014.71,173.469 1020.04,174.802 1025.5,175.5C 1025.61,176.117 1025.94,176.617 1026.5,177C 1019.5,177.333 1012.5,177.167 1005.5,176.5C 1001.99,174.457 998.326,172.623 994.5,171C 996.951,168.671 1000.28,167.505 1004.5,167.5 Z"/></g>
<g><path style="opacity:1" fill="#aba361" d="M 376.5,116.5 C 376.5,136.167 376.5,155.833 376.5,175.5C 393.901,175.986 411.234,175.32 428.5,173.5C 426.189,175.068 423.522,175.902 420.5,176C 407.171,176.5 393.837,176.667 380.5,176.5C 378.219,176.923 376.552,176.256 375.5,174.5C 375.17,154.993 375.503,135.659 376.5,116.5 Z"/></g>
<g><path style="opacity:1" fill="#ddd271" d="M 127.5,148.5 C 126.943,150.949 126.943,153.282 127.5,155.5C 128.833,156.167 130.167,156.833 131.5,157.5C 132.386,156.675 132.719,155.675 132.5,154.5C 133.833,154.5 135.167,154.5 136.5,154.5C 136.5,153.167 136.5,151.833 136.5,150.5C 137.5,150.5 138.5,150.5 139.5,150.5C 133.896,161.598 125.23,169.432 113.5,174C 94.7794,180.686 75.7794,182.186 56.5,178.5C 62.1764,178.666 67.8431,178.499 73.5,178C 71.4156,177.303 69.7489,176.136 68.5,174.5C 80.7351,175.585 92.7351,174.252 104.5,170.5C 104.196,171.15 103.863,171.817 103.5,172.5C 97.6637,174.568 91.6637,176.068 85.5,177C 89.8333,177.667 94.1667,177.667 98.5,177C 104.319,174.672 110.319,172.839 116.5,171.5C 116.5,170.5 116.5,169.5 116.5,168.5C 118.564,168.313 120.564,167.813 122.5,167C 121.72,165.927 121.887,164.76 123,163.5C 123.308,164.308 123.808,164.975 124.5,165.5C 125.719,164.354 127.052,163.354 128.5,162.5C 128.291,161.914 127.957,161.414 127.5,161C 129.481,160.395 129.815,159.395 128.5,158C 124.569,157.134 121.902,158.634 120.5,162.5C 119.675,163.386 118.675,163.719 117.5,163.5C 121.682,159 125.015,154 127.5,148.5 Z"/></g>
<g><path style="opacity:1" fill="#e2d873" d="M 1063.5,176.5 C 1044.08,181.797 1024.75,181.797 1005.5,176.5C 1012.5,177.167 1019.5,177.333 1026.5,177C 1025.94,176.617 1025.61,176.117 1025.5,175.5C 1028.5,175.5 1031.5,175.5 1034.5,175.5C 1042.2,174.719 1049.86,173.719 1057.5,172.5C 1059.14,172.714 1060.64,172.38 1062,171.5C 1063.01,173.025 1063.51,174.692 1063.5,176.5 Z"/></g>
<g><path style="opacity:1" fill="#e8df83" d="M 166.5,171.5 C 165.545,173.746 164.878,176.079 164.5,178.5C 171.532,178.83 178.532,178.497 185.5,177.5C 183.722,176.274 182.722,174.607 182.5,172.5C 186.466,176.262 191.132,178.262 196.5,178.5C 182.339,179.661 168.006,179.827 153.5,179C 154.056,178.617 154.389,178.117 154.5,177.5C 159.314,177.093 163.314,175.093 166.5,171.5 Z"/></g>
<g><path style="opacity:1" fill="#ede380" d="M 279.5,152.5 C 280.496,152.414 281.329,152.748 282,153.5C 282.202,155.256 282.702,156.922 283.5,158.5C 285.481,159.105 285.815,160.105 284.5,161.5C 285.948,163.956 286.614,166.622 286.5,169.5C 286.238,172.904 285.238,175.904 283.5,178.5C 294.005,178.531 304.339,177.865 314.5,176.5C 312.666,174.502 311.666,172.168 311.5,169.5C 315.45,174.626 320.45,177.96 326.5,179.5C 309.163,179.667 291.83,179.5 274.5,179C 275.056,178.617 275.389,178.117 275.5,177.5C 280.59,177.734 283.59,175.401 284.5,170.5C 283.23,164.361 281.563,158.361 279.5,152.5 Z"/></g>
<g><path style="opacity:1" fill="#f2e684" d="M 346.5,171.5 C 345.809,174.365 344.142,176.532 341.5,178C 354.496,178.5 367.496,178.667 380.5,178.5C 402.167,178.5 423.833,178.5 445.5,178.5C 443.735,179.461 441.735,179.795 439.5,179.5C 404.832,179.667 370.165,179.5 335.5,179C 336.056,178.617 336.389,178.117 336.5,177.5C 340.605,176.717 343.939,174.717 346.5,171.5 Z"/></g>
<g><path style="opacity:1" fill="#eee586" d="M 574.5,174.5 C 573.878,176.335 572.544,177.502 570.5,178C 573.667,178.167 576.833,178.333 580,178.5C 585.605,178.08 591.105,177.913 596.5,178C 595.244,177.583 594.577,176.75 594.5,175.5C 596.993,176.774 599.659,177.44 602.5,177.5C 596.705,178.83 590.538,179.496 584,179.5C 577.462,179.496 571.295,178.83 565.5,177.5C 568.715,177.095 571.715,176.095 574.5,174.5 Z"/></g>
<g><path style="opacity:1" fill="#7f7731" d="M 154.5,177.5 C 154.389,178.117 154.056,178.617 153.5,179C 168.006,179.827 182.339,179.661 196.5,178.5C 197.043,178.56 197.376,178.893 197.5,179.5C 182.515,180.499 167.515,180.833 152.5,180.5C 152.285,178.821 152.952,177.821 154.5,177.5 Z"/></g>
<g><path style="opacity:1" fill="#817834" d="M 275.5,177.5 C 275.389,178.117 275.056,178.617 274.5,179C 291.83,179.5 309.163,179.667 326.5,179.5C 309.008,180.497 291.341,180.83 273.5,180.5C 273.285,178.821 273.952,177.821 275.5,177.5 Z"/></g>
<g><path style="opacity:1" fill="#827833" d="M 336.5,177.5 C 336.389,178.117 336.056,178.617 335.5,179C 370.165,179.5 404.832,179.667 439.5,179.5C 404.669,180.664 369.669,180.831 334.5,180C 333.588,178.375 334.255,177.541 336.5,177.5 Z"/></g>
<g><path style="opacity:1" fill="#7f7734" d="M 565.5,177.5 C 571.295,178.83 577.462,179.496 584,179.5C 590.538,179.496 596.705,178.83 602.5,177.5C 603.404,178.209 603.737,179.209 603.5,180.5C 590.5,180.5 577.5,180.5 564.5,180.5C 564.263,179.209 564.596,178.209 565.5,177.5 Z"/></g>
<g><path style="opacity:1" fill="#cdc46c" d="M 545.5,176.5 C 545.047,177.458 544.381,178.292 543.5,179C 539.843,180.822 536.176,182.322 532.5,183.5C 530.167,183.5 527.833,183.5 525.5,183.5C 522.571,182.462 519.571,181.296 516.5,180C 515.619,179.292 514.953,178.458 514.5,177.5C 522.91,181.843 531.577,182.343 540.5,179C 539.833,178.667 539.167,178.333 538.5,178C 540.594,176.648 542.927,176.148 545.5,176.5 Z"/></g>
</svg>
`
];

// src/app/icons/icon-subset.ts
var iconSubset = {
  cibCcAmex,
  cibCcApplePay,
  cibCcMastercard,
  cibCcPaypal,
  cibCcStripe,
  cibCcVisa,
  cibFacebook,
  cibGoogle,
  cibLinkedin,
  cibSkype,
  cibTwitter,
  cifBr,
  cifEs,
  cifFr,
  cifIn,
  cifPl,
  cifUs,
  cilAccountLogout,
  cilAlignCenter,
  cilAlignLeft,
  cilAlignRight,
  cilApplicationsSettings,
  cilArrowBottom,
  cilArrowRight,
  cilArrowTop,
  cilBasket,
  cilBell,
  cilBold,
  cilBookmark,
  cilCalculator,
  cilCalendar,
  cilChart,
  cilChartPie,
  cilCheck,
  cilChevronLeft,
  cilChevronRight,
  cilCloudDownload,
  cilCode,
  cilCommentSquare,
  cilContrast,
  cilCreditCard,
  cilCursor,
  cilDescription,
  cilDollar,
  cilDrop,
  cilEnvelopeClosed,
  cilEnvelopeOpen,
  cilFile,
  cilGrid,
  cilHome,
  cilInbox,
  cilIndentDecrease,
  cilIndentIncrease,
  cilItalic,
  cilJustifyCenter,
  cilLanguage,
  cilLayers,
  cilList,
  cilListNumbered,
  cilLocationPin,
  cilLockLocked,
  cilMagnifyingGlass,
  cilMap,
  cilMediaPlay,
  cilMediaRecord,
  cilMenu,
  cilMoon,
  cilNotes,
  cilOptions,
  cilPaperclip,
  cilPaperPlane,
  cilPen,
  cilPencil,
  cilPeople,
  cilPrint,
  cilPuzzle,
  cilReportSlash,
  cilSave,
  cilSettings,
  cilShare,
  cilShareAll,
  cilShareBoxed,
  cilSpeech,
  cilSpeedometer,
  cilCut,
  cilSpreadsheet,
  cilStar,
  cilSun,
  cilTags,
  cilTask,
  cilTrash,
  cilUnderline,
  cilUser,
  cilUserFemale,
  cilUserFollow,
  cilUserUnfollow,
  logo,
  signet,
  cilFax,
  cilFilter
};
var IconSubset;
(function(IconSubset2) {
  IconSubset2["cibCcAmex"] = "cibCcAmex";
  IconSubset2["cibCcApplePay"] = "cibCcApplePay";
  IconSubset2["cibCcMastercard"] = "cibCcMastercard";
  IconSubset2["cibCcPaypal"] = "cibCcPaypal";
  IconSubset2["cibCcStripe"] = "cibCcStripe";
  IconSubset2["cibCcVisa"] = "cibCcVisa";
  IconSubset2["cibFacebook"] = "cibFacebook";
  IconSubset2["cibGoogle"] = "cibGoogle";
  IconSubset2["cibLinkedin"] = "cibLinkedin";
  IconSubset2["cibSkype"] = "cibSkype";
  IconSubset2["cibTwitter"] = "cibTwitter";
  IconSubset2["cifBr"] = "cifBr";
  IconSubset2["cifEs"] = "cifEs";
  IconSubset2["cifFr"] = "cifFr";
  IconSubset2["cifIn"] = "cifIn";
  IconSubset2["cifPl"] = "cifPl";
  IconSubset2["cifUs"] = "cifUs";
  IconSubset2["cilAccountLogout"] = "cilAccountLogout";
  IconSubset2["cilAlignCenter"] = "cilAlignCenter";
  IconSubset2["cilAlignLeft"] = "cilAlignLeft";
  IconSubset2["cilAlignRight"] = "cilAlignRight";
  IconSubset2["cilApplicationsSettings"] = "cilApplicationsSettings";
  IconSubset2["cilArrowBottom"] = "cilArrowBottom";
  IconSubset2["cilArrowRight"] = "cilArrowRight";
  IconSubset2["cilArrowTop"] = "cilArrowTop";
  IconSubset2["cilBasket"] = "cilBasket";
  IconSubset2["cilBell"] = "cilBell";
  IconSubset2["cilBold"] = "cilBold";
  IconSubset2["cilBookmark"] = "cilBookmark";
  IconSubset2["cilCalculator"] = "cilCalculator";
  IconSubset2["cilCalendar"] = "cilCalendar";
  IconSubset2["cilChart"] = "cilChart";
  IconSubset2["cilChartPie"] = "cilChartPie";
  IconSubset2["cilCheck"] = "cilCheck";
  IconSubset2["cilChevronLeft"] = "cilChevronLeft";
  IconSubset2["cilChevronRight"] = "cilChevronRight";
  IconSubset2["cilCloudDownload"] = "cilCloudDownload";
  IconSubset2["cilCode"] = "cilCode";
  IconSubset2["cilCommentSquare"] = "cilCommentSquare";
  IconSubset2["cilContrast"] = "cilContrast\u015B";
  IconSubset2["cilCreditCard"] = "cilCreditCard";
  IconSubset2["cilCursor"] = "cilCursor";
  IconSubset2["cilDescription"] = "cilDescription";
  IconSubset2["cilDollar"] = "cilDollar";
  IconSubset2["cilDrop"] = "cilDrop";
  IconSubset2["cilEnvelopeClosed"] = "cilEnvelopeClosed";
  IconSubset2["cilEnvelopeOpen"] = "cilEnvelopeOpen";
  IconSubset2["cilFile"] = "cilFile";
  IconSubset2["cilGrid"] = "cilGrid";
  IconSubset2["cilHome"] = "cilHome";
  IconSubset2["cilInbox"] = "cilInbox";
  IconSubset2["cilIndentDecrease"] = "cilIndentDecrease";
  IconSubset2["cilIndentIncrease"] = "cilIndentIncrease";
  IconSubset2["cilItalic"] = "cilItalic";
  IconSubset2["cilJustifyCenter"] = "cilJustifyCenter";
  IconSubset2["cilLanguage"] = "cilLanguage";
  IconSubset2["cilLayers"] = "cilLayers";
  IconSubset2["cilList"] = "cilList";
  IconSubset2["cilListNumbered"] = "cilListNumbered";
  IconSubset2["cilLocationPin"] = "cilLocationPin";
  IconSubset2["cilLockLocked"] = "cilLockLocked";
  IconSubset2["cilMagnifyingGlass"] = "cilMagnifyingGlass";
  IconSubset2["cilMap"] = "cilMap";
  IconSubset2["cilMediaPlay"] = "cilMediaPlay";
  IconSubset2["cilMediaRecord"] = "cilMediaRecord";
  IconSubset2["cilMenu"] = "cilMenu";
  IconSubset2["cilMoon"] = "cilMoon";
  IconSubset2["cilNotes"] = "cilNotes";
  IconSubset2["cilOptions"] = "cilOptions";
  IconSubset2["cilPaperclip"] = "cilPaperclip";
  IconSubset2["cilPaperPlane"] = "cilPaperPlane";
  IconSubset2["cilPen"] = "cilPen";
  IconSubset2["cilPencil"] = "cilPencil";
  IconSubset2["cilPeople"] = "cilPeople";
  IconSubset2["cilPrint"] = "cilPrint";
  IconSubset2["cilPuzzle"] = "cilPuzzle";
  IconSubset2["cilReportSlash"] = "cilReportSlash";
  IconSubset2["cilSave"] = "cilSave";
  IconSubset2["cilSettings"] = "cilSettings";
  IconSubset2["cilShare"] = "cilShare";
  IconSubset2["cilShareAll"] = "cilShareAll";
  IconSubset2["cilShareBoxed"] = "cilShareBoxed";
  IconSubset2["cilSpeech"] = "cilSpeech";
  IconSubset2["cilSpeedometer"] = "cilSpeedometer";
  IconSubset2["cilCut"] = "cilCut";
  IconSubset2["cilSpreadsheet"] = "cilSpreadsheet";
  IconSubset2["cilStar"] = "cilStar";
  IconSubset2["cilSun"] = "cilSun";
  IconSubset2["cilTags"] = "cilTags";
  IconSubset2["cilTask"] = "cilTask";
  IconSubset2["cilTrash"] = "cilTrash";
  IconSubset2["cilUnderline"] = "cilUnderline";
  IconSubset2["cilUser"] = "cilUser";
  IconSubset2["cilUserFemale"] = "cilUserFemale";
  IconSubset2["cilUserFollow"] = "cilUserFollow";
  IconSubset2["cilUserUnfollow"] = "cilUserUnfollow";
  IconSubset2["logo"] = "logo";
  IconSubset2["signet"] = "signet";
  IconSubset2["cilFax"] = "cilFax";
  IconSubset2["cilFilter"] = "cilFilter";
})(IconSubset || (IconSubset = {}));

// src/environments/environment.ts
var environment = {
  production: false,
  apiUrl: "https://staging.example.com/api"
};

// src/app/app.component.ts
var _destroyRef, _activatedRoute, _router, _titleService, _colorModeService, _iconSetService;
var _AppComponent = class _AppComponent {
  constructor() {
    __privateAdd(this, _destroyRef);
    __privateAdd(this, _activatedRoute);
    __privateAdd(this, _router);
    __privateAdd(this, _titleService);
    __privateAdd(this, _colorModeService);
    __privateAdd(this, _iconSetService);
    this.title = "Sabino\xB4s App";
    __privateSet(this, _destroyRef, inject(DestroyRef));
    __privateSet(this, _activatedRoute, inject(ActivatedRoute));
    __privateSet(this, _router, inject(Router));
    __privateSet(this, _titleService, inject(Title));
    __privateSet(this, _colorModeService, inject(ColorModeService));
    __privateSet(this, _iconSetService, inject(IconSetService));
    __privateGet(this, _titleService).setTitle(this.title);
    __privateGet(this, _iconSetService).icons = __spreadValues({}, iconSubset);
    __privateGet(this, _colorModeService).localStorageItemName.set("coreui-free-angular-admin-template-theme-default");
    __privateGet(this, _colorModeService).eventName.set("ColorSchemeChange");
    console.log(environment);
  }
  ngOnInit() {
    __privateGet(this, _router).events.pipe(takeUntilDestroyed(__privateGet(this, _destroyRef))).subscribe((evt) => {
      if (!(evt instanceof NavigationEnd)) {
        return;
      }
    });
    __privateGet(this, _activatedRoute).queryParams.pipe(delay(1), map((params) => params["theme"]?.match(/^[A-Za-z0-9\s]+/)?.[0]), filter((theme) => ["dark", "light", "auto"].includes(theme)), tap((theme) => {
      __privateGet(this, _colorModeService).colorMode.set(theme);
    }), takeUntilDestroyed(__privateGet(this, _destroyRef))).subscribe();
  }
};
_destroyRef = new WeakMap();
_activatedRoute = new WeakMap();
_router = new WeakMap();
_titleService = new WeakMap();
_colorModeService = new WeakMap();
_iconSetService = new WeakMap();
_AppComponent.\u0275fac = function AppComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _AppComponent)();
};
_AppComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AppComponent, selectors: [["app-root"]], standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 1, vars: 0, template: function AppComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "router-outlet");
  }
}, dependencies: [RouterOutlet], encapsulation: 2 });
var AppComponent = _AppComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AppComponent, { className: "AppComponent", filePath: "src\\app\\app.component.ts", lineNumber: 23 });
})();

// node_modules/@angular/animations/fesm2022/browser.mjs
var LINE_START = "\n - ";
function invalidTimingValue(exp) {
  return new RuntimeError(3e3, ngDevMode && `The provided timing value "${exp}" is invalid.`);
}
function negativeStepValue() {
  return new RuntimeError(3100, ngDevMode && "Duration values below 0 are not allowed for this animation step.");
}
function negativeDelayValue() {
  return new RuntimeError(3101, ngDevMode && "Delay values below 0 are not allowed for this animation step.");
}
function invalidStyleParams(varName) {
  return new RuntimeError(3001, ngDevMode && `Unable to resolve the local animation param ${varName} in the given list of values`);
}
function invalidParamValue(varName) {
  return new RuntimeError(3003, ngDevMode && `Please provide a value for the animation param ${varName}`);
}
function invalidNodeType(nodeType) {
  return new RuntimeError(3004, ngDevMode && `Unable to resolve animation metadata node #${nodeType}`);
}
function invalidCssUnitValue(userProvidedProperty, value) {
  return new RuntimeError(3005, ngDevMode && `Please provide a CSS unit value for ${userProvidedProperty}:${value}`);
}
function invalidTrigger() {
  return new RuntimeError(3006, ngDevMode && "animation triggers cannot be prefixed with an `@` sign (e.g. trigger('@foo', [...]))");
}
function invalidDefinition() {
  return new RuntimeError(3007, ngDevMode && "only state() and transition() definitions can sit inside of a trigger()");
}
function invalidState(metadataName, missingSubs) {
  return new RuntimeError(3008, ngDevMode && `state("${metadataName}", ...) must define default values for all the following style substitutions: ${missingSubs.join(", ")}`);
}
function invalidStyleValue(value) {
  return new RuntimeError(3002, ngDevMode && `The provided style string value ${value} is not allowed.`);
}
function invalidParallelAnimation(prop, firstStart, firstEnd, secondStart, secondEnd) {
  return new RuntimeError(3010, ngDevMode && `The CSS property "${prop}" that exists between the times of "${firstStart}ms" and "${firstEnd}ms" is also being animated in a parallel animation between the times of "${secondStart}ms" and "${secondEnd}ms"`);
}
function invalidKeyframes() {
  return new RuntimeError(3011, ngDevMode && `keyframes() must be placed inside of a call to animate()`);
}
function invalidOffset() {
  return new RuntimeError(3012, ngDevMode && `Please ensure that all keyframe offsets are between 0 and 1`);
}
function keyframeOffsetsOutOfOrder() {
  return new RuntimeError(3200, ngDevMode && `Please ensure that all keyframe offsets are in order`);
}
function keyframesMissingOffsets() {
  return new RuntimeError(3202, ngDevMode && `Not all style() steps within the declared keyframes() contain offsets`);
}
function invalidStagger() {
  return new RuntimeError(3013, ngDevMode && `stagger() can only be used inside of query()`);
}
function invalidQuery(selector) {
  return new RuntimeError(3014, ngDevMode && `\`query("${selector}")\` returned zero elements. (Use \`query("${selector}", { optional: true })\` if you wish to allow this.)`);
}
function invalidExpression(expr) {
  return new RuntimeError(3015, ngDevMode && `The provided transition expression "${expr}" is not supported`);
}
function invalidTransitionAlias(alias) {
  return new RuntimeError(3016, ngDevMode && `The transition alias value "${alias}" is not supported`);
}
function triggerBuildFailed(name, errors) {
  return new RuntimeError(3404, ngDevMode && `The animation trigger "${name}" has failed to build due to the following errors:
 - ${errors.map((err) => err.message).join("\n - ")}`);
}
function animationFailed(errors) {
  return new RuntimeError(3502, ngDevMode && `Unable to animate due to the following errors:${LINE_START}${errors.map((err) => err.message).join(LINE_START)}`);
}
function registerFailed(errors) {
  return new RuntimeError(3503, ngDevMode && `Unable to build the animation due to the following errors: ${errors.map((err) => err.message).join("\n")}`);
}
function missingOrDestroyedAnimation() {
  return new RuntimeError(3300, ngDevMode && "The requested animation doesn't exist or has already been destroyed");
}
function createAnimationFailed(errors) {
  return new RuntimeError(3504, ngDevMode && `Unable to create the animation due to the following errors:${errors.map((err) => err.message).join("\n")}`);
}
function missingPlayer(id) {
  return new RuntimeError(3301, ngDevMode && `Unable to find the timeline player referenced by ${id}`);
}
function missingTrigger(phase, name) {
  return new RuntimeError(3302, ngDevMode && `Unable to listen on the animation trigger event "${phase}" because the animation trigger "${name}" doesn't exist!`);
}
function missingEvent(name) {
  return new RuntimeError(3303, ngDevMode && `Unable to listen on the animation trigger "${name}" because the provided event is undefined!`);
}
function unsupportedTriggerEvent(phase, name) {
  return new RuntimeError(3400, ngDevMode && `The provided animation trigger event "${phase}" for the animation trigger "${name}" is not supported!`);
}
function unregisteredTrigger(name) {
  return new RuntimeError(3401, ngDevMode && `The provided animation trigger "${name}" has not been registered!`);
}
function triggerTransitionsFailed(errors) {
  return new RuntimeError(3402, ngDevMode && `Unable to process animations due to the following failed trigger transitions
 ${errors.map((err) => err.message).join("\n")}`);
}
function transitionFailed(name, errors) {
  return new RuntimeError(3505, ngDevMode && `@${name} has failed due to:
 ${errors.map((err) => err.message).join("\n- ")}`);
}
var ANIMATABLE_PROP_SET = /* @__PURE__ */ new Set(["-moz-outline-radius", "-moz-outline-radius-bottomleft", "-moz-outline-radius-bottomright", "-moz-outline-radius-topleft", "-moz-outline-radius-topright", "-ms-grid-columns", "-ms-grid-rows", "-webkit-line-clamp", "-webkit-text-fill-color", "-webkit-text-stroke", "-webkit-text-stroke-color", "accent-color", "all", "backdrop-filter", "background", "background-color", "background-position", "background-size", "block-size", "border", "border-block-end", "border-block-end-color", "border-block-end-width", "border-block-start", "border-block-start-color", "border-block-start-width", "border-bottom", "border-bottom-color", "border-bottom-left-radius", "border-bottom-right-radius", "border-bottom-width", "border-color", "border-end-end-radius", "border-end-start-radius", "border-image-outset", "border-image-slice", "border-image-width", "border-inline-end", "border-inline-end-color", "border-inline-end-width", "border-inline-start", "border-inline-start-color", "border-inline-start-width", "border-left", "border-left-color", "border-left-width", "border-radius", "border-right", "border-right-color", "border-right-width", "border-start-end-radius", "border-start-start-radius", "border-top", "border-top-color", "border-top-left-radius", "border-top-right-radius", "border-top-width", "border-width", "bottom", "box-shadow", "caret-color", "clip", "clip-path", "color", "column-count", "column-gap", "column-rule", "column-rule-color", "column-rule-width", "column-width", "columns", "filter", "flex", "flex-basis", "flex-grow", "flex-shrink", "font", "font-size", "font-size-adjust", "font-stretch", "font-variation-settings", "font-weight", "gap", "grid-column-gap", "grid-gap", "grid-row-gap", "grid-template-columns", "grid-template-rows", "height", "inline-size", "input-security", "inset", "inset-block", "inset-block-end", "inset-block-start", "inset-inline", "inset-inline-end", "inset-inline-start", "left", "letter-spacing", "line-clamp", "line-height", "margin", "margin-block-end", "margin-block-start", "margin-bottom", "margin-inline-end", "margin-inline-start", "margin-left", "margin-right", "margin-top", "mask", "mask-border", "mask-position", "mask-size", "max-block-size", "max-height", "max-inline-size", "max-lines", "max-width", "min-block-size", "min-height", "min-inline-size", "min-width", "object-position", "offset", "offset-anchor", "offset-distance", "offset-path", "offset-position", "offset-rotate", "opacity", "order", "outline", "outline-color", "outline-offset", "outline-width", "padding", "padding-block-end", "padding-block-start", "padding-bottom", "padding-inline-end", "padding-inline-start", "padding-left", "padding-right", "padding-top", "perspective", "perspective-origin", "right", "rotate", "row-gap", "scale", "scroll-margin", "scroll-margin-block", "scroll-margin-block-end", "scroll-margin-block-start", "scroll-margin-bottom", "scroll-margin-inline", "scroll-margin-inline-end", "scroll-margin-inline-start", "scroll-margin-left", "scroll-margin-right", "scroll-margin-top", "scroll-padding", "scroll-padding-block", "scroll-padding-block-end", "scroll-padding-block-start", "scroll-padding-bottom", "scroll-padding-inline", "scroll-padding-inline-end", "scroll-padding-inline-start", "scroll-padding-left", "scroll-padding-right", "scroll-padding-top", "scroll-snap-coordinate", "scroll-snap-destination", "scrollbar-color", "shape-image-threshold", "shape-margin", "shape-outside", "tab-size", "text-decoration", "text-decoration-color", "text-decoration-thickness", "text-emphasis", "text-emphasis-color", "text-indent", "text-shadow", "text-underline-offset", "top", "transform", "transform-origin", "translate", "vertical-align", "visibility", "width", "word-spacing", "z-index", "zoom"]);
function optimizeGroupPlayer(players) {
  switch (players.length) {
    case 0:
      return new NoopAnimationPlayer();
    case 1:
      return players[0];
    default:
      return new AnimationGroupPlayer(players);
  }
}
function normalizeKeyframes$1(normalizer, keyframes, preStyles = /* @__PURE__ */ new Map(), postStyles = /* @__PURE__ */ new Map()) {
  const errors = [];
  const normalizedKeyframes = [];
  let previousOffset = -1;
  let previousKeyframe = null;
  keyframes.forEach((kf) => {
    const offset = kf.get("offset");
    const isSameOffset = offset == previousOffset;
    const normalizedKeyframe = isSameOffset && previousKeyframe || /* @__PURE__ */ new Map();
    kf.forEach((val, prop) => {
      let normalizedProp = prop;
      let normalizedValue = val;
      if (prop !== "offset") {
        normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);
        switch (normalizedValue) {
          case \u0275PRE_STYLE:
            normalizedValue = preStyles.get(prop);
            break;
          case AUTO_STYLE:
            normalizedValue = postStyles.get(prop);
            break;
          default:
            normalizedValue = normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);
            break;
        }
      }
      normalizedKeyframe.set(normalizedProp, normalizedValue);
    });
    if (!isSameOffset) {
      normalizedKeyframes.push(normalizedKeyframe);
    }
    previousKeyframe = normalizedKeyframe;
    previousOffset = offset;
  });
  if (errors.length) {
    throw animationFailed(errors);
  }
  return normalizedKeyframes;
}
function listenOnPlayer(player, eventName, event, callback) {
  switch (eventName) {
    case "start":
      player.onStart(() => callback(event && copyAnimationEvent(event, "start", player)));
      break;
    case "done":
      player.onDone(() => callback(event && copyAnimationEvent(event, "done", player)));
      break;
    case "destroy":
      player.onDestroy(() => callback(event && copyAnimationEvent(event, "destroy", player)));
      break;
  }
}
function copyAnimationEvent(e, phaseName, player) {
  const totalTime = player.totalTime;
  const disabled = player.disabled ? true : false;
  const event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == void 0 ? e.totalTime : totalTime, disabled);
  const data = e["_data"];
  if (data != null) {
    event["_data"] = data;
  }
  return event;
}
function makeAnimationEvent(element, triggerName, fromState, toState, phaseName = "", totalTime = 0, disabled) {
  return {
    element,
    triggerName,
    fromState,
    toState,
    phaseName,
    totalTime,
    disabled: !!disabled
  };
}
function getOrSetDefaultValue(map2, key, defaultValue) {
  let value = map2.get(key);
  if (!value) {
    map2.set(key, value = defaultValue);
  }
  return value;
}
function parseTimelineCommand(command) {
  const separatorPos = command.indexOf(":");
  const id = command.substring(1, separatorPos);
  const action = command.slice(separatorPos + 1);
  return [id, action];
}
var documentElement = /* @__PURE__ */ (() => typeof document === "undefined" ? null : document.documentElement)();
function getParentElement(element) {
  const parent = element.parentNode || element.host || null;
  if (parent === documentElement) {
    return null;
  }
  return parent;
}
function containsVendorPrefix(prop) {
  return prop.substring(1, 6) == "ebkit";
}
var _CACHED_BODY = null;
var _IS_WEBKIT = false;
function validateStyleProperty(prop) {
  if (!_CACHED_BODY) {
    _CACHED_BODY = getBodyNode() || {};
    _IS_WEBKIT = _CACHED_BODY.style ? "WebkitAppearance" in _CACHED_BODY.style : false;
  }
  let result = true;
  if (_CACHED_BODY.style && !containsVendorPrefix(prop)) {
    result = prop in _CACHED_BODY.style;
    if (!result && _IS_WEBKIT) {
      const camelProp = "Webkit" + prop.charAt(0).toUpperCase() + prop.slice(1);
      result = camelProp in _CACHED_BODY.style;
    }
  }
  return result;
}
function validateWebAnimatableStyleProperty(prop) {
  return ANIMATABLE_PROP_SET.has(prop);
}
function getBodyNode() {
  if (typeof document != "undefined") {
    return document.body;
  }
  return null;
}
function containsElement(elm1, elm2) {
  while (elm2) {
    if (elm2 === elm1) {
      return true;
    }
    elm2 = getParentElement(elm2);
  }
  return false;
}
function invokeQuery(element, selector, multi) {
  if (multi) {
    return Array.from(element.querySelectorAll(selector));
  }
  const elem = element.querySelector(selector);
  return elem ? [elem] : [];
}
var _NoopAnimationDriver = class _NoopAnimationDriver {
  /**
   * @returns Whether `prop` is a valid CSS property
   */
  validateStyleProperty(prop) {
    return validateStyleProperty(prop);
  }
  /**
   *
   * @returns Whether elm1 contains elm2.
   */
  containsElement(elm1, elm2) {
    return containsElement(elm1, elm2);
  }
  /**
   * @returns Rhe parent of the given element or `null` if the element is the `document`
   */
  getParentElement(element) {
    return getParentElement(element);
  }
  /**
   * @returns The result of the query selector on the element. The array will contain up to 1 item
   *     if `multi` is  `false`.
   */
  query(element, selector, multi) {
    return invokeQuery(element, selector, multi);
  }
  /**
   * @returns The `defaultValue` or empty string
   */
  computeStyle(element, prop, defaultValue) {
    return defaultValue || "";
  }
  /**
   * @returns An `NoopAnimationPlayer`
   */
  animate(element, keyframes, duration, delay2, easing, previousPlayers = [], scrubberAccessRequested) {
    return new NoopAnimationPlayer(duration, delay2);
  }
};
_NoopAnimationDriver.\u0275fac = function NoopAnimationDriver_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NoopAnimationDriver)();
};
_NoopAnimationDriver.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NoopAnimationDriver,
  factory: _NoopAnimationDriver.\u0275fac
});
var NoopAnimationDriver = _NoopAnimationDriver;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NoopAnimationDriver, [{
    type: Injectable
  }], null, null);
})();
var _AnimationDriver = class _AnimationDriver {
};
_AnimationDriver.NOOP = new NoopAnimationDriver();
var AnimationDriver = _AnimationDriver;
var AnimationStyleNormalizer = class {
};
var ONE_SECOND = 1e3;
var SUBSTITUTION_EXPR_START = "{{";
var SUBSTITUTION_EXPR_END = "}}";
var ENTER_CLASSNAME = "ng-enter";
var LEAVE_CLASSNAME = "ng-leave";
var NG_TRIGGER_CLASSNAME = "ng-trigger";
var NG_TRIGGER_SELECTOR = ".ng-trigger";
var NG_ANIMATING_CLASSNAME = "ng-animating";
var NG_ANIMATING_SELECTOR = ".ng-animating";
function resolveTimingValue(value) {
  if (typeof value == "number") return value;
  const matches = value.match(/^(-?[\.\d]+)(m?s)/);
  if (!matches || matches.length < 2) return 0;
  return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
}
function _convertTimeValueToMS(value, unit) {
  switch (unit) {
    case "s":
      return value * ONE_SECOND;
    default:
      return value;
  }
}
function resolveTiming(timings, errors, allowNegativeValues) {
  return timings.hasOwnProperty("duration") ? timings : parseTimeExpression(timings, errors, allowNegativeValues);
}
function parseTimeExpression(exp, errors, allowNegativeValues) {
  const regex = /^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
  let duration;
  let delay2 = 0;
  let easing = "";
  if (typeof exp === "string") {
    const matches = exp.match(regex);
    if (matches === null) {
      errors.push(invalidTimingValue(exp));
      return {
        duration: 0,
        delay: 0,
        easing: ""
      };
    }
    duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
    const delayMatch = matches[3];
    if (delayMatch != null) {
      delay2 = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);
    }
    const easingVal = matches[5];
    if (easingVal) {
      easing = easingVal;
    }
  } else {
    duration = exp;
  }
  if (!allowNegativeValues) {
    let containsErrors = false;
    let startIndex = errors.length;
    if (duration < 0) {
      errors.push(negativeStepValue());
      containsErrors = true;
    }
    if (delay2 < 0) {
      errors.push(negativeDelayValue());
      containsErrors = true;
    }
    if (containsErrors) {
      errors.splice(startIndex, 0, invalidTimingValue(exp));
    }
  }
  return {
    duration,
    delay: delay2,
    easing
  };
}
function normalizeKeyframes(keyframes) {
  if (!keyframes.length) {
    return [];
  }
  if (keyframes[0] instanceof Map) {
    return keyframes;
  }
  return keyframes.map((kf) => new Map(Object.entries(kf)));
}
function setStyles(element, styles, formerStyles) {
  styles.forEach((val, prop) => {
    const camelProp = dashCaseToCamelCase(prop);
    if (formerStyles && !formerStyles.has(prop)) {
      formerStyles.set(prop, element.style[camelProp]);
    }
    element.style[camelProp] = val;
  });
}
function eraseStyles(element, styles) {
  styles.forEach((_, prop) => {
    const camelProp = dashCaseToCamelCase(prop);
    element.style[camelProp] = "";
  });
}
function normalizeAnimationEntry(steps) {
  if (Array.isArray(steps)) {
    if (steps.length == 1) return steps[0];
    return sequence(steps);
  }
  return steps;
}
function validateStyleParams(value, options, errors) {
  const params = options.params || {};
  const matches = extractStyleParams(value);
  if (matches.length) {
    matches.forEach((varName) => {
      if (!params.hasOwnProperty(varName)) {
        errors.push(invalidStyleParams(varName));
      }
    });
  }
}
var PARAM_REGEX = new RegExp(`${SUBSTITUTION_EXPR_START}\\s*(.+?)\\s*${SUBSTITUTION_EXPR_END}`, "g");
function extractStyleParams(value) {
  let params = [];
  if (typeof value === "string") {
    let match;
    while (match = PARAM_REGEX.exec(value)) {
      params.push(match[1]);
    }
    PARAM_REGEX.lastIndex = 0;
  }
  return params;
}
function interpolateParams(value, params, errors) {
  const original = `${value}`;
  const str = original.replace(PARAM_REGEX, (_, varName) => {
    let localVal = params[varName];
    if (localVal == null) {
      errors.push(invalidParamValue(varName));
      localVal = "";
    }
    return localVal.toString();
  });
  return str == original ? value : str;
}
var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
function dashCaseToCamelCase(input2) {
  return input2.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
}
function camelCaseToDashCase(input2) {
  return input2.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
}
function allowPreviousPlayerStylesMerge(duration, delay2) {
  return duration === 0 || delay2 === 0;
}
function balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles) {
  if (previousStyles.size && keyframes.length) {
    let startingKeyframe = keyframes[0];
    let missingStyleProps = [];
    previousStyles.forEach((val, prop) => {
      if (!startingKeyframe.has(prop)) {
        missingStyleProps.push(prop);
      }
      startingKeyframe.set(prop, val);
    });
    if (missingStyleProps.length) {
      for (let i = 1; i < keyframes.length; i++) {
        let kf = keyframes[i];
        missingStyleProps.forEach((prop) => kf.set(prop, computeStyle(element, prop)));
      }
    }
  }
  return keyframes;
}
function visitDslNode(visitor, node, context) {
  switch (node.type) {
    case AnimationMetadataType.Trigger:
      return visitor.visitTrigger(node, context);
    case AnimationMetadataType.State:
      return visitor.visitState(node, context);
    case AnimationMetadataType.Transition:
      return visitor.visitTransition(node, context);
    case AnimationMetadataType.Sequence:
      return visitor.visitSequence(node, context);
    case AnimationMetadataType.Group:
      return visitor.visitGroup(node, context);
    case AnimationMetadataType.Animate:
      return visitor.visitAnimate(node, context);
    case AnimationMetadataType.Keyframes:
      return visitor.visitKeyframes(node, context);
    case AnimationMetadataType.Style:
      return visitor.visitStyle(node, context);
    case AnimationMetadataType.Reference:
      return visitor.visitReference(node, context);
    case AnimationMetadataType.AnimateChild:
      return visitor.visitAnimateChild(node, context);
    case AnimationMetadataType.AnimateRef:
      return visitor.visitAnimateRef(node, context);
    case AnimationMetadataType.Query:
      return visitor.visitQuery(node, context);
    case AnimationMetadataType.Stagger:
      return visitor.visitStagger(node, context);
    default:
      throw invalidNodeType(node.type);
  }
}
function computeStyle(element, prop) {
  return window.getComputedStyle(element)[prop];
}
var DIMENSIONAL_PROP_SET = /* @__PURE__ */ new Set(["width", "height", "minWidth", "minHeight", "maxWidth", "maxHeight", "left", "top", "bottom", "right", "fontSize", "outlineWidth", "outlineOffset", "paddingTop", "paddingLeft", "paddingBottom", "paddingRight", "marginTop", "marginLeft", "marginBottom", "marginRight", "borderRadius", "borderWidth", "borderTopWidth", "borderLeftWidth", "borderRightWidth", "borderBottomWidth", "textIndent", "perspective"]);
var WebAnimationsStyleNormalizer = class extends AnimationStyleNormalizer {
  normalizePropertyName(propertyName, errors) {
    return dashCaseToCamelCase(propertyName);
  }
  normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
    let unit = "";
    const strVal = value.toString().trim();
    if (DIMENSIONAL_PROP_SET.has(normalizedProperty) && value !== 0 && value !== "0") {
      if (typeof value === "number") {
        unit = "px";
      } else {
        const valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);
        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
          errors.push(invalidCssUnitValue(userProvidedProperty, value));
        }
      }
    }
    return strVal + unit;
  }
};
function createListOfWarnings(warnings) {
  const LINE_START2 = "\n - ";
  return `${LINE_START2}${warnings.filter(Boolean).map((warning) => warning).join(LINE_START2)}`;
}
function warnTriggerBuild(name, warnings) {
  (typeof ngDevMode === "undefined" || ngDevMode) && console.warn(`The animation trigger "${name}" has built with the following warnings:${createListOfWarnings(warnings)}`);
}
function warnRegister(warnings) {
  (typeof ngDevMode === "undefined" || ngDevMode) && console.warn(`Animation built with the following warnings:${createListOfWarnings(warnings)}`);
}
function pushUnrecognizedPropertiesWarning(warnings, props) {
  if (props.length) {
    warnings.push(`The following provided properties are not recognized: ${props.join(", ")}`);
  }
}
var ANY_STATE = "*";
function parseTransitionExpr(transitionValue, errors) {
  const expressions = [];
  if (typeof transitionValue == "string") {
    transitionValue.split(/\s*,\s*/).forEach((str) => parseInnerTransitionStr(str, expressions, errors));
  } else {
    expressions.push(transitionValue);
  }
  return expressions;
}
function parseInnerTransitionStr(eventStr, expressions, errors) {
  if (eventStr[0] == ":") {
    const result = parseAnimationAlias(eventStr, errors);
    if (typeof result == "function") {
      expressions.push(result);
      return;
    }
    eventStr = result;
  }
  const match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
  if (match == null || match.length < 4) {
    errors.push(invalidExpression(eventStr));
    return expressions;
  }
  const fromState = match[1];
  const separator = match[2];
  const toState = match[3];
  expressions.push(makeLambdaFromStates(fromState, toState));
  const isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
  if (separator[0] == "<" && !isFullAnyStateExpr) {
    expressions.push(makeLambdaFromStates(toState, fromState));
  }
  return;
}
function parseAnimationAlias(alias, errors) {
  switch (alias) {
    case ":enter":
      return "void => *";
    case ":leave":
      return "* => void";
    case ":increment":
      return (fromState, toState) => parseFloat(toState) > parseFloat(fromState);
    case ":decrement":
      return (fromState, toState) => parseFloat(toState) < parseFloat(fromState);
    default:
      errors.push(invalidTransitionAlias(alias));
      return "* => *";
  }
}
var TRUE_BOOLEAN_VALUES = /* @__PURE__ */ new Set(["true", "1"]);
var FALSE_BOOLEAN_VALUES = /* @__PURE__ */ new Set(["false", "0"]);
function makeLambdaFromStates(lhs, rhs) {
  const LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);
  const RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);
  return (fromState, toState) => {
    let lhsMatch = lhs == ANY_STATE || lhs == fromState;
    let rhsMatch = rhs == ANY_STATE || rhs == toState;
    if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === "boolean") {
      lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);
    }
    if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === "boolean") {
      rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);
    }
    return lhsMatch && rhsMatch;
  };
}
var SELF_TOKEN = ":self";
var SELF_TOKEN_REGEX = new RegExp(`s*${SELF_TOKEN}s*,?`, "g");
function buildAnimationAst(driver, metadata, errors, warnings) {
  return new AnimationAstBuilderVisitor(driver).build(metadata, errors, warnings);
}
var ROOT_SELECTOR = "";
var AnimationAstBuilderVisitor = class {
  constructor(_driver) {
    this._driver = _driver;
  }
  build(metadata, errors, warnings) {
    const context = new AnimationAstBuilderContext(errors);
    this._resetContextStyleTimingState(context);
    const ast = visitDslNode(this, normalizeAnimationEntry(metadata), context);
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (context.unsupportedCSSPropertiesFound.size) {
        pushUnrecognizedPropertiesWarning(warnings, [...context.unsupportedCSSPropertiesFound.keys()]);
      }
    }
    return ast;
  }
  _resetContextStyleTimingState(context) {
    context.currentQuerySelector = ROOT_SELECTOR;
    context.collectedStyles = /* @__PURE__ */ new Map();
    context.collectedStyles.set(ROOT_SELECTOR, /* @__PURE__ */ new Map());
    context.currentTime = 0;
  }
  visitTrigger(metadata, context) {
    let queryCount = context.queryCount = 0;
    let depCount = context.depCount = 0;
    const states = [];
    const transitions = [];
    if (metadata.name.charAt(0) == "@") {
      context.errors.push(invalidTrigger());
    }
    metadata.definitions.forEach((def) => {
      this._resetContextStyleTimingState(context);
      if (def.type == AnimationMetadataType.State) {
        const stateDef = def;
        const name = stateDef.name;
        name.toString().split(/\s*,\s*/).forEach((n) => {
          stateDef.name = n;
          states.push(this.visitState(stateDef, context));
        });
        stateDef.name = name;
      } else if (def.type == AnimationMetadataType.Transition) {
        const transition = this.visitTransition(def, context);
        queryCount += transition.queryCount;
        depCount += transition.depCount;
        transitions.push(transition);
      } else {
        context.errors.push(invalidDefinition());
      }
    });
    return {
      type: AnimationMetadataType.Trigger,
      name: metadata.name,
      states,
      transitions,
      queryCount,
      depCount,
      options: null
    };
  }
  visitState(metadata, context) {
    const styleAst = this.visitStyle(metadata.styles, context);
    const astParams = metadata.options && metadata.options.params || null;
    if (styleAst.containsDynamicStyles) {
      const missingSubs = /* @__PURE__ */ new Set();
      const params = astParams || {};
      styleAst.styles.forEach((style2) => {
        if (style2 instanceof Map) {
          style2.forEach((value) => {
            extractStyleParams(value).forEach((sub) => {
              if (!params.hasOwnProperty(sub)) {
                missingSubs.add(sub);
              }
            });
          });
        }
      });
      if (missingSubs.size) {
        context.errors.push(invalidState(metadata.name, [...missingSubs.values()]));
      }
    }
    return {
      type: AnimationMetadataType.State,
      name: metadata.name,
      style: styleAst,
      options: astParams ? {
        params: astParams
      } : null
    };
  }
  visitTransition(metadata, context) {
    context.queryCount = 0;
    context.depCount = 0;
    const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
    const matchers = parseTransitionExpr(metadata.expr, context.errors);
    return {
      type: AnimationMetadataType.Transition,
      matchers,
      animation,
      queryCount: context.queryCount,
      depCount: context.depCount,
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitSequence(metadata, context) {
    return {
      type: AnimationMetadataType.Sequence,
      steps: metadata.steps.map((s) => visitDslNode(this, s, context)),
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitGroup(metadata, context) {
    const currentTime = context.currentTime;
    let furthestTime = 0;
    const steps = metadata.steps.map((step) => {
      context.currentTime = currentTime;
      const innerAst = visitDslNode(this, step, context);
      furthestTime = Math.max(furthestTime, context.currentTime);
      return innerAst;
    });
    context.currentTime = furthestTime;
    return {
      type: AnimationMetadataType.Group,
      steps,
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitAnimate(metadata, context) {
    const timingAst = constructTimingAst(metadata.timings, context.errors);
    context.currentAnimateTimings = timingAst;
    let styleAst;
    let styleMetadata = metadata.styles ? metadata.styles : style({});
    if (styleMetadata.type == AnimationMetadataType.Keyframes) {
      styleAst = this.visitKeyframes(styleMetadata, context);
    } else {
      let styleMetadata2 = metadata.styles;
      let isEmpty = false;
      if (!styleMetadata2) {
        isEmpty = true;
        const newStyleData = {};
        if (timingAst.easing) {
          newStyleData["easing"] = timingAst.easing;
        }
        styleMetadata2 = style(newStyleData);
      }
      context.currentTime += timingAst.duration + timingAst.delay;
      const _styleAst = this.visitStyle(styleMetadata2, context);
      _styleAst.isEmptyStep = isEmpty;
      styleAst = _styleAst;
    }
    context.currentAnimateTimings = null;
    return {
      type: AnimationMetadataType.Animate,
      timings: timingAst,
      style: styleAst,
      options: null
    };
  }
  visitStyle(metadata, context) {
    const ast = this._makeStyleAst(metadata, context);
    this._validateStyleAst(ast, context);
    return ast;
  }
  _makeStyleAst(metadata, context) {
    const styles = [];
    const metadataStyles = Array.isArray(metadata.styles) ? metadata.styles : [metadata.styles];
    for (let styleTuple of metadataStyles) {
      if (typeof styleTuple === "string") {
        if (styleTuple === AUTO_STYLE) {
          styles.push(styleTuple);
        } else {
          context.errors.push(invalidStyleValue(styleTuple));
        }
      } else {
        styles.push(new Map(Object.entries(styleTuple)));
      }
    }
    let containsDynamicStyles = false;
    let collectedEasing = null;
    styles.forEach((styleData) => {
      if (styleData instanceof Map) {
        if (styleData.has("easing")) {
          collectedEasing = styleData.get("easing");
          styleData.delete("easing");
        }
        if (!containsDynamicStyles) {
          for (let value of styleData.values()) {
            if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {
              containsDynamicStyles = true;
              break;
            }
          }
        }
      }
    });
    return {
      type: AnimationMetadataType.Style,
      styles,
      easing: collectedEasing,
      offset: metadata.offset,
      containsDynamicStyles,
      options: null
    };
  }
  _validateStyleAst(ast, context) {
    const timings = context.currentAnimateTimings;
    let endTime = context.currentTime;
    let startTime = context.currentTime;
    if (timings && startTime > 0) {
      startTime -= timings.duration + timings.delay;
    }
    ast.styles.forEach((tuple) => {
      if (typeof tuple === "string") return;
      tuple.forEach((value, prop) => {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          if (!this._driver.validateStyleProperty(prop)) {
            tuple.delete(prop);
            context.unsupportedCSSPropertiesFound.add(prop);
            return;
          }
        }
        const collectedStyles = context.collectedStyles.get(context.currentQuerySelector);
        const collectedEntry = collectedStyles.get(prop);
        let updateCollectedStyle = true;
        if (collectedEntry) {
          if (startTime != endTime && startTime >= collectedEntry.startTime && endTime <= collectedEntry.endTime) {
            context.errors.push(invalidParallelAnimation(prop, collectedEntry.startTime, collectedEntry.endTime, startTime, endTime));
            updateCollectedStyle = false;
          }
          startTime = collectedEntry.startTime;
        }
        if (updateCollectedStyle) {
          collectedStyles.set(prop, {
            startTime,
            endTime
          });
        }
        if (context.options) {
          validateStyleParams(value, context.options, context.errors);
        }
      });
    });
  }
  visitKeyframes(metadata, context) {
    const ast = {
      type: AnimationMetadataType.Keyframes,
      styles: [],
      options: null
    };
    if (!context.currentAnimateTimings) {
      context.errors.push(invalidKeyframes());
      return ast;
    }
    const MAX_KEYFRAME_OFFSET = 1;
    let totalKeyframesWithOffsets = 0;
    const offsets = [];
    let offsetsOutOfOrder = false;
    let keyframesOutOfRange = false;
    let previousOffset = 0;
    const keyframes = metadata.steps.map((styles) => {
      const style2 = this._makeStyleAst(styles, context);
      let offsetVal = style2.offset != null ? style2.offset : consumeOffset(style2.styles);
      let offset = 0;
      if (offsetVal != null) {
        totalKeyframesWithOffsets++;
        offset = style2.offset = offsetVal;
      }
      keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
      offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
      previousOffset = offset;
      offsets.push(offset);
      return style2;
    });
    if (keyframesOutOfRange) {
      context.errors.push(invalidOffset());
    }
    if (offsetsOutOfOrder) {
      context.errors.push(keyframeOffsetsOutOfOrder());
    }
    const length = metadata.steps.length;
    let generatedOffset = 0;
    if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
      context.errors.push(keyframesMissingOffsets());
    } else if (totalKeyframesWithOffsets == 0) {
      generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);
    }
    const limit = length - 1;
    const currentTime = context.currentTime;
    const currentAnimateTimings = context.currentAnimateTimings;
    const animateDuration = currentAnimateTimings.duration;
    keyframes.forEach((kf, i) => {
      const offset = generatedOffset > 0 ? i == limit ? 1 : generatedOffset * i : offsets[i];
      const durationUpToThisFrame = offset * animateDuration;
      context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;
      currentAnimateTimings.duration = durationUpToThisFrame;
      this._validateStyleAst(kf, context);
      kf.offset = offset;
      ast.styles.push(kf);
    });
    return ast;
  }
  visitReference(metadata, context) {
    return {
      type: AnimationMetadataType.Reference,
      animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitAnimateChild(metadata, context) {
    context.depCount++;
    return {
      type: AnimationMetadataType.AnimateChild,
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitAnimateRef(metadata, context) {
    return {
      type: AnimationMetadataType.AnimateRef,
      animation: this.visitReference(metadata.animation, context),
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitQuery(metadata, context) {
    const parentSelector = context.currentQuerySelector;
    const options = metadata.options || {};
    context.queryCount++;
    context.currentQuery = metadata;
    const [selector, includeSelf] = normalizeSelector(metadata.selector);
    context.currentQuerySelector = parentSelector.length ? parentSelector + " " + selector : selector;
    getOrSetDefaultValue(context.collectedStyles, context.currentQuerySelector, /* @__PURE__ */ new Map());
    const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
    context.currentQuery = null;
    context.currentQuerySelector = parentSelector;
    return {
      type: AnimationMetadataType.Query,
      selector,
      limit: options.limit || 0,
      optional: !!options.optional,
      includeSelf,
      animation,
      originalSelector: metadata.selector,
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitStagger(metadata, context) {
    if (!context.currentQuery) {
      context.errors.push(invalidStagger());
    }
    const timings = metadata.timings === "full" ? {
      duration: 0,
      delay: 0,
      easing: "full"
    } : resolveTiming(metadata.timings, context.errors, true);
    return {
      type: AnimationMetadataType.Stagger,
      animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
      timings,
      options: null
    };
  }
};
function normalizeSelector(selector) {
  const hasAmpersand = selector.split(/\s*,\s*/).find((token) => token == SELF_TOKEN) ? true : false;
  if (hasAmpersand) {
    selector = selector.replace(SELF_TOKEN_REGEX, "");
  }
  selector = selector.replace(/@\*/g, NG_TRIGGER_SELECTOR).replace(/@\w+/g, (match) => NG_TRIGGER_SELECTOR + "-" + match.slice(1)).replace(/:animating/g, NG_ANIMATING_SELECTOR);
  return [selector, hasAmpersand];
}
function normalizeParams(obj) {
  return obj ? __spreadValues({}, obj) : null;
}
var AnimationAstBuilderContext = class {
  constructor(errors) {
    this.errors = errors;
    this.queryCount = 0;
    this.depCount = 0;
    this.currentTransition = null;
    this.currentQuery = null;
    this.currentQuerySelector = null;
    this.currentAnimateTimings = null;
    this.currentTime = 0;
    this.collectedStyles = /* @__PURE__ */ new Map();
    this.options = null;
    this.unsupportedCSSPropertiesFound = /* @__PURE__ */ new Set();
  }
};
function consumeOffset(styles) {
  if (typeof styles == "string") return null;
  let offset = null;
  if (Array.isArray(styles)) {
    styles.forEach((styleTuple) => {
      if (styleTuple instanceof Map && styleTuple.has("offset")) {
        const obj = styleTuple;
        offset = parseFloat(obj.get("offset"));
        obj.delete("offset");
      }
    });
  } else if (styles instanceof Map && styles.has("offset")) {
    const obj = styles;
    offset = parseFloat(obj.get("offset"));
    obj.delete("offset");
  }
  return offset;
}
function constructTimingAst(value, errors) {
  if (value.hasOwnProperty("duration")) {
    return value;
  }
  if (typeof value == "number") {
    const duration = resolveTiming(value, errors).duration;
    return makeTimingAst(duration, 0, "");
  }
  const strValue = value;
  const isDynamic = strValue.split(/\s+/).some((v) => v.charAt(0) == "{" && v.charAt(1) == "{");
  if (isDynamic) {
    const ast = makeTimingAst(0, 0, "");
    ast.dynamic = true;
    ast.strValue = strValue;
    return ast;
  }
  const timings = resolveTiming(strValue, errors);
  return makeTimingAst(timings.duration, timings.delay, timings.easing);
}
function normalizeAnimationOptions(options) {
  if (options) {
    options = __spreadValues({}, options);
    if (options["params"]) {
      options["params"] = normalizeParams(options["params"]);
    }
  } else {
    options = {};
  }
  return options;
}
function makeTimingAst(duration, delay2, easing) {
  return {
    duration,
    delay: delay2,
    easing
  };
}
function createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay2, easing = null, subTimeline = false) {
  return {
    type: 1,
    element,
    keyframes,
    preStyleProps,
    postStyleProps,
    duration,
    delay: delay2,
    totalTime: duration + delay2,
    easing,
    subTimeline
  };
}
var ElementInstructionMap = class {
  constructor() {
    this._map = /* @__PURE__ */ new Map();
  }
  get(element) {
    return this._map.get(element) || [];
  }
  append(element, instructions) {
    let existingInstructions = this._map.get(element);
    if (!existingInstructions) {
      this._map.set(element, existingInstructions = []);
    }
    existingInstructions.push(...instructions);
  }
  has(element) {
    return this._map.has(element);
  }
  clear() {
    this._map.clear();
  }
};
var ONE_FRAME_IN_MILLISECONDS = 1;
var ENTER_TOKEN = ":enter";
var ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, "g");
var LEAVE_TOKEN = ":leave";
var LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, "g");
function buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles = /* @__PURE__ */ new Map(), finalStyles = /* @__PURE__ */ new Map(), options, subInstructions, errors = []) {
  return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);
}
var AnimationTimelineBuilderVisitor = class {
  buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors = []) {
    subInstructions = subInstructions || new ElementInstructionMap();
    const context = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);
    context.options = options;
    const delay2 = options.delay ? resolveTimingValue(options.delay) : 0;
    context.currentTimeline.delayNextStep(delay2);
    context.currentTimeline.setStyles([startingStyles], null, context.errors, options);
    visitDslNode(this, ast, context);
    const timelines = context.timelines.filter((timeline) => timeline.containsAnimation());
    if (timelines.length && finalStyles.size) {
      let lastRootTimeline;
      for (let i = timelines.length - 1; i >= 0; i--) {
        const timeline = timelines[i];
        if (timeline.element === rootElement) {
          lastRootTimeline = timeline;
          break;
        }
      }
      if (lastRootTimeline && !lastRootTimeline.allowOnlyTimelineStyles()) {
        lastRootTimeline.setStyles([finalStyles], null, context.errors, options);
      }
    }
    return timelines.length ? timelines.map((timeline) => timeline.buildKeyframes()) : [createTimelineInstruction(rootElement, [], [], [], 0, delay2, "", false)];
  }
  visitTrigger(ast, context) {
  }
  visitState(ast, context) {
  }
  visitTransition(ast, context) {
  }
  visitAnimateChild(ast, context) {
    const elementInstructions = context.subInstructions.get(context.element);
    if (elementInstructions) {
      const innerContext = context.createSubContext(ast.options);
      const startTime = context.currentTimeline.currentTime;
      const endTime = this._visitSubInstructions(elementInstructions, innerContext, innerContext.options);
      if (startTime != endTime) {
        context.transformIntoNewTimeline(endTime);
      }
    }
    context.previousNode = ast;
  }
  visitAnimateRef(ast, context) {
    const innerContext = context.createSubContext(ast.options);
    innerContext.transformIntoNewTimeline();
    this._applyAnimationRefDelays([ast.options, ast.animation.options], context, innerContext);
    this.visitReference(ast.animation, innerContext);
    context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);
    context.previousNode = ast;
  }
  _applyAnimationRefDelays(animationsRefsOptions, context, innerContext) {
    for (const animationRefOptions of animationsRefsOptions) {
      const animationDelay = animationRefOptions?.delay;
      if (animationDelay) {
        const animationDelayValue = typeof animationDelay === "number" ? animationDelay : resolveTimingValue(interpolateParams(animationDelay, animationRefOptions?.params ?? {}, context.errors));
        innerContext.delayNextStep(animationDelayValue);
      }
    }
  }
  _visitSubInstructions(instructions, context, options) {
    const startTime = context.currentTimeline.currentTime;
    let furthestTime = startTime;
    const duration = options.duration != null ? resolveTimingValue(options.duration) : null;
    const delay2 = options.delay != null ? resolveTimingValue(options.delay) : null;
    if (duration !== 0) {
      instructions.forEach((instruction) => {
        const instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay2);
        furthestTime = Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);
      });
    }
    return furthestTime;
  }
  visitReference(ast, context) {
    context.updateOptions(ast.options, true);
    visitDslNode(this, ast.animation, context);
    context.previousNode = ast;
  }
  visitSequence(ast, context) {
    const subContextCount = context.subContextCount;
    let ctx = context;
    const options = ast.options;
    if (options && (options.params || options.delay)) {
      ctx = context.createSubContext(options);
      ctx.transformIntoNewTimeline();
      if (options.delay != null) {
        if (ctx.previousNode.type == AnimationMetadataType.Style) {
          ctx.currentTimeline.snapshotCurrentStyles();
          ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
        }
        const delay2 = resolveTimingValue(options.delay);
        ctx.delayNextStep(delay2);
      }
    }
    if (ast.steps.length) {
      ast.steps.forEach((s) => visitDslNode(this, s, ctx));
      ctx.currentTimeline.applyStylesToKeyframe();
      if (ctx.subContextCount > subContextCount) {
        ctx.transformIntoNewTimeline();
      }
    }
    context.previousNode = ast;
  }
  visitGroup(ast, context) {
    const innerTimelines = [];
    let furthestTime = context.currentTimeline.currentTime;
    const delay2 = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;
    ast.steps.forEach((s) => {
      const innerContext = context.createSubContext(ast.options);
      if (delay2) {
        innerContext.delayNextStep(delay2);
      }
      visitDslNode(this, s, innerContext);
      furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
      innerTimelines.push(innerContext.currentTimeline);
    });
    innerTimelines.forEach((timeline) => context.currentTimeline.mergeTimelineCollectedStyles(timeline));
    context.transformIntoNewTimeline(furthestTime);
    context.previousNode = ast;
  }
  _visitTiming(ast, context) {
    if (ast.dynamic) {
      const strValue = ast.strValue;
      const timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;
      return resolveTiming(timingValue, context.errors);
    } else {
      return {
        duration: ast.duration,
        delay: ast.delay,
        easing: ast.easing
      };
    }
  }
  visitAnimate(ast, context) {
    const timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);
    const timeline = context.currentTimeline;
    if (timings.delay) {
      context.incrementTime(timings.delay);
      timeline.snapshotCurrentStyles();
    }
    const style2 = ast.style;
    if (style2.type == AnimationMetadataType.Keyframes) {
      this.visitKeyframes(style2, context);
    } else {
      context.incrementTime(timings.duration);
      this.visitStyle(style2, context);
      timeline.applyStylesToKeyframe();
    }
    context.currentAnimateTimings = null;
    context.previousNode = ast;
  }
  visitStyle(ast, context) {
    const timeline = context.currentTimeline;
    const timings = context.currentAnimateTimings;
    if (!timings && timeline.hasCurrentStyleProperties()) {
      timeline.forwardFrame();
    }
    const easing = timings && timings.easing || ast.easing;
    if (ast.isEmptyStep) {
      timeline.applyEmptyStep(easing);
    } else {
      timeline.setStyles(ast.styles, easing, context.errors, context.options);
    }
    context.previousNode = ast;
  }
  visitKeyframes(ast, context) {
    const currentAnimateTimings = context.currentAnimateTimings;
    const startTime = context.currentTimeline.duration;
    const duration = currentAnimateTimings.duration;
    const innerContext = context.createSubContext();
    const innerTimeline = innerContext.currentTimeline;
    innerTimeline.easing = currentAnimateTimings.easing;
    ast.styles.forEach((step) => {
      const offset = step.offset || 0;
      innerTimeline.forwardTime(offset * duration);
      innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);
      innerTimeline.applyStylesToKeyframe();
    });
    context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);
    context.transformIntoNewTimeline(startTime + duration);
    context.previousNode = ast;
  }
  visitQuery(ast, context) {
    const startTime = context.currentTimeline.currentTime;
    const options = ast.options || {};
    const delay2 = options.delay ? resolveTimingValue(options.delay) : 0;
    if (delay2 && (context.previousNode.type === AnimationMetadataType.Style || startTime == 0 && context.currentTimeline.hasCurrentStyleProperties())) {
      context.currentTimeline.snapshotCurrentStyles();
      context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
    }
    let furthestTime = startTime;
    const elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);
    context.currentQueryTotal = elms.length;
    let sameElementTimeline = null;
    elms.forEach((element, i) => {
      context.currentQueryIndex = i;
      const innerContext = context.createSubContext(ast.options, element);
      if (delay2) {
        innerContext.delayNextStep(delay2);
      }
      if (element === context.element) {
        sameElementTimeline = innerContext.currentTimeline;
      }
      visitDslNode(this, ast.animation, innerContext);
      innerContext.currentTimeline.applyStylesToKeyframe();
      const endTime = innerContext.currentTimeline.currentTime;
      furthestTime = Math.max(furthestTime, endTime);
    });
    context.currentQueryIndex = 0;
    context.currentQueryTotal = 0;
    context.transformIntoNewTimeline(furthestTime);
    if (sameElementTimeline) {
      context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);
      context.currentTimeline.snapshotCurrentStyles();
    }
    context.previousNode = ast;
  }
  visitStagger(ast, context) {
    const parentContext = context.parentContext;
    const tl = context.currentTimeline;
    const timings = ast.timings;
    const duration = Math.abs(timings.duration);
    const maxTime = duration * (context.currentQueryTotal - 1);
    let delay2 = duration * context.currentQueryIndex;
    let staggerTransformer = timings.duration < 0 ? "reverse" : timings.easing;
    switch (staggerTransformer) {
      case "reverse":
        delay2 = maxTime - delay2;
        break;
      case "full":
        delay2 = parentContext.currentStaggerTime;
        break;
    }
    const timeline = context.currentTimeline;
    if (delay2) {
      timeline.delayNextStep(delay2);
    }
    const startingTime = timeline.currentTime;
    visitDslNode(this, ast.animation, context);
    context.previousNode = ast;
    parentContext.currentStaggerTime = tl.currentTime - startingTime + (tl.startTime - parentContext.currentTimeline.startTime);
  }
};
var DEFAULT_NOOP_PREVIOUS_NODE = {};
var AnimationTimelineContext = class _AnimationTimelineContext {
  constructor(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {
    this._driver = _driver;
    this.element = element;
    this.subInstructions = subInstructions;
    this._enterClassName = _enterClassName;
    this._leaveClassName = _leaveClassName;
    this.errors = errors;
    this.timelines = timelines;
    this.parentContext = null;
    this.currentAnimateTimings = null;
    this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
    this.subContextCount = 0;
    this.options = {};
    this.currentQueryIndex = 0;
    this.currentQueryTotal = 0;
    this.currentStaggerTime = 0;
    this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);
    timelines.push(this.currentTimeline);
  }
  get params() {
    return this.options.params;
  }
  updateOptions(options, skipIfExists) {
    if (!options) return;
    const newOptions = options;
    let optionsToUpdate = this.options;
    if (newOptions.duration != null) {
      optionsToUpdate.duration = resolveTimingValue(newOptions.duration);
    }
    if (newOptions.delay != null) {
      optionsToUpdate.delay = resolveTimingValue(newOptions.delay);
    }
    const newParams = newOptions.params;
    if (newParams) {
      let paramsToUpdate = optionsToUpdate.params;
      if (!paramsToUpdate) {
        paramsToUpdate = this.options.params = {};
      }
      Object.keys(newParams).forEach((name) => {
        if (!skipIfExists || !paramsToUpdate.hasOwnProperty(name)) {
          paramsToUpdate[name] = interpolateParams(newParams[name], paramsToUpdate, this.errors);
        }
      });
    }
  }
  _copyOptions() {
    const options = {};
    if (this.options) {
      const oldParams = this.options.params;
      if (oldParams) {
        const params = options["params"] = {};
        Object.keys(oldParams).forEach((name) => {
          params[name] = oldParams[name];
        });
      }
    }
    return options;
  }
  createSubContext(options = null, element, newTime) {
    const target = element || this.element;
    const context = new _AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));
    context.previousNode = this.previousNode;
    context.currentAnimateTimings = this.currentAnimateTimings;
    context.options = this._copyOptions();
    context.updateOptions(options);
    context.currentQueryIndex = this.currentQueryIndex;
    context.currentQueryTotal = this.currentQueryTotal;
    context.parentContext = this;
    this.subContextCount++;
    return context;
  }
  transformIntoNewTimeline(newTime) {
    this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
    this.currentTimeline = this.currentTimeline.fork(this.element, newTime);
    this.timelines.push(this.currentTimeline);
    return this.currentTimeline;
  }
  appendInstructionToTimeline(instruction, duration, delay2) {
    const updatedTimings = {
      duration: duration != null ? duration : instruction.duration,
      delay: this.currentTimeline.currentTime + (delay2 != null ? delay2 : 0) + instruction.delay,
      easing: ""
    };
    const builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);
    this.timelines.push(builder);
    return updatedTimings;
  }
  incrementTime(time) {
    this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
  }
  delayNextStep(delay2) {
    if (delay2 > 0) {
      this.currentTimeline.delayNextStep(delay2);
    }
  }
  invokeQuery(selector, originalSelector, limit, includeSelf, optional, errors) {
    let results = [];
    if (includeSelf) {
      results.push(this.element);
    }
    if (selector.length > 0) {
      selector = selector.replace(ENTER_TOKEN_REGEX, "." + this._enterClassName);
      selector = selector.replace(LEAVE_TOKEN_REGEX, "." + this._leaveClassName);
      const multi = limit != 1;
      let elements = this._driver.query(this.element, selector, multi);
      if (limit !== 0) {
        elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) : elements.slice(0, limit);
      }
      results.push(...elements);
    }
    if (!optional && results.length == 0) {
      errors.push(invalidQuery(originalSelector));
    }
    return results;
  }
};
var TimelineBuilder = class _TimelineBuilder {
  constructor(_driver, element, startTime, _elementTimelineStylesLookup) {
    this._driver = _driver;
    this.element = element;
    this.startTime = startTime;
    this._elementTimelineStylesLookup = _elementTimelineStylesLookup;
    this.duration = 0;
    this.easing = null;
    this._previousKeyframe = /* @__PURE__ */ new Map();
    this._currentKeyframe = /* @__PURE__ */ new Map();
    this._keyframes = /* @__PURE__ */ new Map();
    this._styleSummary = /* @__PURE__ */ new Map();
    this._localTimelineStyles = /* @__PURE__ */ new Map();
    this._pendingStyles = /* @__PURE__ */ new Map();
    this._backFill = /* @__PURE__ */ new Map();
    this._currentEmptyStepKeyframe = null;
    if (!this._elementTimelineStylesLookup) {
      this._elementTimelineStylesLookup = /* @__PURE__ */ new Map();
    }
    this._globalTimelineStyles = this._elementTimelineStylesLookup.get(element);
    if (!this._globalTimelineStyles) {
      this._globalTimelineStyles = this._localTimelineStyles;
      this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);
    }
    this._loadKeyframe();
  }
  containsAnimation() {
    switch (this._keyframes.size) {
      case 0:
        return false;
      case 1:
        return this.hasCurrentStyleProperties();
      default:
        return true;
    }
  }
  hasCurrentStyleProperties() {
    return this._currentKeyframe.size > 0;
  }
  get currentTime() {
    return this.startTime + this.duration;
  }
  delayNextStep(delay2) {
    const hasPreStyleStep = this._keyframes.size === 1 && this._pendingStyles.size;
    if (this.duration || hasPreStyleStep) {
      this.forwardTime(this.currentTime + delay2);
      if (hasPreStyleStep) {
        this.snapshotCurrentStyles();
      }
    } else {
      this.startTime += delay2;
    }
  }
  fork(element, currentTime) {
    this.applyStylesToKeyframe();
    return new _TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);
  }
  _loadKeyframe() {
    if (this._currentKeyframe) {
      this._previousKeyframe = this._currentKeyframe;
    }
    this._currentKeyframe = this._keyframes.get(this.duration);
    if (!this._currentKeyframe) {
      this._currentKeyframe = /* @__PURE__ */ new Map();
      this._keyframes.set(this.duration, this._currentKeyframe);
    }
  }
  forwardFrame() {
    this.duration += ONE_FRAME_IN_MILLISECONDS;
    this._loadKeyframe();
  }
  forwardTime(time) {
    this.applyStylesToKeyframe();
    this.duration = time;
    this._loadKeyframe();
  }
  _updateStyle(prop, value) {
    this._localTimelineStyles.set(prop, value);
    this._globalTimelineStyles.set(prop, value);
    this._styleSummary.set(prop, {
      time: this.currentTime,
      value
    });
  }
  allowOnlyTimelineStyles() {
    return this._currentEmptyStepKeyframe !== this._currentKeyframe;
  }
  applyEmptyStep(easing) {
    if (easing) {
      this._previousKeyframe.set("easing", easing);
    }
    for (let [prop, value] of this._globalTimelineStyles) {
      this._backFill.set(prop, value || AUTO_STYLE);
      this._currentKeyframe.set(prop, AUTO_STYLE);
    }
    this._currentEmptyStepKeyframe = this._currentKeyframe;
  }
  setStyles(input2, easing, errors, options) {
    if (easing) {
      this._previousKeyframe.set("easing", easing);
    }
    const params = options && options.params || {};
    const styles = flattenStyles(input2, this._globalTimelineStyles);
    for (let [prop, value] of styles) {
      const val = interpolateParams(value, params, errors);
      this._pendingStyles.set(prop, val);
      if (!this._localTimelineStyles.has(prop)) {
        this._backFill.set(prop, this._globalTimelineStyles.get(prop) ?? AUTO_STYLE);
      }
      this._updateStyle(prop, val);
    }
  }
  applyStylesToKeyframe() {
    if (this._pendingStyles.size == 0) return;
    this._pendingStyles.forEach((val, prop) => {
      this._currentKeyframe.set(prop, val);
    });
    this._pendingStyles.clear();
    this._localTimelineStyles.forEach((val, prop) => {
      if (!this._currentKeyframe.has(prop)) {
        this._currentKeyframe.set(prop, val);
      }
    });
  }
  snapshotCurrentStyles() {
    for (let [prop, val] of this._localTimelineStyles) {
      this._pendingStyles.set(prop, val);
      this._updateStyle(prop, val);
    }
  }
  getFinalKeyframe() {
    return this._keyframes.get(this.duration);
  }
  get properties() {
    const properties = [];
    for (let prop in this._currentKeyframe) {
      properties.push(prop);
    }
    return properties;
  }
  mergeTimelineCollectedStyles(timeline) {
    timeline._styleSummary.forEach((details1, prop) => {
      const details0 = this._styleSummary.get(prop);
      if (!details0 || details1.time > details0.time) {
        this._updateStyle(prop, details1.value);
      }
    });
  }
  buildKeyframes() {
    this.applyStylesToKeyframe();
    const preStyleProps = /* @__PURE__ */ new Set();
    const postStyleProps = /* @__PURE__ */ new Set();
    const isEmpty = this._keyframes.size === 1 && this.duration === 0;
    let finalKeyframes = [];
    this._keyframes.forEach((keyframe, time) => {
      const finalKeyframe = new Map([...this._backFill, ...keyframe]);
      finalKeyframe.forEach((value, prop) => {
        if (value === \u0275PRE_STYLE) {
          preStyleProps.add(prop);
        } else if (value === AUTO_STYLE) {
          postStyleProps.add(prop);
        }
      });
      if (!isEmpty) {
        finalKeyframe.set("offset", time / this.duration);
      }
      finalKeyframes.push(finalKeyframe);
    });
    const preProps = [...preStyleProps.values()];
    const postProps = [...postStyleProps.values()];
    if (isEmpty) {
      const kf0 = finalKeyframes[0];
      const kf1 = new Map(kf0);
      kf0.set("offset", 0);
      kf1.set("offset", 1);
      finalKeyframes = [kf0, kf1];
    }
    return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);
  }
};
var SubTimelineBuilder = class extends TimelineBuilder {
  constructor(driver, element, keyframes, preStyleProps, postStyleProps, timings, _stretchStartingKeyframe = false) {
    super(driver, element, timings.delay);
    this.keyframes = keyframes;
    this.preStyleProps = preStyleProps;
    this.postStyleProps = postStyleProps;
    this._stretchStartingKeyframe = _stretchStartingKeyframe;
    this.timings = {
      duration: timings.duration,
      delay: timings.delay,
      easing: timings.easing
    };
  }
  containsAnimation() {
    return this.keyframes.length > 1;
  }
  buildKeyframes() {
    let keyframes = this.keyframes;
    let {
      delay: delay2,
      duration,
      easing
    } = this.timings;
    if (this._stretchStartingKeyframe && delay2) {
      const newKeyframes = [];
      const totalTime = duration + delay2;
      const startingGap = delay2 / totalTime;
      const newFirstKeyframe = new Map(keyframes[0]);
      newFirstKeyframe.set("offset", 0);
      newKeyframes.push(newFirstKeyframe);
      const oldFirstKeyframe = new Map(keyframes[0]);
      oldFirstKeyframe.set("offset", roundOffset(startingGap));
      newKeyframes.push(oldFirstKeyframe);
      const limit = keyframes.length - 1;
      for (let i = 1; i <= limit; i++) {
        let kf = new Map(keyframes[i]);
        const oldOffset = kf.get("offset");
        const timeAtKeyframe = delay2 + oldOffset * duration;
        kf.set("offset", roundOffset(timeAtKeyframe / totalTime));
        newKeyframes.push(kf);
      }
      duration = totalTime;
      delay2 = 0;
      easing = "";
      keyframes = newKeyframes;
    }
    return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay2, easing, true);
  }
};
function roundOffset(offset, decimalPoints = 3) {
  const mult = Math.pow(10, decimalPoints - 1);
  return Math.round(offset * mult) / mult;
}
function flattenStyles(input2, allStyles) {
  const styles = /* @__PURE__ */ new Map();
  let allProperties;
  input2.forEach((token) => {
    if (token === "*") {
      allProperties ??= allStyles.keys();
      for (let prop of allProperties) {
        styles.set(prop, AUTO_STYLE);
      }
    } else {
      for (let [prop, val] of token) {
        styles.set(prop, val);
      }
    }
  });
  return styles;
}
function createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, totalTime, errors) {
  return {
    type: 0,
    element,
    triggerName,
    isRemovalTransition,
    fromState,
    fromStyles,
    toState,
    toStyles,
    timelines,
    queriedElements,
    preStyleProps,
    postStyleProps,
    totalTime,
    errors
  };
}
var EMPTY_OBJECT = {};
var AnimationTransitionFactory = class {
  constructor(_triggerName, ast, _stateStyles) {
    this._triggerName = _triggerName;
    this.ast = ast;
    this._stateStyles = _stateStyles;
  }
  match(currentState, nextState, element, params) {
    return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState, element, params);
  }
  buildStyles(stateName, params, errors) {
    let styler = this._stateStyles.get("*");
    if (stateName !== void 0) {
      styler = this._stateStyles.get(stateName?.toString()) || styler;
    }
    return styler ? styler.buildStyles(params, errors) : /* @__PURE__ */ new Map();
  }
  build(driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions, skipAstBuild) {
    const errors = [];
    const transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;
    const currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;
    const currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);
    const nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;
    const nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);
    const queriedElements = /* @__PURE__ */ new Set();
    const preStyleMap = /* @__PURE__ */ new Map();
    const postStyleMap = /* @__PURE__ */ new Map();
    const isRemoval = nextState === "void";
    const animationOptions = {
      params: applyParamDefaults(nextAnimationParams, transitionAnimationParams),
      delay: this.ast.options?.delay
    };
    const timelines = skipAstBuild ? [] : buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);
    let totalTime = 0;
    timelines.forEach((tl) => {
      totalTime = Math.max(tl.duration + tl.delay, totalTime);
    });
    if (errors.length) {
      return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, totalTime, errors);
    }
    timelines.forEach((tl) => {
      const elm = tl.element;
      const preProps = getOrSetDefaultValue(preStyleMap, elm, /* @__PURE__ */ new Set());
      tl.preStyleProps.forEach((prop) => preProps.add(prop));
      const postProps = getOrSetDefaultValue(postStyleMap, elm, /* @__PURE__ */ new Set());
      tl.postStyleProps.forEach((prop) => postProps.add(prop));
      if (elm !== element) {
        queriedElements.add(elm);
      }
    });
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      checkNonAnimatableInTimelines(timelines, this._triggerName, driver);
    }
    return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, [...queriedElements.values()], preStyleMap, postStyleMap, totalTime);
  }
};
function checkNonAnimatableInTimelines(timelines, triggerName, driver) {
  if (!driver.validateAnimatableStyleProperty) {
    return;
  }
  const allowedNonAnimatableProps = /* @__PURE__ */ new Set([
    // 'easing' is a utility/synthetic prop we use to represent
    // easing functions, it represents a property of the animation
    // which is not animatable but different values can be used
    // in different steps
    "easing"
  ]);
  const invalidNonAnimatableProps = /* @__PURE__ */ new Set();
  timelines.forEach(({
    keyframes
  }) => {
    const nonAnimatablePropsInitialValues = /* @__PURE__ */ new Map();
    keyframes.forEach((keyframe) => {
      const entriesToCheck = Array.from(keyframe.entries()).filter(([prop]) => !allowedNonAnimatableProps.has(prop));
      for (const [prop, value] of entriesToCheck) {
        if (!driver.validateAnimatableStyleProperty(prop)) {
          if (nonAnimatablePropsInitialValues.has(prop) && !invalidNonAnimatableProps.has(prop)) {
            const propInitialValue = nonAnimatablePropsInitialValues.get(prop);
            if (propInitialValue !== value) {
              invalidNonAnimatableProps.add(prop);
            }
          } else {
            nonAnimatablePropsInitialValues.set(prop, value);
          }
        }
      }
    });
  });
  if (invalidNonAnimatableProps.size > 0) {
    console.warn(`Warning: The animation trigger "${triggerName}" is attempting to animate the following not animatable properties: ` + Array.from(invalidNonAnimatableProps).join(", ") + "\n(to check the list of all animatable properties visit https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties)");
  }
}
function oneOrMoreTransitionsMatch(matchFns, currentState, nextState, element, params) {
  return matchFns.some((fn) => fn(currentState, nextState, element, params));
}
function applyParamDefaults(userParams, defaults) {
  const result = __spreadValues({}, defaults);
  Object.entries(userParams).forEach(([key, value]) => {
    if (value != null) {
      result[key] = value;
    }
  });
  return result;
}
var AnimationStateStyles = class {
  constructor(styles, defaultParams, normalizer) {
    this.styles = styles;
    this.defaultParams = defaultParams;
    this.normalizer = normalizer;
  }
  buildStyles(params, errors) {
    const finalStyles = /* @__PURE__ */ new Map();
    const combinedParams = applyParamDefaults(params, this.defaultParams);
    this.styles.styles.forEach((value) => {
      if (typeof value !== "string") {
        value.forEach((val, prop) => {
          if (val) {
            val = interpolateParams(val, combinedParams, errors);
          }
          const normalizedProp = this.normalizer.normalizePropertyName(prop, errors);
          val = this.normalizer.normalizeStyleValue(prop, normalizedProp, val, errors);
          finalStyles.set(prop, val);
        });
      }
    });
    return finalStyles;
  }
};
function buildTrigger(name, ast, normalizer) {
  return new AnimationTrigger(name, ast, normalizer);
}
var AnimationTrigger = class {
  constructor(name, ast, _normalizer) {
    this.name = name;
    this.ast = ast;
    this._normalizer = _normalizer;
    this.transitionFactories = [];
    this.states = /* @__PURE__ */ new Map();
    ast.states.forEach((ast2) => {
      const defaultParams = ast2.options && ast2.options.params || {};
      this.states.set(ast2.name, new AnimationStateStyles(ast2.style, defaultParams, _normalizer));
    });
    balanceProperties(this.states, "true", "1");
    balanceProperties(this.states, "false", "0");
    ast.transitions.forEach((ast2) => {
      this.transitionFactories.push(new AnimationTransitionFactory(name, ast2, this.states));
    });
    this.fallbackTransition = createFallbackTransition(name, this.states, this._normalizer);
  }
  get containsQueries() {
    return this.ast.queryCount > 0;
  }
  matchTransition(currentState, nextState, element, params) {
    const entry = this.transitionFactories.find((f) => f.match(currentState, nextState, element, params));
    return entry || null;
  }
  matchStyles(currentState, params, errors) {
    return this.fallbackTransition.buildStyles(currentState, params, errors);
  }
};
function createFallbackTransition(triggerName, states, normalizer) {
  const matchers = [(fromState, toState) => true];
  const animation = {
    type: AnimationMetadataType.Sequence,
    steps: [],
    options: null
  };
  const transition = {
    type: AnimationMetadataType.Transition,
    animation,
    matchers,
    options: null,
    queryCount: 0,
    depCount: 0
  };
  return new AnimationTransitionFactory(triggerName, transition, states);
}
function balanceProperties(stateMap, key1, key2) {
  if (stateMap.has(key1)) {
    if (!stateMap.has(key2)) {
      stateMap.set(key2, stateMap.get(key1));
    }
  } else if (stateMap.has(key2)) {
    stateMap.set(key1, stateMap.get(key2));
  }
}
var EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();
var TimelineAnimationEngine = class {
  constructor(bodyNode, _driver, _normalizer) {
    this.bodyNode = bodyNode;
    this._driver = _driver;
    this._normalizer = _normalizer;
    this._animations = /* @__PURE__ */ new Map();
    this._playersById = /* @__PURE__ */ new Map();
    this.players = [];
  }
  register(id, metadata) {
    const errors = [];
    const warnings = [];
    const ast = buildAnimationAst(this._driver, metadata, errors, warnings);
    if (errors.length) {
      throw registerFailed(errors);
    } else {
      if (warnings.length) {
        warnRegister(warnings);
      }
      this._animations.set(id, ast);
    }
  }
  _buildPlayer(i, preStyles, postStyles) {
    const element = i.element;
    const keyframes = normalizeKeyframes$1(this._normalizer, i.keyframes, preStyles, postStyles);
    return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, [], true);
  }
  create(id, element, options = {}) {
    const errors = [];
    const ast = this._animations.get(id);
    let instructions;
    const autoStylesMap = /* @__PURE__ */ new Map();
    if (ast) {
      instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, /* @__PURE__ */ new Map(), /* @__PURE__ */ new Map(), options, EMPTY_INSTRUCTION_MAP, errors);
      instructions.forEach((inst) => {
        const styles = getOrSetDefaultValue(autoStylesMap, inst.element, /* @__PURE__ */ new Map());
        inst.postStyleProps.forEach((prop) => styles.set(prop, null));
      });
    } else {
      errors.push(missingOrDestroyedAnimation());
      instructions = [];
    }
    if (errors.length) {
      throw createAnimationFailed(errors);
    }
    autoStylesMap.forEach((styles, element2) => {
      styles.forEach((_, prop) => {
        styles.set(prop, this._driver.computeStyle(element2, prop, AUTO_STYLE));
      });
    });
    const players = instructions.map((i) => {
      const styles = autoStylesMap.get(i.element);
      return this._buildPlayer(i, /* @__PURE__ */ new Map(), styles);
    });
    const player = optimizeGroupPlayer(players);
    this._playersById.set(id, player);
    player.onDestroy(() => this.destroy(id));
    this.players.push(player);
    return player;
  }
  destroy(id) {
    const player = this._getPlayer(id);
    player.destroy();
    this._playersById.delete(id);
    const index = this.players.indexOf(player);
    if (index >= 0) {
      this.players.splice(index, 1);
    }
  }
  _getPlayer(id) {
    const player = this._playersById.get(id);
    if (!player) {
      throw missingPlayer(id);
    }
    return player;
  }
  listen(id, element, eventName, callback) {
    const baseEvent = makeAnimationEvent(element, "", "", "");
    listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);
    return () => {
    };
  }
  command(id, element, command, args) {
    if (command == "register") {
      this.register(id, args[0]);
      return;
    }
    if (command == "create") {
      const options = args[0] || {};
      this.create(id, element, options);
      return;
    }
    const player = this._getPlayer(id);
    switch (command) {
      case "play":
        player.play();
        break;
      case "pause":
        player.pause();
        break;
      case "reset":
        player.reset();
        break;
      case "restart":
        player.restart();
        break;
      case "finish":
        player.finish();
        break;
      case "init":
        player.init();
        break;
      case "setPosition":
        player.setPosition(parseFloat(args[0]));
        break;
      case "destroy":
        this.destroy(id);
        break;
    }
  }
};
var QUEUED_CLASSNAME = "ng-animate-queued";
var QUEUED_SELECTOR = ".ng-animate-queued";
var DISABLED_CLASSNAME = "ng-animate-disabled";
var DISABLED_SELECTOR = ".ng-animate-disabled";
var STAR_CLASSNAME = "ng-star-inserted";
var STAR_SELECTOR = ".ng-star-inserted";
var EMPTY_PLAYER_ARRAY = [];
var NULL_REMOVAL_STATE = {
  namespaceId: "",
  setForRemoval: false,
  setForMove: false,
  hasAnimation: false,
  removedBeforeQueried: false
};
var NULL_REMOVED_QUERIED_STATE = {
  namespaceId: "",
  setForMove: false,
  setForRemoval: false,
  hasAnimation: false,
  removedBeforeQueried: true
};
var REMOVAL_FLAG = "__ng_removed";
var StateValue = class {
  get params() {
    return this.options.params;
  }
  constructor(input2, namespaceId = "") {
    this.namespaceId = namespaceId;
    const isObj = input2 && input2.hasOwnProperty("value");
    const value = isObj ? input2["value"] : input2;
    this.value = normalizeTriggerValue(value);
    if (isObj) {
      const _a = input2, {
        value: value2
      } = _a, options = __objRest(_a, [
        "value"
      ]);
      this.options = options;
    } else {
      this.options = {};
    }
    if (!this.options.params) {
      this.options.params = {};
    }
  }
  absorbOptions(options) {
    const newParams = options.params;
    if (newParams) {
      const oldParams = this.options.params;
      Object.keys(newParams).forEach((prop) => {
        if (oldParams[prop] == null) {
          oldParams[prop] = newParams[prop];
        }
      });
    }
  }
};
var VOID_VALUE = "void";
var DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);
var AnimationTransitionNamespace = class {
  constructor(id, hostElement, _engine) {
    this.id = id;
    this.hostElement = hostElement;
    this._engine = _engine;
    this.players = [];
    this._triggers = /* @__PURE__ */ new Map();
    this._queue = [];
    this._elementListeners = /* @__PURE__ */ new Map();
    this._hostClassName = "ng-tns-" + id;
    addClass(hostElement, this._hostClassName);
  }
  listen(element, name, phase, callback) {
    if (!this._triggers.has(name)) {
      throw missingTrigger(phase, name);
    }
    if (phase == null || phase.length == 0) {
      throw missingEvent(name);
    }
    if (!isTriggerEventValid(phase)) {
      throw unsupportedTriggerEvent(phase, name);
    }
    const listeners = getOrSetDefaultValue(this._elementListeners, element, []);
    const data = {
      name,
      phase,
      callback
    };
    listeners.push(data);
    const triggersWithStates = getOrSetDefaultValue(this._engine.statesByElement, element, /* @__PURE__ */ new Map());
    if (!triggersWithStates.has(name)) {
      addClass(element, NG_TRIGGER_CLASSNAME);
      addClass(element, NG_TRIGGER_CLASSNAME + "-" + name);
      triggersWithStates.set(name, DEFAULT_STATE_VALUE);
    }
    return () => {
      this._engine.afterFlush(() => {
        const index = listeners.indexOf(data);
        if (index >= 0) {
          listeners.splice(index, 1);
        }
        if (!this._triggers.has(name)) {
          triggersWithStates.delete(name);
        }
      });
    };
  }
  register(name, ast) {
    if (this._triggers.has(name)) {
      return false;
    } else {
      this._triggers.set(name, ast);
      return true;
    }
  }
  _getTrigger(name) {
    const trigger = this._triggers.get(name);
    if (!trigger) {
      throw unregisteredTrigger(name);
    }
    return trigger;
  }
  trigger(element, triggerName, value, defaultToFallback = true) {
    const trigger = this._getTrigger(triggerName);
    const player = new TransitionAnimationPlayer(this.id, triggerName, element);
    let triggersWithStates = this._engine.statesByElement.get(element);
    if (!triggersWithStates) {
      addClass(element, NG_TRIGGER_CLASSNAME);
      addClass(element, NG_TRIGGER_CLASSNAME + "-" + triggerName);
      this._engine.statesByElement.set(element, triggersWithStates = /* @__PURE__ */ new Map());
    }
    let fromState = triggersWithStates.get(triggerName);
    const toState = new StateValue(value, this.id);
    const isObj = value && value.hasOwnProperty("value");
    if (!isObj && fromState) {
      toState.absorbOptions(fromState.options);
    }
    triggersWithStates.set(triggerName, toState);
    if (!fromState) {
      fromState = DEFAULT_STATE_VALUE;
    }
    const isRemoval = toState.value === VOID_VALUE;
    if (!isRemoval && fromState.value === toState.value) {
      if (!objEquals(fromState.params, toState.params)) {
        const errors = [];
        const fromStyles = trigger.matchStyles(fromState.value, fromState.params, errors);
        const toStyles = trigger.matchStyles(toState.value, toState.params, errors);
        if (errors.length) {
          this._engine.reportError(errors);
        } else {
          this._engine.afterFlush(() => {
            eraseStyles(element, fromStyles);
            setStyles(element, toStyles);
          });
        }
      }
      return;
    }
    const playersOnElement = getOrSetDefaultValue(this._engine.playersByElement, element, []);
    playersOnElement.forEach((player2) => {
      if (player2.namespaceId == this.id && player2.triggerName == triggerName && player2.queued) {
        player2.destroy();
      }
    });
    let transition = trigger.matchTransition(fromState.value, toState.value, element, toState.params);
    let isFallbackTransition = false;
    if (!transition) {
      if (!defaultToFallback) return;
      transition = trigger.fallbackTransition;
      isFallbackTransition = true;
    }
    this._engine.totalQueuedPlayers++;
    this._queue.push({
      element,
      triggerName,
      transition,
      fromState,
      toState,
      player,
      isFallbackTransition
    });
    if (!isFallbackTransition) {
      addClass(element, QUEUED_CLASSNAME);
      player.onStart(() => {
        removeClass(element, QUEUED_CLASSNAME);
      });
    }
    player.onDone(() => {
      let index = this.players.indexOf(player);
      if (index >= 0) {
        this.players.splice(index, 1);
      }
      const players = this._engine.playersByElement.get(element);
      if (players) {
        let index2 = players.indexOf(player);
        if (index2 >= 0) {
          players.splice(index2, 1);
        }
      }
    });
    this.players.push(player);
    playersOnElement.push(player);
    return player;
  }
  deregister(name) {
    this._triggers.delete(name);
    this._engine.statesByElement.forEach((stateMap) => stateMap.delete(name));
    this._elementListeners.forEach((listeners, element) => {
      this._elementListeners.set(element, listeners.filter((entry) => {
        return entry.name != name;
      }));
    });
  }
  clearElementCache(element) {
    this._engine.statesByElement.delete(element);
    this._elementListeners.delete(element);
    const elementPlayers = this._engine.playersByElement.get(element);
    if (elementPlayers) {
      elementPlayers.forEach((player) => player.destroy());
      this._engine.playersByElement.delete(element);
    }
  }
  _signalRemovalForInnerTriggers(rootElement, context) {
    const elements = this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true);
    elements.forEach((elm) => {
      if (elm[REMOVAL_FLAG]) return;
      const namespaces = this._engine.fetchNamespacesByElement(elm);
      if (namespaces.size) {
        namespaces.forEach((ns) => ns.triggerLeaveAnimation(elm, context, false, true));
      } else {
        this.clearElementCache(elm);
      }
    });
    this._engine.afterFlushAnimationsDone(() => elements.forEach((elm) => this.clearElementCache(elm)));
  }
  triggerLeaveAnimation(element, context, destroyAfterComplete, defaultToFallback) {
    const triggerStates = this._engine.statesByElement.get(element);
    const previousTriggersValues = /* @__PURE__ */ new Map();
    if (triggerStates) {
      const players = [];
      triggerStates.forEach((state, triggerName) => {
        previousTriggersValues.set(triggerName, state.value);
        if (this._triggers.has(triggerName)) {
          const player = this.trigger(element, triggerName, VOID_VALUE, defaultToFallback);
          if (player) {
            players.push(player);
          }
        }
      });
      if (players.length) {
        this._engine.markElementAsRemoved(this.id, element, true, context, previousTriggersValues);
        if (destroyAfterComplete) {
          optimizeGroupPlayer(players).onDone(() => this._engine.processLeaveNode(element));
        }
        return true;
      }
    }
    return false;
  }
  prepareLeaveAnimationListeners(element) {
    const listeners = this._elementListeners.get(element);
    const elementStates = this._engine.statesByElement.get(element);
    if (listeners && elementStates) {
      const visitedTriggers = /* @__PURE__ */ new Set();
      listeners.forEach((listener) => {
        const triggerName = listener.name;
        if (visitedTriggers.has(triggerName)) return;
        visitedTriggers.add(triggerName);
        const trigger = this._triggers.get(triggerName);
        const transition = trigger.fallbackTransition;
        const fromState = elementStates.get(triggerName) || DEFAULT_STATE_VALUE;
        const toState = new StateValue(VOID_VALUE);
        const player = new TransitionAnimationPlayer(this.id, triggerName, element);
        this._engine.totalQueuedPlayers++;
        this._queue.push({
          element,
          triggerName,
          transition,
          fromState,
          toState,
          player,
          isFallbackTransition: true
        });
      });
    }
  }
  removeNode(element, context) {
    const engine = this._engine;
    if (element.childElementCount) {
      this._signalRemovalForInnerTriggers(element, context);
    }
    if (this.triggerLeaveAnimation(element, context, true)) return;
    let containsPotentialParentTransition = false;
    if (engine.totalAnimations) {
      const currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : [];
      if (currentPlayers && currentPlayers.length) {
        containsPotentialParentTransition = true;
      } else {
        let parent = element;
        while (parent = parent.parentNode) {
          const triggers = engine.statesByElement.get(parent);
          if (triggers) {
            containsPotentialParentTransition = true;
            break;
          }
        }
      }
    }
    this.prepareLeaveAnimationListeners(element);
    if (containsPotentialParentTransition) {
      engine.markElementAsRemoved(this.id, element, false, context);
    } else {
      const removalFlag = element[REMOVAL_FLAG];
      if (!removalFlag || removalFlag === NULL_REMOVAL_STATE) {
        engine.afterFlush(() => this.clearElementCache(element));
        engine.destroyInnerAnimations(element);
        engine._onRemovalComplete(element, context);
      }
    }
  }
  insertNode(element, parent) {
    addClass(element, this._hostClassName);
  }
  drainQueuedTransitions(microtaskId) {
    const instructions = [];
    this._queue.forEach((entry) => {
      const player = entry.player;
      if (player.destroyed) return;
      const element = entry.element;
      const listeners = this._elementListeners.get(element);
      if (listeners) {
        listeners.forEach((listener) => {
          if (listener.name == entry.triggerName) {
            const baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);
            baseEvent["_data"] = microtaskId;
            listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);
          }
        });
      }
      if (player.markedForDestroy) {
        this._engine.afterFlush(() => {
          player.destroy();
        });
      } else {
        instructions.push(entry);
      }
    });
    this._queue = [];
    return instructions.sort((a, b) => {
      const d0 = a.transition.ast.depCount;
      const d1 = b.transition.ast.depCount;
      if (d0 == 0 || d1 == 0) {
        return d0 - d1;
      }
      return this._engine.driver.containsElement(a.element, b.element) ? 1 : -1;
    });
  }
  destroy(context) {
    this.players.forEach((p) => p.destroy());
    this._signalRemovalForInnerTriggers(this.hostElement, context);
  }
};
var TransitionAnimationEngine = class {
  /** @internal */
  _onRemovalComplete(element, context) {
    this.onRemovalComplete(element, context);
  }
  constructor(bodyNode, driver, _normalizer) {
    this.bodyNode = bodyNode;
    this.driver = driver;
    this._normalizer = _normalizer;
    this.players = [];
    this.newHostElements = /* @__PURE__ */ new Map();
    this.playersByElement = /* @__PURE__ */ new Map();
    this.playersByQueriedElement = /* @__PURE__ */ new Map();
    this.statesByElement = /* @__PURE__ */ new Map();
    this.disabledNodes = /* @__PURE__ */ new Set();
    this.totalAnimations = 0;
    this.totalQueuedPlayers = 0;
    this._namespaceLookup = {};
    this._namespaceList = [];
    this._flushFns = [];
    this._whenQuietFns = [];
    this.namespacesByHostElement = /* @__PURE__ */ new Map();
    this.collectedEnterElements = [];
    this.collectedLeaveElements = [];
    this.onRemovalComplete = (element, context) => {
    };
  }
  get queuedPlayers() {
    const players = [];
    this._namespaceList.forEach((ns) => {
      ns.players.forEach((player) => {
        if (player.queued) {
          players.push(player);
        }
      });
    });
    return players;
  }
  createNamespace(namespaceId, hostElement) {
    const ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);
    if (this.bodyNode && this.driver.containsElement(this.bodyNode, hostElement)) {
      this._balanceNamespaceList(ns, hostElement);
    } else {
      this.newHostElements.set(hostElement, ns);
      this.collectEnterElement(hostElement);
    }
    return this._namespaceLookup[namespaceId] = ns;
  }
  _balanceNamespaceList(ns, hostElement) {
    const namespaceList = this._namespaceList;
    const namespacesByHostElement = this.namespacesByHostElement;
    const limit = namespaceList.length - 1;
    if (limit >= 0) {
      let found = false;
      let ancestor = this.driver.getParentElement(hostElement);
      while (ancestor) {
        const ancestorNs = namespacesByHostElement.get(ancestor);
        if (ancestorNs) {
          const index = namespaceList.indexOf(ancestorNs);
          namespaceList.splice(index + 1, 0, ns);
          found = true;
          break;
        }
        ancestor = this.driver.getParentElement(ancestor);
      }
      if (!found) {
        namespaceList.unshift(ns);
      }
    } else {
      namespaceList.push(ns);
    }
    namespacesByHostElement.set(hostElement, ns);
    return ns;
  }
  register(namespaceId, hostElement) {
    let ns = this._namespaceLookup[namespaceId];
    if (!ns) {
      ns = this.createNamespace(namespaceId, hostElement);
    }
    return ns;
  }
  registerTrigger(namespaceId, name, trigger) {
    let ns = this._namespaceLookup[namespaceId];
    if (ns && ns.register(name, trigger)) {
      this.totalAnimations++;
    }
  }
  destroy(namespaceId, context) {
    if (!namespaceId) return;
    this.afterFlush(() => {
    });
    this.afterFlushAnimationsDone(() => {
      const ns = this._fetchNamespace(namespaceId);
      this.namespacesByHostElement.delete(ns.hostElement);
      const index = this._namespaceList.indexOf(ns);
      if (index >= 0) {
        this._namespaceList.splice(index, 1);
      }
      ns.destroy(context);
      delete this._namespaceLookup[namespaceId];
    });
  }
  _fetchNamespace(id) {
    return this._namespaceLookup[id];
  }
  fetchNamespacesByElement(element) {
    const namespaces = /* @__PURE__ */ new Set();
    const elementStates = this.statesByElement.get(element);
    if (elementStates) {
      for (let stateValue of elementStates.values()) {
        if (stateValue.namespaceId) {
          const ns = this._fetchNamespace(stateValue.namespaceId);
          if (ns) {
            namespaces.add(ns);
          }
        }
      }
    }
    return namespaces;
  }
  trigger(namespaceId, element, name, value) {
    if (isElementNode(element)) {
      const ns = this._fetchNamespace(namespaceId);
      if (ns) {
        ns.trigger(element, name, value);
        return true;
      }
    }
    return false;
  }
  insertNode(namespaceId, element, parent, insertBefore) {
    if (!isElementNode(element)) return;
    const details = element[REMOVAL_FLAG];
    if (details && details.setForRemoval) {
      details.setForRemoval = false;
      details.setForMove = true;
      const index = this.collectedLeaveElements.indexOf(element);
      if (index >= 0) {
        this.collectedLeaveElements.splice(index, 1);
      }
    }
    if (namespaceId) {
      const ns = this._fetchNamespace(namespaceId);
      if (ns) {
        ns.insertNode(element, parent);
      }
    }
    if (insertBefore) {
      this.collectEnterElement(element);
    }
  }
  collectEnterElement(element) {
    this.collectedEnterElements.push(element);
  }
  markElementAsDisabled(element, value) {
    if (value) {
      if (!this.disabledNodes.has(element)) {
        this.disabledNodes.add(element);
        addClass(element, DISABLED_CLASSNAME);
      }
    } else if (this.disabledNodes.has(element)) {
      this.disabledNodes.delete(element);
      removeClass(element, DISABLED_CLASSNAME);
    }
  }
  removeNode(namespaceId, element, context) {
    if (isElementNode(element)) {
      const ns = namespaceId ? this._fetchNamespace(namespaceId) : null;
      if (ns) {
        ns.removeNode(element, context);
      } else {
        this.markElementAsRemoved(namespaceId, element, false, context);
      }
      const hostNS = this.namespacesByHostElement.get(element);
      if (hostNS && hostNS.id !== namespaceId) {
        hostNS.removeNode(element, context);
      }
    } else {
      this._onRemovalComplete(element, context);
    }
  }
  markElementAsRemoved(namespaceId, element, hasAnimation, context, previousTriggersValues) {
    this.collectedLeaveElements.push(element);
    element[REMOVAL_FLAG] = {
      namespaceId,
      setForRemoval: context,
      hasAnimation,
      removedBeforeQueried: false,
      previousTriggersValues
    };
  }
  listen(namespaceId, element, name, phase, callback) {
    if (isElementNode(element)) {
      return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);
    }
    return () => {
    };
  }
  _buildInstruction(entry, subTimelines, enterClassName, leaveClassName, skipBuildAst) {
    return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines, skipBuildAst);
  }
  destroyInnerAnimations(containerElement) {
    let elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);
    elements.forEach((element) => this.destroyActiveAnimationsForElement(element));
    if (this.playersByQueriedElement.size == 0) return;
    elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);
    elements.forEach((element) => this.finishActiveQueriedAnimationOnElement(element));
  }
  destroyActiveAnimationsForElement(element) {
    const players = this.playersByElement.get(element);
    if (players) {
      players.forEach((player) => {
        if (player.queued) {
          player.markedForDestroy = true;
        } else {
          player.destroy();
        }
      });
    }
  }
  finishActiveQueriedAnimationOnElement(element) {
    const players = this.playersByQueriedElement.get(element);
    if (players) {
      players.forEach((player) => player.finish());
    }
  }
  whenRenderingDone() {
    return new Promise((resolve) => {
      if (this.players.length) {
        return optimizeGroupPlayer(this.players).onDone(() => resolve());
      } else {
        resolve();
      }
    });
  }
  processLeaveNode(element) {
    const details = element[REMOVAL_FLAG];
    if (details && details.setForRemoval) {
      element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;
      if (details.namespaceId) {
        this.destroyInnerAnimations(element);
        const ns = this._fetchNamespace(details.namespaceId);
        if (ns) {
          ns.clearElementCache(element);
        }
      }
      this._onRemovalComplete(element, details.setForRemoval);
    }
    if (element.classList?.contains(DISABLED_CLASSNAME)) {
      this.markElementAsDisabled(element, false);
    }
    this.driver.query(element, DISABLED_SELECTOR, true).forEach((node) => {
      this.markElementAsDisabled(node, false);
    });
  }
  flush(microtaskId = -1) {
    let players = [];
    if (this.newHostElements.size) {
      this.newHostElements.forEach((ns, element) => this._balanceNamespaceList(ns, element));
      this.newHostElements.clear();
    }
    if (this.totalAnimations && this.collectedEnterElements.length) {
      for (let i = 0; i < this.collectedEnterElements.length; i++) {
        const elm = this.collectedEnterElements[i];
        addClass(elm, STAR_CLASSNAME);
      }
    }
    if (this._namespaceList.length && (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
      const cleanupFns = [];
      try {
        players = this._flushAnimations(cleanupFns, microtaskId);
      } finally {
        for (let i = 0; i < cleanupFns.length; i++) {
          cleanupFns[i]();
        }
      }
    } else {
      for (let i = 0; i < this.collectedLeaveElements.length; i++) {
        const element = this.collectedLeaveElements[i];
        this.processLeaveNode(element);
      }
    }
    this.totalQueuedPlayers = 0;
    this.collectedEnterElements.length = 0;
    this.collectedLeaveElements.length = 0;
    this._flushFns.forEach((fn) => fn());
    this._flushFns = [];
    if (this._whenQuietFns.length) {
      const quietFns = this._whenQuietFns;
      this._whenQuietFns = [];
      if (players.length) {
        optimizeGroupPlayer(players).onDone(() => {
          quietFns.forEach((fn) => fn());
        });
      } else {
        quietFns.forEach((fn) => fn());
      }
    }
  }
  reportError(errors) {
    throw triggerTransitionsFailed(errors);
  }
  _flushAnimations(cleanupFns, microtaskId) {
    const subTimelines = new ElementInstructionMap();
    const skippedPlayers = [];
    const skippedPlayersMap = /* @__PURE__ */ new Map();
    const queuedInstructions = [];
    const queriedElements = /* @__PURE__ */ new Map();
    const allPreStyleElements = /* @__PURE__ */ new Map();
    const allPostStyleElements = /* @__PURE__ */ new Map();
    const disabledElementsSet = /* @__PURE__ */ new Set();
    this.disabledNodes.forEach((node) => {
      disabledElementsSet.add(node);
      const nodesThatAreDisabled = this.driver.query(node, QUEUED_SELECTOR, true);
      for (let i2 = 0; i2 < nodesThatAreDisabled.length; i2++) {
        disabledElementsSet.add(nodesThatAreDisabled[i2]);
      }
    });
    const bodyNode = this.bodyNode;
    const allTriggerElements = Array.from(this.statesByElement.keys());
    const enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements);
    const enterNodeMapIds = /* @__PURE__ */ new Map();
    let i = 0;
    enterNodeMap.forEach((nodes, root) => {
      const className = ENTER_CLASSNAME + i++;
      enterNodeMapIds.set(root, className);
      nodes.forEach((node) => addClass(node, className));
    });
    const allLeaveNodes = [];
    const mergedLeaveNodes = /* @__PURE__ */ new Set();
    const leaveNodesWithoutAnimations = /* @__PURE__ */ new Set();
    for (let i2 = 0; i2 < this.collectedLeaveElements.length; i2++) {
      const element = this.collectedLeaveElements[i2];
      const details = element[REMOVAL_FLAG];
      if (details && details.setForRemoval) {
        allLeaveNodes.push(element);
        mergedLeaveNodes.add(element);
        if (details.hasAnimation) {
          this.driver.query(element, STAR_SELECTOR, true).forEach((elm) => mergedLeaveNodes.add(elm));
        } else {
          leaveNodesWithoutAnimations.add(element);
        }
      }
    }
    const leaveNodeMapIds = /* @__PURE__ */ new Map();
    const leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));
    leaveNodeMap.forEach((nodes, root) => {
      const className = LEAVE_CLASSNAME + i++;
      leaveNodeMapIds.set(root, className);
      nodes.forEach((node) => addClass(node, className));
    });
    cleanupFns.push(() => {
      enterNodeMap.forEach((nodes, root) => {
        const className = enterNodeMapIds.get(root);
        nodes.forEach((node) => removeClass(node, className));
      });
      leaveNodeMap.forEach((nodes, root) => {
        const className = leaveNodeMapIds.get(root);
        nodes.forEach((node) => removeClass(node, className));
      });
      allLeaveNodes.forEach((element) => {
        this.processLeaveNode(element);
      });
    });
    const allPlayers = [];
    const erroneousTransitions = [];
    for (let i2 = this._namespaceList.length - 1; i2 >= 0; i2--) {
      const ns = this._namespaceList[i2];
      ns.drainQueuedTransitions(microtaskId).forEach((entry) => {
        const player = entry.player;
        const element = entry.element;
        allPlayers.push(player);
        if (this.collectedEnterElements.length) {
          const details = element[REMOVAL_FLAG];
          if (details && details.setForMove) {
            if (details.previousTriggersValues && details.previousTriggersValues.has(entry.triggerName)) {
              const previousValue = details.previousTriggersValues.get(entry.triggerName);
              const triggersWithStates = this.statesByElement.get(entry.element);
              if (triggersWithStates && triggersWithStates.has(entry.triggerName)) {
                const state = triggersWithStates.get(entry.triggerName);
                state.value = previousValue;
                triggersWithStates.set(entry.triggerName, state);
              }
            }
            player.destroy();
            return;
          }
        }
        const nodeIsOrphaned = !bodyNode || !this.driver.containsElement(bodyNode, element);
        const leaveClassName = leaveNodeMapIds.get(element);
        const enterClassName = enterNodeMapIds.get(element);
        const instruction = this._buildInstruction(entry, subTimelines, enterClassName, leaveClassName, nodeIsOrphaned);
        if (instruction.errors && instruction.errors.length) {
          erroneousTransitions.push(instruction);
          return;
        }
        if (nodeIsOrphaned) {
          player.onStart(() => eraseStyles(element, instruction.fromStyles));
          player.onDestroy(() => setStyles(element, instruction.toStyles));
          skippedPlayers.push(player);
          return;
        }
        if (entry.isFallbackTransition) {
          player.onStart(() => eraseStyles(element, instruction.fromStyles));
          player.onDestroy(() => setStyles(element, instruction.toStyles));
          skippedPlayers.push(player);
          return;
        }
        const timelines = [];
        instruction.timelines.forEach((tl) => {
          tl.stretchStartingKeyframe = true;
          if (!this.disabledNodes.has(tl.element)) {
            timelines.push(tl);
          }
        });
        instruction.timelines = timelines;
        subTimelines.append(element, instruction.timelines);
        const tuple = {
          instruction,
          player,
          element
        };
        queuedInstructions.push(tuple);
        instruction.queriedElements.forEach((element2) => getOrSetDefaultValue(queriedElements, element2, []).push(player));
        instruction.preStyleProps.forEach((stringMap, element2) => {
          if (stringMap.size) {
            let setVal = allPreStyleElements.get(element2);
            if (!setVal) {
              allPreStyleElements.set(element2, setVal = /* @__PURE__ */ new Set());
            }
            stringMap.forEach((_, prop) => setVal.add(prop));
          }
        });
        instruction.postStyleProps.forEach((stringMap, element2) => {
          let setVal = allPostStyleElements.get(element2);
          if (!setVal) {
            allPostStyleElements.set(element2, setVal = /* @__PURE__ */ new Set());
          }
          stringMap.forEach((_, prop) => setVal.add(prop));
        });
      });
    }
    if (erroneousTransitions.length) {
      const errors = [];
      erroneousTransitions.forEach((instruction) => {
        errors.push(transitionFailed(instruction.triggerName, instruction.errors));
      });
      allPlayers.forEach((player) => player.destroy());
      this.reportError(errors);
    }
    const allPreviousPlayersMap = /* @__PURE__ */ new Map();
    const animationElementMap = /* @__PURE__ */ new Map();
    queuedInstructions.forEach((entry) => {
      const element = entry.element;
      if (subTimelines.has(element)) {
        animationElementMap.set(element, element);
        this._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);
      }
    });
    skippedPlayers.forEach((player) => {
      const element = player.element;
      const previousPlayers = this._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);
      previousPlayers.forEach((prevPlayer) => {
        getOrSetDefaultValue(allPreviousPlayersMap, element, []).push(prevPlayer);
        prevPlayer.destroy();
      });
    });
    const replaceNodes = allLeaveNodes.filter((node) => {
      return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);
    });
    const postStylesMap = /* @__PURE__ */ new Map();
    const allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, AUTO_STYLE);
    allLeaveQueriedNodes.forEach((node) => {
      if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {
        replaceNodes.push(node);
      }
    });
    const preStylesMap = /* @__PURE__ */ new Map();
    enterNodeMap.forEach((nodes, root) => {
      cloakAndComputeStyles(preStylesMap, this.driver, new Set(nodes), allPreStyleElements, \u0275PRE_STYLE);
    });
    replaceNodes.forEach((node) => {
      const post = postStylesMap.get(node);
      const pre = preStylesMap.get(node);
      postStylesMap.set(node, new Map([...post?.entries() ?? [], ...pre?.entries() ?? []]));
    });
    const rootPlayers = [];
    const subPlayers = [];
    const NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};
    queuedInstructions.forEach((entry) => {
      const {
        element,
        player,
        instruction
      } = entry;
      if (subTimelines.has(element)) {
        if (disabledElementsSet.has(element)) {
          player.onDestroy(() => setStyles(element, instruction.toStyles));
          player.disabled = true;
          player.overrideTotalTime(instruction.totalTime);
          skippedPlayers.push(player);
          return;
        }
        let parentWithAnimation = NO_PARENT_ANIMATION_ELEMENT_DETECTED;
        if (animationElementMap.size > 1) {
          let elm = element;
          const parentsToAdd = [];
          while (elm = elm.parentNode) {
            const detectedParent = animationElementMap.get(elm);
            if (detectedParent) {
              parentWithAnimation = detectedParent;
              break;
            }
            parentsToAdd.push(elm);
          }
          parentsToAdd.forEach((parent) => animationElementMap.set(parent, parentWithAnimation));
        }
        const innerPlayer = this._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);
        player.setRealPlayer(innerPlayer);
        if (parentWithAnimation === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {
          rootPlayers.push(player);
        } else {
          const parentPlayers = this.playersByElement.get(parentWithAnimation);
          if (parentPlayers && parentPlayers.length) {
            player.parentPlayer = optimizeGroupPlayer(parentPlayers);
          }
          skippedPlayers.push(player);
        }
      } else {
        eraseStyles(element, instruction.fromStyles);
        player.onDestroy(() => setStyles(element, instruction.toStyles));
        subPlayers.push(player);
        if (disabledElementsSet.has(element)) {
          skippedPlayers.push(player);
        }
      }
    });
    subPlayers.forEach((player) => {
      const playersForElement = skippedPlayersMap.get(player.element);
      if (playersForElement && playersForElement.length) {
        const innerPlayer = optimizeGroupPlayer(playersForElement);
        player.setRealPlayer(innerPlayer);
      }
    });
    skippedPlayers.forEach((player) => {
      if (player.parentPlayer) {
        player.syncPlayerEvents(player.parentPlayer);
      } else {
        player.destroy();
      }
    });
    for (let i2 = 0; i2 < allLeaveNodes.length; i2++) {
      const element = allLeaveNodes[i2];
      const details = element[REMOVAL_FLAG];
      removeClass(element, LEAVE_CLASSNAME);
      if (details && details.hasAnimation) continue;
      let players = [];
      if (queriedElements.size) {
        let queriedPlayerResults = queriedElements.get(element);
        if (queriedPlayerResults && queriedPlayerResults.length) {
          players.push(...queriedPlayerResults);
        }
        let queriedInnerElements = this.driver.query(element, NG_ANIMATING_SELECTOR, true);
        for (let j = 0; j < queriedInnerElements.length; j++) {
          let queriedPlayers = queriedElements.get(queriedInnerElements[j]);
          if (queriedPlayers && queriedPlayers.length) {
            players.push(...queriedPlayers);
          }
        }
      }
      const activePlayers = players.filter((p) => !p.destroyed);
      if (activePlayers.length) {
        removeNodesAfterAnimationDone(this, element, activePlayers);
      } else {
        this.processLeaveNode(element);
      }
    }
    allLeaveNodes.length = 0;
    rootPlayers.forEach((player) => {
      this.players.push(player);
      player.onDone(() => {
        player.destroy();
        const index = this.players.indexOf(player);
        this.players.splice(index, 1);
      });
      player.play();
    });
    return rootPlayers;
  }
  afterFlush(callback) {
    this._flushFns.push(callback);
  }
  afterFlushAnimationsDone(callback) {
    this._whenQuietFns.push(callback);
  }
  _getPreviousPlayers(element, isQueriedElement, namespaceId, triggerName, toStateValue) {
    let players = [];
    if (isQueriedElement) {
      const queriedElementPlayers = this.playersByQueriedElement.get(element);
      if (queriedElementPlayers) {
        players = queriedElementPlayers;
      }
    } else {
      const elementPlayers = this.playersByElement.get(element);
      if (elementPlayers) {
        const isRemovalAnimation = !toStateValue || toStateValue == VOID_VALUE;
        elementPlayers.forEach((player) => {
          if (player.queued) return;
          if (!isRemovalAnimation && player.triggerName != triggerName) return;
          players.push(player);
        });
      }
    }
    if (namespaceId || triggerName) {
      players = players.filter((player) => {
        if (namespaceId && namespaceId != player.namespaceId) return false;
        if (triggerName && triggerName != player.triggerName) return false;
        return true;
      });
    }
    return players;
  }
  _beforeAnimationBuild(namespaceId, instruction, allPreviousPlayersMap) {
    const triggerName = instruction.triggerName;
    const rootElement = instruction.element;
    const targetNameSpaceId = instruction.isRemovalTransition ? void 0 : namespaceId;
    const targetTriggerName = instruction.isRemovalTransition ? void 0 : triggerName;
    for (const timelineInstruction of instruction.timelines) {
      const element = timelineInstruction.element;
      const isQueriedElement = element !== rootElement;
      const players = getOrSetDefaultValue(allPreviousPlayersMap, element, []);
      const previousPlayers = this._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);
      previousPlayers.forEach((player) => {
        const realPlayer = player.getRealPlayer();
        if (realPlayer.beforeDestroy) {
          realPlayer.beforeDestroy();
        }
        player.destroy();
        players.push(player);
      });
    }
    eraseStyles(rootElement, instruction.fromStyles);
  }
  _buildAnimation(namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {
    const triggerName = instruction.triggerName;
    const rootElement = instruction.element;
    const allQueriedPlayers = [];
    const allConsumedElements = /* @__PURE__ */ new Set();
    const allSubElements = /* @__PURE__ */ new Set();
    const allNewPlayers = instruction.timelines.map((timelineInstruction) => {
      const element = timelineInstruction.element;
      allConsumedElements.add(element);
      const details = element[REMOVAL_FLAG];
      if (details && details.removedBeforeQueried) return new NoopAnimationPlayer(timelineInstruction.duration, timelineInstruction.delay);
      const isQueriedElement = element !== rootElement;
      const previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY).map((p) => p.getRealPlayer())).filter((p) => {
        const pp = p;
        return pp.element ? pp.element === element : false;
      });
      const preStyles = preStylesMap.get(element);
      const postStyles = postStylesMap.get(element);
      const keyframes = normalizeKeyframes$1(this._normalizer, timelineInstruction.keyframes, preStyles, postStyles);
      const player2 = this._buildPlayer(timelineInstruction, keyframes, previousPlayers);
      if (timelineInstruction.subTimeline && skippedPlayersMap) {
        allSubElements.add(element);
      }
      if (isQueriedElement) {
        const wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);
        wrappedPlayer.setRealPlayer(player2);
        allQueriedPlayers.push(wrappedPlayer);
      }
      return player2;
    });
    allQueriedPlayers.forEach((player2) => {
      getOrSetDefaultValue(this.playersByQueriedElement, player2.element, []).push(player2);
      player2.onDone(() => deleteOrUnsetInMap(this.playersByQueriedElement, player2.element, player2));
    });
    allConsumedElements.forEach((element) => addClass(element, NG_ANIMATING_CLASSNAME));
    const player = optimizeGroupPlayer(allNewPlayers);
    player.onDestroy(() => {
      allConsumedElements.forEach((element) => removeClass(element, NG_ANIMATING_CLASSNAME));
      setStyles(rootElement, instruction.toStyles);
    });
    allSubElements.forEach((element) => {
      getOrSetDefaultValue(skippedPlayersMap, element, []).push(player);
    });
    return player;
  }
  _buildPlayer(instruction, keyframes, previousPlayers) {
    if (keyframes.length > 0) {
      return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);
    }
    return new NoopAnimationPlayer(instruction.duration, instruction.delay);
  }
};
var TransitionAnimationPlayer = class {
  constructor(namespaceId, triggerName, element) {
    this.namespaceId = namespaceId;
    this.triggerName = triggerName;
    this.element = element;
    this._player = new NoopAnimationPlayer();
    this._containsRealPlayer = false;
    this._queuedCallbacks = /* @__PURE__ */ new Map();
    this.destroyed = false;
    this.parentPlayer = null;
    this.markedForDestroy = false;
    this.disabled = false;
    this.queued = true;
    this.totalTime = 0;
  }
  setRealPlayer(player) {
    if (this._containsRealPlayer) return;
    this._player = player;
    this._queuedCallbacks.forEach((callbacks, phase) => {
      callbacks.forEach((callback) => listenOnPlayer(player, phase, void 0, callback));
    });
    this._queuedCallbacks.clear();
    this._containsRealPlayer = true;
    this.overrideTotalTime(player.totalTime);
    this.queued = false;
  }
  getRealPlayer() {
    return this._player;
  }
  overrideTotalTime(totalTime) {
    this.totalTime = totalTime;
  }
  syncPlayerEvents(player) {
    const p = this._player;
    if (p.triggerCallback) {
      player.onStart(() => p.triggerCallback("start"));
    }
    player.onDone(() => this.finish());
    player.onDestroy(() => this.destroy());
  }
  _queueEvent(name, callback) {
    getOrSetDefaultValue(this._queuedCallbacks, name, []).push(callback);
  }
  onDone(fn) {
    if (this.queued) {
      this._queueEvent("done", fn);
    }
    this._player.onDone(fn);
  }
  onStart(fn) {
    if (this.queued) {
      this._queueEvent("start", fn);
    }
    this._player.onStart(fn);
  }
  onDestroy(fn) {
    if (this.queued) {
      this._queueEvent("destroy", fn);
    }
    this._player.onDestroy(fn);
  }
  init() {
    this._player.init();
  }
  hasStarted() {
    return this.queued ? false : this._player.hasStarted();
  }
  play() {
    !this.queued && this._player.play();
  }
  pause() {
    !this.queued && this._player.pause();
  }
  restart() {
    !this.queued && this._player.restart();
  }
  finish() {
    this._player.finish();
  }
  destroy() {
    this.destroyed = true;
    this._player.destroy();
  }
  reset() {
    !this.queued && this._player.reset();
  }
  setPosition(p) {
    if (!this.queued) {
      this._player.setPosition(p);
    }
  }
  getPosition() {
    return this.queued ? 0 : this._player.getPosition();
  }
  /** @internal */
  triggerCallback(phaseName) {
    const p = this._player;
    if (p.triggerCallback) {
      p.triggerCallback(phaseName);
    }
  }
};
function deleteOrUnsetInMap(map2, key, value) {
  let currentValues = map2.get(key);
  if (currentValues) {
    if (currentValues.length) {
      const index = currentValues.indexOf(value);
      currentValues.splice(index, 1);
    }
    if (currentValues.length == 0) {
      map2.delete(key);
    }
  }
  return currentValues;
}
function normalizeTriggerValue(value) {
  return value != null ? value : null;
}
function isElementNode(node) {
  return node && node["nodeType"] === 1;
}
function isTriggerEventValid(eventName) {
  return eventName == "start" || eventName == "done";
}
function cloakElement(element, value) {
  const oldValue = element.style.display;
  element.style.display = value != null ? value : "none";
  return oldValue;
}
function cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {
  const cloakVals = [];
  elements.forEach((element) => cloakVals.push(cloakElement(element)));
  const failedElements = [];
  elementPropsMap.forEach((props, element) => {
    const styles = /* @__PURE__ */ new Map();
    props.forEach((prop) => {
      const value = driver.computeStyle(element, prop, defaultStyle);
      styles.set(prop, value);
      if (!value || value.length == 0) {
        element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;
        failedElements.push(element);
      }
    });
    valuesMap.set(element, styles);
  });
  let i = 0;
  elements.forEach((element) => cloakElement(element, cloakVals[i++]));
  return failedElements;
}
function buildRootMap(roots, nodes) {
  const rootMap = /* @__PURE__ */ new Map();
  roots.forEach((root) => rootMap.set(root, []));
  if (nodes.length == 0) return rootMap;
  const NULL_NODE = 1;
  const nodeSet = new Set(nodes);
  const localRootMap = /* @__PURE__ */ new Map();
  function getRoot(node) {
    if (!node) return NULL_NODE;
    let root = localRootMap.get(node);
    if (root) return root;
    const parent = node.parentNode;
    if (rootMap.has(parent)) {
      root = parent;
    } else if (nodeSet.has(parent)) {
      root = NULL_NODE;
    } else {
      root = getRoot(parent);
    }
    localRootMap.set(node, root);
    return root;
  }
  nodes.forEach((node) => {
    const root = getRoot(node);
    if (root !== NULL_NODE) {
      rootMap.get(root).push(node);
    }
  });
  return rootMap;
}
function addClass(element, className) {
  element.classList?.add(className);
}
function removeClass(element, className) {
  element.classList?.remove(className);
}
function removeNodesAfterAnimationDone(engine, element, players) {
  optimizeGroupPlayer(players).onDone(() => engine.processLeaveNode(element));
}
function flattenGroupPlayers(players) {
  const finalPlayers = [];
  _flattenGroupPlayersRecur(players, finalPlayers);
  return finalPlayers;
}
function _flattenGroupPlayersRecur(players, finalPlayers) {
  for (let i = 0; i < players.length; i++) {
    const player = players[i];
    if (player instanceof AnimationGroupPlayer) {
      _flattenGroupPlayersRecur(player.players, finalPlayers);
    } else {
      finalPlayers.push(player);
    }
  }
}
function objEquals(a, b) {
  const k1 = Object.keys(a);
  const k2 = Object.keys(b);
  if (k1.length != k2.length) return false;
  for (let i = 0; i < k1.length; i++) {
    const prop = k1[i];
    if (!b.hasOwnProperty(prop) || a[prop] !== b[prop]) return false;
  }
  return true;
}
function replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {
  const postEntry = allPostStyleElements.get(element);
  if (!postEntry) return false;
  let preEntry = allPreStyleElements.get(element);
  if (preEntry) {
    postEntry.forEach((data) => preEntry.add(data));
  } else {
    allPreStyleElements.set(element, postEntry);
  }
  allPostStyleElements.delete(element);
  return true;
}
var AnimationEngine = class {
  constructor(doc, _driver, _normalizer) {
    this._driver = _driver;
    this._normalizer = _normalizer;
    this._triggerCache = {};
    this.onRemovalComplete = (element, context) => {
    };
    this._transitionEngine = new TransitionAnimationEngine(doc.body, _driver, _normalizer);
    this._timelineEngine = new TimelineAnimationEngine(doc.body, _driver, _normalizer);
    this._transitionEngine.onRemovalComplete = (element, context) => this.onRemovalComplete(element, context);
  }
  registerTrigger(componentId, namespaceId, hostElement, name, metadata) {
    const cacheKey = componentId + "-" + name;
    let trigger = this._triggerCache[cacheKey];
    if (!trigger) {
      const errors = [];
      const warnings = [];
      const ast = buildAnimationAst(this._driver, metadata, errors, warnings);
      if (errors.length) {
        throw triggerBuildFailed(name, errors);
      }
      if (warnings.length) {
        warnTriggerBuild(name, warnings);
      }
      trigger = buildTrigger(name, ast, this._normalizer);
      this._triggerCache[cacheKey] = trigger;
    }
    this._transitionEngine.registerTrigger(namespaceId, name, trigger);
  }
  register(namespaceId, hostElement) {
    this._transitionEngine.register(namespaceId, hostElement);
  }
  destroy(namespaceId, context) {
    this._transitionEngine.destroy(namespaceId, context);
  }
  onInsert(namespaceId, element, parent, insertBefore) {
    this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);
  }
  onRemove(namespaceId, element, context) {
    this._transitionEngine.removeNode(namespaceId, element, context);
  }
  disableAnimations(element, disable) {
    this._transitionEngine.markElementAsDisabled(element, disable);
  }
  process(namespaceId, element, property, value) {
    if (property.charAt(0) == "@") {
      const [id, action] = parseTimelineCommand(property);
      const args = value;
      this._timelineEngine.command(id, element, action, args);
    } else {
      this._transitionEngine.trigger(namespaceId, element, property, value);
    }
  }
  listen(namespaceId, element, eventName, eventPhase, callback) {
    if (eventName.charAt(0) == "@") {
      const [id, action] = parseTimelineCommand(eventName);
      return this._timelineEngine.listen(id, element, action, callback);
    }
    return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);
  }
  flush(microtaskId = -1) {
    this._transitionEngine.flush(microtaskId);
  }
  get players() {
    return [...this._transitionEngine.players, ...this._timelineEngine.players];
  }
  whenRenderingDone() {
    return this._transitionEngine.whenRenderingDone();
  }
  afterFlushAnimationsDone(cb) {
    this._transitionEngine.afterFlushAnimationsDone(cb);
  }
};
function packageNonAnimatableStyles(element, styles) {
  let startStyles = null;
  let endStyles = null;
  if (Array.isArray(styles) && styles.length) {
    startStyles = filterNonAnimatableStyles(styles[0]);
    if (styles.length > 1) {
      endStyles = filterNonAnimatableStyles(styles[styles.length - 1]);
    }
  } else if (styles instanceof Map) {
    startStyles = filterNonAnimatableStyles(styles);
  }
  return startStyles || endStyles ? new SpecialCasedStyles(element, startStyles, endStyles) : null;
}
var _SpecialCasedStyles = class _SpecialCasedStyles {
  constructor(_element, _startStyles, _endStyles) {
    this._element = _element;
    this._startStyles = _startStyles;
    this._endStyles = _endStyles;
    this._state = 0;
    let initialStyles = _SpecialCasedStyles.initialStylesByElement.get(_element);
    if (!initialStyles) {
      _SpecialCasedStyles.initialStylesByElement.set(_element, initialStyles = /* @__PURE__ */ new Map());
    }
    this._initialStyles = initialStyles;
  }
  start() {
    if (this._state < 1) {
      if (this._startStyles) {
        setStyles(this._element, this._startStyles, this._initialStyles);
      }
      this._state = 1;
    }
  }
  finish() {
    this.start();
    if (this._state < 2) {
      setStyles(this._element, this._initialStyles);
      if (this._endStyles) {
        setStyles(this._element, this._endStyles);
        this._endStyles = null;
      }
      this._state = 1;
    }
  }
  destroy() {
    this.finish();
    if (this._state < 3) {
      _SpecialCasedStyles.initialStylesByElement.delete(this._element);
      if (this._startStyles) {
        eraseStyles(this._element, this._startStyles);
        this._endStyles = null;
      }
      if (this._endStyles) {
        eraseStyles(this._element, this._endStyles);
        this._endStyles = null;
      }
      setStyles(this._element, this._initialStyles);
      this._state = 3;
    }
  }
};
_SpecialCasedStyles.initialStylesByElement = /* @__PURE__ */ new WeakMap();
var SpecialCasedStyles = _SpecialCasedStyles;
function filterNonAnimatableStyles(styles) {
  let result = null;
  styles.forEach((val, prop) => {
    if (isNonAnimatableStyle(prop)) {
      result = result || /* @__PURE__ */ new Map();
      result.set(prop, val);
    }
  });
  return result;
}
function isNonAnimatableStyle(prop) {
  return prop === "display" || prop === "position";
}
var WebAnimationsPlayer = class {
  constructor(element, keyframes, options, _specialStyles) {
    this.element = element;
    this.keyframes = keyframes;
    this.options = options;
    this._specialStyles = _specialStyles;
    this._onDoneFns = [];
    this._onStartFns = [];
    this._onDestroyFns = [];
    this._initialized = false;
    this._finished = false;
    this._started = false;
    this._destroyed = false;
    this._originalOnDoneFns = [];
    this._originalOnStartFns = [];
    this.time = 0;
    this.parentPlayer = null;
    this.currentSnapshot = /* @__PURE__ */ new Map();
    this._duration = options["duration"];
    this._delay = options["delay"] || 0;
    this.time = this._duration + this._delay;
  }
  _onFinish() {
    if (!this._finished) {
      this._finished = true;
      this._onDoneFns.forEach((fn) => fn());
      this._onDoneFns = [];
    }
  }
  init() {
    this._buildPlayer();
    this._preparePlayerBeforeStart();
  }
  _buildPlayer() {
    if (this._initialized) return;
    this._initialized = true;
    const keyframes = this.keyframes;
    this.domPlayer = this._triggerWebAnimation(this.element, keyframes, this.options);
    this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : /* @__PURE__ */ new Map();
    const onFinish = () => this._onFinish();
    this.domPlayer.addEventListener("finish", onFinish);
    this.onDestroy(() => {
      this.domPlayer.removeEventListener("finish", onFinish);
    });
  }
  _preparePlayerBeforeStart() {
    if (this._delay) {
      this._resetDomPlayerState();
    } else {
      this.domPlayer.pause();
    }
  }
  _convertKeyframesToObject(keyframes) {
    const kfs = [];
    keyframes.forEach((frame) => {
      kfs.push(Object.fromEntries(frame));
    });
    return kfs;
  }
  /** @internal */
  _triggerWebAnimation(element, keyframes, options) {
    return element.animate(this._convertKeyframesToObject(keyframes), options);
  }
  onStart(fn) {
    this._originalOnStartFns.push(fn);
    this._onStartFns.push(fn);
  }
  onDone(fn) {
    this._originalOnDoneFns.push(fn);
    this._onDoneFns.push(fn);
  }
  onDestroy(fn) {
    this._onDestroyFns.push(fn);
  }
  play() {
    this._buildPlayer();
    if (!this.hasStarted()) {
      this._onStartFns.forEach((fn) => fn());
      this._onStartFns = [];
      this._started = true;
      if (this._specialStyles) {
        this._specialStyles.start();
      }
    }
    this.domPlayer.play();
  }
  pause() {
    this.init();
    this.domPlayer.pause();
  }
  finish() {
    this.init();
    if (this._specialStyles) {
      this._specialStyles.finish();
    }
    this._onFinish();
    this.domPlayer.finish();
  }
  reset() {
    this._resetDomPlayerState();
    this._destroyed = false;
    this._finished = false;
    this._started = false;
    this._onStartFns = this._originalOnStartFns;
    this._onDoneFns = this._originalOnDoneFns;
  }
  _resetDomPlayerState() {
    if (this.domPlayer) {
      this.domPlayer.cancel();
    }
  }
  restart() {
    this.reset();
    this.play();
  }
  hasStarted() {
    return this._started;
  }
  destroy() {
    if (!this._destroyed) {
      this._destroyed = true;
      this._resetDomPlayerState();
      this._onFinish();
      if (this._specialStyles) {
        this._specialStyles.destroy();
      }
      this._onDestroyFns.forEach((fn) => fn());
      this._onDestroyFns = [];
    }
  }
  setPosition(p) {
    if (this.domPlayer === void 0) {
      this.init();
    }
    this.domPlayer.currentTime = p * this.time;
  }
  getPosition() {
    return +(this.domPlayer.currentTime ?? 0) / this.time;
  }
  get totalTime() {
    return this._delay + this._duration;
  }
  beforeDestroy() {
    const styles = /* @__PURE__ */ new Map();
    if (this.hasStarted()) {
      const finalKeyframe = this._finalKeyframe;
      finalKeyframe.forEach((val, prop) => {
        if (prop !== "offset") {
          styles.set(prop, this._finished ? val : computeStyle(this.element, prop));
        }
      });
    }
    this.currentSnapshot = styles;
  }
  /** @internal */
  triggerCallback(phaseName) {
    const methods = phaseName === "start" ? this._onStartFns : this._onDoneFns;
    methods.forEach((fn) => fn());
    methods.length = 0;
  }
};
var WebAnimationsDriver = class {
  validateStyleProperty(prop) {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      return validateStyleProperty(prop);
    }
    return true;
  }
  validateAnimatableStyleProperty(prop) {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      const cssProp = camelCaseToDashCase(prop);
      return validateWebAnimatableStyleProperty(cssProp);
    }
    return true;
  }
  containsElement(elm1, elm2) {
    return containsElement(elm1, elm2);
  }
  getParentElement(element) {
    return getParentElement(element);
  }
  query(element, selector, multi) {
    return invokeQuery(element, selector, multi);
  }
  computeStyle(element, prop, defaultValue) {
    return computeStyle(element, prop);
  }
  animate(element, keyframes, duration, delay2, easing, previousPlayers = []) {
    const fill = delay2 == 0 ? "both" : "forwards";
    const playerOptions = {
      duration,
      delay: delay2,
      fill
    };
    if (easing) {
      playerOptions["easing"] = easing;
    }
    const previousStyles = /* @__PURE__ */ new Map();
    const previousWebAnimationPlayers = previousPlayers.filter((player) => player instanceof WebAnimationsPlayer);
    if (allowPreviousPlayerStylesMerge(duration, delay2)) {
      previousWebAnimationPlayers.forEach((player) => {
        player.currentSnapshot.forEach((val, prop) => previousStyles.set(prop, val));
      });
    }
    let _keyframes = normalizeKeyframes(keyframes).map((styles) => new Map(styles));
    _keyframes = balancePreviousStylesIntoKeyframes(element, _keyframes, previousStyles);
    const specialStyles = packageNonAnimatableStyles(element, _keyframes);
    return new WebAnimationsPlayer(element, _keyframes, playerOptions, specialStyles);
  }
};
var ANIMATION_PREFIX = "@";
var DISABLE_ANIMATIONS_FLAG = "@.disabled";
var BaseAnimationRenderer = class {
  constructor(namespaceId, delegate, engine, _onDestroy) {
    this.namespaceId = namespaceId;
    this.delegate = delegate;
    this.engine = engine;
    this._onDestroy = _onDestroy;
    this.\u0275type = 0;
  }
  get data() {
    return this.delegate.data;
  }
  destroyNode(node) {
    this.delegate.destroyNode?.(node);
  }
  destroy() {
    this.engine.destroy(this.namespaceId, this.delegate);
    this.engine.afterFlushAnimationsDone(() => {
      queueMicrotask(() => {
        this.delegate.destroy();
      });
    });
    this._onDestroy?.();
  }
  createElement(name, namespace) {
    return this.delegate.createElement(name, namespace);
  }
  createComment(value) {
    return this.delegate.createComment(value);
  }
  createText(value) {
    return this.delegate.createText(value);
  }
  appendChild(parent, newChild) {
    this.delegate.appendChild(parent, newChild);
    this.engine.onInsert(this.namespaceId, newChild, parent, false);
  }
  insertBefore(parent, newChild, refChild, isMove = true) {
    this.delegate.insertBefore(parent, newChild, refChild);
    this.engine.onInsert(this.namespaceId, newChild, parent, isMove);
  }
  removeChild(parent, oldChild, isHostElement) {
    if (this.parentNode(oldChild)) {
      this.engine.onRemove(this.namespaceId, oldChild, this.delegate);
    }
  }
  selectRootElement(selectorOrNode, preserveContent) {
    return this.delegate.selectRootElement(selectorOrNode, preserveContent);
  }
  parentNode(node) {
    return this.delegate.parentNode(node);
  }
  nextSibling(node) {
    return this.delegate.nextSibling(node);
  }
  setAttribute(el, name, value, namespace) {
    this.delegate.setAttribute(el, name, value, namespace);
  }
  removeAttribute(el, name, namespace) {
    this.delegate.removeAttribute(el, name, namespace);
  }
  addClass(el, name) {
    this.delegate.addClass(el, name);
  }
  removeClass(el, name) {
    this.delegate.removeClass(el, name);
  }
  setStyle(el, style2, value, flags) {
    this.delegate.setStyle(el, style2, value, flags);
  }
  removeStyle(el, style2, flags) {
    this.delegate.removeStyle(el, style2, flags);
  }
  setProperty(el, name, value) {
    if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {
      this.disableAnimations(el, !!value);
    } else {
      this.delegate.setProperty(el, name, value);
    }
  }
  setValue(node, value) {
    this.delegate.setValue(node, value);
  }
  listen(target, eventName, callback) {
    return this.delegate.listen(target, eventName, callback);
  }
  disableAnimations(element, value) {
    this.engine.disableAnimations(element, value);
  }
};
var AnimationRenderer = class extends BaseAnimationRenderer {
  constructor(factory, namespaceId, delegate, engine, onDestroy) {
    super(namespaceId, delegate, engine, onDestroy);
    this.factory = factory;
    this.namespaceId = namespaceId;
  }
  setProperty(el, name, value) {
    if (name.charAt(0) == ANIMATION_PREFIX) {
      if (name.charAt(1) == "." && name == DISABLE_ANIMATIONS_FLAG) {
        value = value === void 0 ? true : !!value;
        this.disableAnimations(el, value);
      } else {
        this.engine.process(this.namespaceId, el, name.slice(1), value);
      }
    } else {
      this.delegate.setProperty(el, name, value);
    }
  }
  listen(target, eventName, callback) {
    if (eventName.charAt(0) == ANIMATION_PREFIX) {
      const element = resolveElementFromTarget(target);
      let name = eventName.slice(1);
      let phase = "";
      if (name.charAt(0) != ANIMATION_PREFIX) {
        [name, phase] = parseTriggerCallbackName(name);
      }
      return this.engine.listen(this.namespaceId, element, name, phase, (event) => {
        const countId = event["_data"] || -1;
        this.factory.scheduleListenerCallback(countId, callback, event);
      });
    }
    return this.delegate.listen(target, eventName, callback);
  }
};
function resolveElementFromTarget(target) {
  switch (target) {
    case "body":
      return document.body;
    case "document":
      return document;
    case "window":
      return window;
    default:
      return target;
  }
}
function parseTriggerCallbackName(triggerName) {
  const dotIndex = triggerName.indexOf(".");
  const trigger = triggerName.substring(0, dotIndex);
  const phase = triggerName.slice(dotIndex + 1);
  return [trigger, phase];
}
var AnimationRendererFactory = class {
  constructor(delegate, engine, _zone) {
    this.delegate = delegate;
    this.engine = engine;
    this._zone = _zone;
    this._currentId = 0;
    this._microtaskId = 1;
    this._animationCallbacksBuffer = [];
    this._rendererCache = /* @__PURE__ */ new Map();
    this._cdRecurDepth = 0;
    engine.onRemovalComplete = (element, delegate2) => {
      delegate2?.removeChild(null, element);
    };
  }
  createRenderer(hostElement, type) {
    const EMPTY_NAMESPACE_ID = "";
    const delegate = this.delegate.createRenderer(hostElement, type);
    if (!hostElement || !type?.data?.["animation"]) {
      const cache = this._rendererCache;
      let renderer = cache.get(delegate);
      if (!renderer) {
        const onRendererDestroy = () => cache.delete(delegate);
        renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine, onRendererDestroy);
        cache.set(delegate, renderer);
      }
      return renderer;
    }
    const componentId = type.id;
    const namespaceId = type.id + "-" + this._currentId;
    this._currentId++;
    this.engine.register(namespaceId, hostElement);
    const registerTrigger = (trigger) => {
      if (Array.isArray(trigger)) {
        trigger.forEach(registerTrigger);
      } else {
        this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger);
      }
    };
    const animationTriggers = type.data["animation"];
    animationTriggers.forEach(registerTrigger);
    return new AnimationRenderer(this, namespaceId, delegate, this.engine);
  }
  begin() {
    this._cdRecurDepth++;
    if (this.delegate.begin) {
      this.delegate.begin();
    }
  }
  _scheduleCountTask() {
    queueMicrotask(() => {
      this._microtaskId++;
    });
  }
  /** @internal */
  scheduleListenerCallback(count, fn, data) {
    if (count >= 0 && count < this._microtaskId) {
      this._zone.run(() => fn(data));
      return;
    }
    const animationCallbacksBuffer = this._animationCallbacksBuffer;
    if (animationCallbacksBuffer.length == 0) {
      queueMicrotask(() => {
        this._zone.run(() => {
          animationCallbacksBuffer.forEach((tuple) => {
            const [fn2, data2] = tuple;
            fn2(data2);
          });
          this._animationCallbacksBuffer = [];
        });
      });
    }
    animationCallbacksBuffer.push([fn, data]);
  }
  end() {
    this._cdRecurDepth--;
    if (this._cdRecurDepth == 0) {
      this._zone.runOutsideAngular(() => {
        this._scheduleCountTask();
        this.engine.flush(this._microtaskId);
      });
    }
    if (this.delegate.end) {
      this.delegate.end();
    }
  }
  whenRenderingDone() {
    return this.engine.whenRenderingDone();
  }
};

// node_modules/@angular/platform-browser/fesm2022/animations.mjs
var _InjectableAnimationEngine = class _InjectableAnimationEngine extends AnimationEngine {
  // The `ApplicationRef` is injected here explicitly to force the dependency ordering.
  // Since the `ApplicationRef` should be created earlier before the `AnimationEngine`, they
  // both have `ngOnDestroy` hooks and `flush()` must be called after all views are destroyed.
  constructor(doc, driver, normalizer) {
    super(doc, driver, normalizer);
  }
  ngOnDestroy() {
    this.flush();
  }
};
_InjectableAnimationEngine.\u0275fac = function InjectableAnimationEngine_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _InjectableAnimationEngine)(\u0275\u0275inject(DOCUMENT), \u0275\u0275inject(AnimationDriver), \u0275\u0275inject(AnimationStyleNormalizer));
};
_InjectableAnimationEngine.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _InjectableAnimationEngine,
  factory: _InjectableAnimationEngine.\u0275fac
});
var InjectableAnimationEngine = _InjectableAnimationEngine;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(InjectableAnimationEngine, [{
    type: Injectable
  }], () => [{
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: AnimationDriver
  }, {
    type: AnimationStyleNormalizer
  }], null);
})();
function instantiateDefaultStyleNormalizer() {
  return new WebAnimationsStyleNormalizer();
}
function instantiateRendererFactory(renderer, engine, zone) {
  return new AnimationRendererFactory(renderer, engine, zone);
}
var SHARED_ANIMATION_PROVIDERS = [{
  provide: AnimationStyleNormalizer,
  useFactory: instantiateDefaultStyleNormalizer
}, {
  provide: AnimationEngine,
  useClass: InjectableAnimationEngine
}, {
  provide: RendererFactory2,
  useFactory: instantiateRendererFactory,
  deps: [DomRendererFactory2, AnimationEngine, NgZone]
}];
var BROWSER_ANIMATIONS_PROVIDERS = [{
  provide: AnimationDriver,
  useFactory: () => new WebAnimationsDriver()
}, {
  provide: ANIMATION_MODULE_TYPE,
  useValue: "BrowserAnimations"
}, ...SHARED_ANIMATION_PROVIDERS];
var BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{
  provide: AnimationDriver,
  useClass: NoopAnimationDriver
}, {
  provide: ANIMATION_MODULE_TYPE,
  useValue: "NoopAnimations"
}, ...SHARED_ANIMATION_PROVIDERS];
var _BrowserAnimationsModule = class _BrowserAnimationsModule {
  /**
   * Configures the module based on the specified object.
   *
   * @param config Object used to configure the behavior of the `BrowserAnimationsModule`.
   * @see {@link BrowserAnimationsModuleConfig}
   *
   * @usageNotes
   * When registering the `BrowserAnimationsModule`, you can use the `withConfig`
   * function as follows:
   * ```
   * @NgModule({
   *   imports: [BrowserAnimationsModule.withConfig(config)]
   * })
   * class MyNgModule {}
   * ```
   */
  static withConfig(config) {
    return {
      ngModule: _BrowserAnimationsModule,
      providers: config.disableAnimations ? BROWSER_NOOP_ANIMATIONS_PROVIDERS : BROWSER_ANIMATIONS_PROVIDERS
    };
  }
};
_BrowserAnimationsModule.\u0275fac = function BrowserAnimationsModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _BrowserAnimationsModule)();
};
_BrowserAnimationsModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _BrowserAnimationsModule
});
_BrowserAnimationsModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: BROWSER_ANIMATIONS_PROVIDERS,
  imports: [BrowserModule]
});
var BrowserAnimationsModule = _BrowserAnimationsModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserAnimationsModule, [{
    type: NgModule,
    args: [{
      exports: [BrowserModule],
      providers: BROWSER_ANIMATIONS_PROVIDERS
    }]
  }], null, null);
})();
function provideAnimations() {
  performanceMarkFeature("NgEagerAnimations");
  return [...BROWSER_ANIMATIONS_PROVIDERS];
}
var _NoopAnimationsModule = class _NoopAnimationsModule {
};
_NoopAnimationsModule.\u0275fac = function NoopAnimationsModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NoopAnimationsModule)();
};
_NoopAnimationsModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NoopAnimationsModule
});
_NoopAnimationsModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,
  imports: [BrowserModule]
});
var NoopAnimationsModule = _NoopAnimationsModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NoopAnimationsModule, [{
    type: NgModule,
    args: [{
      exports: [BrowserModule],
      providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS
    }]
  }], null, null);
})();

// src/app/layout/default-layout/default-footer/default-footer.component.ts
var _DefaultFooterComponent = class _DefaultFooterComponent extends FooterComponent {
  constructor() {
    super();
    this.YEAR = (/* @__PURE__ */ new Date()).getFullYear();
  }
};
_DefaultFooterComponent.\u0275fac = function DefaultFooterComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _DefaultFooterComponent)();
};
_DefaultFooterComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DefaultFooterComponent, selectors: [["app-default-footer"]], standalone: true, features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature], decls: 8, vars: 1, consts: [[1, "ms-auto"], ["href", "https://coreui.io/angular", "target", "_blank"]], template: function DefaultFooterComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "span");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "div", 0);
    \u0275\u0275text(4, " Desarrollado por ");
    \u0275\u0275elementStart(5, "a", 1)(6, "span");
    \u0275\u0275text(7, "Firma");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" \xA9 ", ctx.YEAR, " ");
  }
} });
var DefaultFooterComponent = _DefaultFooterComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DefaultFooterComponent, { className: "DefaultFooterComponent", filePath: "src\\app\\layout\\default-layout\\default-footer\\default-footer.component.ts", lineNumber: 10 });
})();

// src/app/layout/default-layout/default-header/default-header.component.ts
var _forTrack0 = ($index, $item) => $item.name;
var _c0 = () => ({ placement: "bottom-start" });
function DefaultHeaderComponent_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DefaultHeaderComponent_ng_container_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DefaultHeaderComponent_ng_template_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "c-dropdown", 12)(1, "button", 13);
    \u0275\u0275element(2, "c-avatar", 14);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "ul", 15)(4, "li")(5, "h6", 16);
    \u0275\u0275text(6, " Account ");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(7, "li")(8, "a", 17);
    \u0275\u0275namespaceSVG();
    \u0275\u0275element(9, "svg", 18);
    \u0275\u0275text(10, " Updates ");
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(11, "c-badge", 19);
    \u0275\u0275text(12, " 42");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(13, "li")(14, "a", 20);
    \u0275\u0275namespaceSVG();
    \u0275\u0275element(15, "svg", 21);
    \u0275\u0275text(16, " Messages ");
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(17, "c-badge", 22);
    \u0275\u0275text(18, " 42 ");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(19, "li")(20, "a", 17);
    \u0275\u0275namespaceSVG();
    \u0275\u0275element(21, "svg", 23);
    \u0275\u0275text(22, " Tasks ");
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(23, "c-badge", 24);
    \u0275\u0275text(24, " 42");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(25, "li")(26, "a", 17);
    \u0275\u0275namespaceSVG();
    \u0275\u0275element(27, "svg", 25);
    \u0275\u0275text(28, " Comments ");
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(29, "c-badge", 26);
    \u0275\u0275text(30, " 42");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(31, "li")(32, "h6", 27);
    \u0275\u0275text(33, " Settings ");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(34, "li");
    \u0275\u0275elementStart(35, "li")(36, "a", 17);
    \u0275\u0275namespaceSVG();
    \u0275\u0275element(37, "svg", 28);
    \u0275\u0275text(38, " Profile ");
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(39, "li")(40, "a", 17);
    \u0275\u0275namespaceSVG();
    \u0275\u0275element(41, "svg", 29);
    \u0275\u0275text(42, " Settings ");
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(43, "li")(44, "a", 17);
    \u0275\u0275namespaceSVG();
    \u0275\u0275element(45, "svg", 30);
    \u0275\u0275text(46, " Payments ");
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(47, "c-badge", 31);
    \u0275\u0275text(48, " 42 ");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(49, "li")(50, "a", 17);
    \u0275\u0275namespaceSVG();
    \u0275\u0275element(51, "svg", 32);
    \u0275\u0275text(52, " Projects ");
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(53, "c-badge", 33);
    \u0275\u0275text(54, " 42 ");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(55, "li");
    \u0275\u0275element(56, "hr", 34);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(57, "li")(58, "a", 17);
    \u0275\u0275namespaceSVG();
    \u0275\u0275element(59, "svg", 35);
    \u0275\u0275text(60, " Lock Account ");
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(61, "li")(62, "a", 17);
    \u0275\u0275namespaceSVG();
    \u0275\u0275element(63, "svg", 36);
    \u0275\u0275text(64, " Logout ");
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    \u0275\u0275property("popperOptions", \u0275\u0275pureFunction0(3, _c0));
    \u0275\u0275advance();
    \u0275\u0275property("caret", false);
    \u0275\u0275advance();
    \u0275\u0275property("size", "md");
  }
}
function DefaultHeaderComponent_ng_template_17_For_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 42);
    \u0275\u0275listener("click", function DefaultHeaderComponent_ng_template_17_For_5_Template_button_click_0_listener() {
      const mode_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.colorMode.set(mode_r2.name));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275element(1, "svg", 43);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const mode_r2 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275property("active", ctx_r2.colorMode() === mode_r2.name);
    \u0275\u0275advance();
    \u0275\u0275property("name", mode_r2.icon);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", mode_r2.text, " ");
  }
}
function DefaultHeaderComponent_ng_template_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "c-dropdown", 37)(1, "button", 38);
    \u0275\u0275namespaceSVG();
    \u0275\u0275element(2, "svg", 39);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(3, "div", 40);
    \u0275\u0275repeaterCreate(4, DefaultHeaderComponent_ng_template_17_For_5_Template, 3, 3, "button", 41, _forTrack0);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("caret", false);
    \u0275\u0275advance();
    \u0275\u0275property("name", ctx_r2.icons());
    \u0275\u0275advance(2);
    \u0275\u0275repeater(ctx_r2.colorModes);
  }
}
var _colorModeService2;
var _DefaultHeaderComponent = class _DefaultHeaderComponent extends HeaderComponent {
  constructor() {
    super();
    __privateAdd(this, _colorModeService2);
    __privateSet(this, _colorModeService2, inject(ColorModeService));
    this.colorMode = __privateGet(this, _colorModeService2).colorMode;
    this.colorModes = [
      { name: "light", text: "Light", icon: "cilSun" },
      { name: "dark", text: "Dark", icon: "cilMoon" },
      { name: "auto", text: "Auto", icon: "cilContrast" }
    ];
    this.icons = computed(() => {
      const currentMode = this.colorMode();
      return this.colorModes.find((mode) => mode.name === currentMode)?.icon ?? "cilSun";
    });
    this.sidebarId = input("sidebar1");
    this.newMessages = [
      {
        id: 0,
        from: "Jessica Williams",
        avatar: "7.jpg",
        status: "success",
        title: "Urgent: System Maintenance Tonight",
        time: "Just now",
        link: "apps/email/inbox/message",
        message: "Attention team, we'll be conducting critical system maintenance tonight from 10 PM to 2 AM. Plan accordingly..."
      },
      {
        id: 1,
        from: "Richard Johnson",
        avatar: "6.jpg",
        status: "warning",
        title: "Project Update: Milestone Achieved",
        time: "5 minutes ago",
        link: "apps/email/inbox/message",
        message: "Kudos on hitting sales targets last quarter! Let's keep the momentum. New goals, new victories ahead..."
      },
      {
        id: 2,
        from: "Angela Rodriguez",
        avatar: "5.jpg",
        status: "danger",
        title: "Social Media Campaign Launch",
        time: "1:52 PM",
        link: "apps/email/inbox/message",
        message: "Exciting news! Our new social media campaign goes live tomorrow. Brace yourselves for engagement..."
      },
      {
        id: 3,
        from: "Jane Lewis",
        avatar: "4.jpg",
        status: "info",
        title: "Inventory Checkpoint",
        time: "4:03 AM",
        link: "apps/email/inbox/message",
        message: "Team, it's time for our monthly inventory check. Accurate counts ensure smooth operations. Let's nail it..."
      },
      {
        id: 3,
        from: "Ryan Miller",
        avatar: "4.jpg",
        status: "info",
        title: "Customer Feedback Results",
        time: "3 days ago",
        link: "apps/email/inbox/message",
        message: "Our latest customer feedback is in. Let's analyze and discuss improvements for an even better service..."
      }
    ];
    this.newNotifications = [
      { id: 0, title: "New user registered", icon: "cilUserFollow", color: "success" },
      { id: 1, title: "User deleted", icon: "cilUserUnfollow", color: "danger" },
      { id: 2, title: "Sales report is ready", icon: "cilChartPie", color: "info" },
      { id: 3, title: "New client", icon: "cilBasket", color: "primary" },
      { id: 4, title: "Server overloaded", icon: "cilSpeedometer", color: "warning" }
    ];
    this.newStatus = [
      { id: 0, title: "CPU Usage", value: 25, color: "info", details: "348 Processes. 1/4 Cores." },
      { id: 1, title: "Memory Usage", value: 70, color: "warning", details: "11444GB/16384MB" },
      { id: 2, title: "SSD 1 Usage", value: 90, color: "danger", details: "243GB/256GB" }
    ];
    this.newTasks = [
      { id: 0, title: "Upgrade NPM", value: 0, color: "info" },
      { id: 1, title: "ReactJS Version", value: 25, color: "danger" },
      { id: 2, title: "VueJS Version", value: 50, color: "warning" },
      { id: 3, title: "Add new layouts", value: 75, color: "info" },
      { id: 4, title: "Angular Version", value: 100, color: "success" }
    ];
  }
};
_colorModeService2 = new WeakMap();
_DefaultHeaderComponent.\u0275fac = function DefaultHeaderComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _DefaultHeaderComponent)();
};
_DefaultHeaderComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DefaultHeaderComponent, selectors: [["app-default-header"]], inputs: { sidebarId: [1, "sidebarId"] }, standalone: true, features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature], decls: 19, vars: 4, consts: [["userDropdown", ""], ["themeDropdown", ""], [1, "border-bottom", "px-4", 3, "fluid"], ["cHeaderToggler", "", "toggle", "visible", "aria-label", "Toggle sidebar navigation", 1, "btn", 2, "margin-inline-start", "-14px", 3, "cSidebarToggle"], ["cIcon", "", "name", "cilMenu", "size", "lg"], [1, "d-none", "d-md-flex"], [1, "d-none", "d-md-flex", "ms-auto"], [1, "ms-auto", "ms-md-0"], [1, "nav-item", "py-1"], [1, "vr", "h-100", "mx-2", "text-body", "text-opacity-75"], [4, "ngTemplateOutlet"], [1, "mx-0"], ["variant", "nav-item", 3, "popperOptions"], ["cDropdownToggle", "", "aria-label", "Open user menu", 1, "py-0", "pe-0", 3, "caret"], ["shape", "rounded-1", "src", "./assets/images/avatars/8.jpg", "status", "success", "textColor", "primary", "alt", "User avatar", 3, "size"], ["cDropdownMenu", "", 1, "pt-0", "w-auto"], ["cDropdownHeader", "", 1, "bg-body-secondary", "text-body-secondary", "fw-semibold", "py-2", "rounded-top"], ["cDropdownItem", "", "routerLink", ""], ["cIcon", "", "name", "cilBell", 1, "me-2"], ["color", "info", 1, "ms-2", "float-end"], ["cDropdownItem", "", "routerLink", "/apps/email/inbox"], ["cIcon", "", "name", "cilEnvelopeOpen", 1, "me-2"], ["color", "success", 1, "ms-2", "float-end"], ["cIcon", "", "name", "cilTask", 1, "me-2"], ["color", "danger", 1, "ms-2", "float-end"], ["cIcon", "", "name", "cilCommentSquare", 1, "me-2"], ["color", "warning", 1, "ms-auto"], ["cDropdownHeader", "", 1, "bg-body-secondary", "text-body-secondary", "fw-semibold", "py-2"], ["cIcon", "", "name", "cilUser", 1, "me-2"], ["cIcon", "", "name", "cilSettings", 1, "me-2"], ["cIcon", "", "name", "cilCreditCard", 1, "me-2"], ["color", "secondary", 1, "ms-2", "float-end"], ["cIcon", "", "name", "cilFile", 1, "me-2"], ["color", "primary", 1, "ms-2", "float-end"], ["cDropdownDivider", ""], ["cIcon", "", "name", "cilLockLocked", 1, "me-2"], ["cIcon", "", "name", "cilAccountLogout", 1, "me-2"], ["alignment", "end", "variant", "nav-item"], ["cDropdownToggle", "", "aria-label", "Open theme picker", 3, "caret"], ["cIcon", "", "size", "lg", 3, "name"], ["cDropdownMenu", ""], ["cDropdownItem", "", 1, "d-flex", "align-items-center", 3, "active"], ["cDropdownItem", "", 1, "d-flex", "align-items-center", 3, "click", "active"], ["cIcon", "", "size", "lg", 1, "me-2", 3, "name"]], template: function DefaultHeaderComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "c-container", 2)(2, "button", 3);
    \u0275\u0275namespaceSVG();
    \u0275\u0275element(3, "svg", 4);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(4, "c-header-nav", 5);
    \u0275\u0275element(5, "c-breadcrumb-router");
    \u0275\u0275elementEnd();
    \u0275\u0275element(6, "c-header-nav", 6);
    \u0275\u0275elementStart(7, "c-header-nav", 7)(8, "div", 8);
    \u0275\u0275element(9, "div", 9);
    \u0275\u0275elementEnd();
    \u0275\u0275template(10, DefaultHeaderComponent_ng_container_10_Template, 1, 0, "ng-container", 10);
    \u0275\u0275elementStart(11, "div", 8);
    \u0275\u0275element(12, "div", 9);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(13, "c-header-nav", 11);
    \u0275\u0275template(14, DefaultHeaderComponent_ng_container_14_Template, 1, 0, "ng-container", 10);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
    \u0275\u0275template(15, DefaultHeaderComponent_ng_template_15_Template, 65, 4, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(17, DefaultHeaderComponent_ng_template_17_Template, 6, 2, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
  }
  if (rf & 2) {
    const userDropdown_r4 = \u0275\u0275reference(16);
    const themeDropdown_r5 = \u0275\u0275reference(18);
    \u0275\u0275advance();
    \u0275\u0275property("fluid", true);
    \u0275\u0275advance();
    \u0275\u0275property("cSidebarToggle", ctx.sidebarId());
    \u0275\u0275advance(8);
    \u0275\u0275property("ngTemplateOutlet", themeDropdown_r5);
    \u0275\u0275advance(4);
    \u0275\u0275property("ngTemplateOutlet", userDropdown_r4);
  }
}, dependencies: [ContainerComponent, HeaderTogglerDirective, SidebarToggleDirective, IconDirective, HeaderNavComponent, RouterLink, NgTemplateOutlet, BreadcrumbRouterComponent, DropdownComponent, DropdownToggleDirective, AvatarComponent, DropdownMenuDirective, DropdownHeaderDirective, DropdownItemDirective, BadgeComponent, DropdownDividerDirective], encapsulation: 2 });
var DefaultHeaderComponent = _DefaultHeaderComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DefaultHeaderComponent, { className: "DefaultHeaderComponent", filePath: "src\\app\\layout\\default-layout\\default-header\\default-header.component.ts", lineNumber: 37 });
})();

// node_modules/@angular/cdk/fesm2022/bidi.mjs
var DIR_DOCUMENT = new InjectionToken("cdk-dir-doc", {
  providedIn: "root",
  factory: DIR_DOCUMENT_FACTORY
});
function DIR_DOCUMENT_FACTORY() {
  return inject(DOCUMENT);
}
var RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;
function _resolveDirectionality(rawValue) {
  const value = rawValue?.toLowerCase() || "";
  if (value === "auto" && typeof navigator !== "undefined" && navigator?.language) {
    return RTL_LOCALE_PATTERN.test(navigator.language) ? "rtl" : "ltr";
  }
  return value === "rtl" ? "rtl" : "ltr";
}
var _Directionality = class _Directionality {
  constructor(_document) {
    this.value = "ltr";
    this.change = new EventEmitter();
    if (_document) {
      const bodyDir = _document.body ? _document.body.dir : null;
      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;
      this.value = _resolveDirectionality(bodyDir || htmlDir || "ltr");
    }
  }
  ngOnDestroy() {
    this.change.complete();
  }
};
_Directionality.\u0275fac = function Directionality_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _Directionality)(\u0275\u0275inject(DIR_DOCUMENT, 8));
};
_Directionality.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Directionality,
  factory: _Directionality.\u0275fac,
  providedIn: "root"
});
var Directionality = _Directionality;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Directionality, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DIR_DOCUMENT]
    }]
  }], null);
})();
var _Dir = class _Dir {
  constructor() {
    this._dir = "ltr";
    this._isInitialized = false;
    this.change = new EventEmitter();
  }
  /** @docs-private */
  get dir() {
    return this._dir;
  }
  set dir(value) {
    const previousValue = this._dir;
    this._dir = _resolveDirectionality(value);
    this._rawDir = value;
    if (previousValue !== this._dir && this._isInitialized) {
      this.change.emit(this._dir);
    }
  }
  /** Current layout direction of the element. */
  get value() {
    return this.dir;
  }
  /** Initialize once default value has been set. */
  ngAfterContentInit() {
    this._isInitialized = true;
  }
  ngOnDestroy() {
    this.change.complete();
  }
};
_Dir.\u0275fac = function Dir_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _Dir)();
};
_Dir.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _Dir,
  selectors: [["", "dir", ""]],
  hostVars: 1,
  hostBindings: function Dir_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275attribute("dir", ctx._rawDir);
    }
  },
  inputs: {
    dir: "dir"
  },
  outputs: {
    change: "dirChange"
  },
  exportAs: ["dir"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([{
    provide: Directionality,
    useExisting: _Dir
  }])]
});
var Dir = _Dir;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Dir, [{
    type: Directive,
    args: [{
      selector: "[dir]",
      providers: [{
        provide: Directionality,
        useExisting: Dir
      }],
      host: {
        "[attr.dir]": "_rawDir"
      },
      exportAs: "dir",
      standalone: true
    }]
  }], null, {
    change: [{
      type: Output,
      args: ["dirChange"]
    }],
    dir: [{
      type: Input
    }]
  });
})();
var _BidiModule = class _BidiModule {
};
_BidiModule.\u0275fac = function BidiModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _BidiModule)();
};
_BidiModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _BidiModule
});
_BidiModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var BidiModule = _BidiModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BidiModule, [{
    type: NgModule,
    args: [{
      imports: [Dir],
      exports: [Dir]
    }]
  }], null, null);
})();

// node_modules/ngx-scrollbar/fesm2022/ngx-scrollbar-smooth-scroll.mjs
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 1e-3;
var SUBDIVISION_PRECISION = 1e-7;
var SUBDIVISION_MAX_ITERATIONS = 10;
var kSplineTableSize = 11;
var kSampleStepSize = 1 / (kSplineTableSize - 1);
var float32ArraySupported = typeof Float32Array === "function";
function A(aA1, aA2) {
  return 1 - 3 * aA2 + 3 * aA1;
}
function B(aA1, aA2) {
  return 3 * aA2 - 6 * aA1;
}
function C(aA1) {
  return 3 * aA1;
}
function calcBezier(aT, aA1, aA2) {
  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}
function getSlope(aT, aA1, aA2) {
  return 3 * A(aA1, aA2) * aT * aT + 2 * B(aA1, aA2) * aT + C(aA1);
}
function binarySubdivide(aX, aA, aB, mX1, mX2) {
  let currentX, currentT, i = 0;
  do {
    currentT = aA + (aB - aA) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}
function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (let i = 0; i < NEWTON_ITERATIONS; ++i) {
    let currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0) {
      return aGuessT;
    }
    let currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}
function LinearEasing(x) {
  return x;
}
function bezier(mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error("bezier x values must be in [0, 1] range");
  }
  if (mX1 === mY1 && mX2 === mY2) {
    return LinearEasing;
  }
  let sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  for (let i = 0; i < kSplineTableSize; ++i) {
    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
  }
  function getTForX(aX) {
    let intervalStart = 0;
    let currentSample = 1;
    let lastSample = kSplineTableSize - 1;
    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    let dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    let guessForT = intervalStart + dist * kSampleStepSize;
    let initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }
  return function BezierEasing(x) {
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
}
var SMOOTH_SCROLL_OPTIONS = new InjectionToken("SMOOTH_SCROLL_OPTIONS");
var _SmoothScrollManager = class _SmoothScrollManager {
  get _w() {
    return this._document.defaultView;
  }
  /**
   * Timing method
   */
  get _now() {
    return this._w.performance && this._w.performance.now ? this._w.performance.now.bind(this._w.performance) : Date.now;
  }
  constructor(_document, _platform, customDefaultOptions) {
    this._document = _document;
    this._platform = _platform;
    this._onGoingScrolls = /* @__PURE__ */ new Map();
    this._defaultOptions = __spreadValues({
      duration: 468,
      easing: {
        x1: 0.42,
        y1: 0,
        x2: 0.58,
        y2: 1
      }
    }, customDefaultOptions);
  }
  /**
   * changes scroll position inside an element
   */
  _scrollElement(el, x, y) {
    el.scrollLeft = x;
    el.scrollTop = y;
  }
  /**
   * Handles a given parameter of type HTMLElement, ElementRef or selector
   */
  _getElement(el, parent) {
    if (typeof el === "string") {
      return (parent || this._document).querySelector(el);
    }
    return coerceElement(el);
  }
  /**
   * Initializes a destroyer stream, re-initializes it if the element is already being scrolled
   */
  _initSmoothScroll(el) {
    if (this._onGoingScrolls.has(el)) {
      this._onGoingScrolls.get(el).next();
    }
    return this._onGoingScrolls.set(el, new Subject()).get(el);
  }
  /**
   * Checks if smooth scroll has reached, cleans up the smooth scroll stream and resolves its promise
   */
  _isFinished(context, destroyed, resolve) {
    if (context.currentX !== context.x || context.currentY !== context.y) {
      return true;
    }
    destroyed.next();
    resolve();
    return false;
  }
  /**
   * Terminates an ongoing smooth scroll
   */
  _interrupted(el, destroyed) {
    return merge(fromEvent(el, "wheel", {
      passive: true,
      capture: true
    }), fromEvent(el, "touchmove", {
      passive: true,
      capture: true
    }), destroyed).pipe(take(1));
  }
  /**
   * Deletes the destroyer function, runs if the smooth scroll has finished or interrupted
   */
  _destroy(el, destroyed) {
    destroyed.complete();
    this._onGoingScrolls.delete(el);
  }
  /**
   * A function called recursively that, given a context, steps through scrolling
   */
  _step(context) {
    return new Observable((subscriber) => {
      let elapsed = (this._now() - context.startTime) / context.duration;
      elapsed = elapsed > 1 ? 1 : elapsed;
      const value = context.easing(elapsed);
      context.currentX = context.startX + (context.x - context.startX) * value;
      context.currentY = context.startY + (context.y - context.startY) * value;
      this._scrollElement(context.scrollable, context.currentX, context.currentY);
      animationFrameScheduler.schedule(() => subscriber.next(context));
    });
  }
  _applyScrollToOptions(el, options) {
    if (!options.duration) {
      this._scrollElement(el, options.left, options.top);
      return Promise.resolve();
    }
    const destroyed = this._initSmoothScroll(el);
    const context = {
      scrollable: el,
      startTime: this._now(),
      startX: el.scrollLeft,
      startY: el.scrollTop,
      x: options.left == null ? el.scrollLeft : ~~options.left,
      y: options.top == null ? el.scrollTop : ~~options.top,
      duration: options.duration,
      easing: bezier(options.easing.x1, options.easing.y1, options.easing.x2, options.easing.y2)
    };
    return new Promise((resolve) => {
      of(null).pipe(expand(() => this._step(context).pipe(takeWhile((currContext) => this._isFinished(currContext, destroyed, resolve)))), takeUntil(this._interrupted(el, destroyed)), finalize(() => this._destroy(el, destroyed))).subscribe();
    });
  }
  /**
   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
   * left and right always refer to the left and right side of the scrolling container irrespective
   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
   * in an RTL context.
   * @param scrollable element
   * @param customOptions specified the offsets to scroll to.
   */
  scrollTo(scrollable, customOptions) {
    if (isPlatformBrowser(this._platform)) {
      const el = this._getElement(scrollable);
      const isRtl = getComputedStyle(el).direction === "rtl";
      const rtlScrollAxisType = getRtlScrollAxisType();
      const options = __spreadValues(__spreadValues(__spreadValues({}, this._defaultOptions), customOptions), {
        // Rewrite start & end offsets as right or left offsets.
        left: customOptions.left == null ? isRtl ? customOptions.end : customOptions.start : customOptions.left,
        right: customOptions.right == null ? isRtl ? customOptions.start : customOptions.end : customOptions.right
      });
      if (options.bottom != null) {
        options.top = el.scrollHeight - el.clientHeight - options.bottom;
      }
      if (isRtl && rtlScrollAxisType !== 0) {
        if (options.left != null) {
          options.right = el.scrollWidth - el.clientWidth - options.left;
        }
        if (rtlScrollAxisType === 2) {
          options.left = options.right;
        } else if (rtlScrollAxisType === 1) {
          options.left = options.right ? -options.right : options.right;
        }
      } else {
        if (options.right != null) {
          options.left = el.scrollWidth - el.clientWidth - options.right;
        }
      }
      return this._applyScrollToOptions(el, options);
    }
    return Promise.resolve();
  }
  /**
   * Scroll to element by reference or selector
   */
  scrollToElement(scrollable, target, customOptions = {}) {
    const scrollableEl = this._getElement(scrollable);
    const targetEl = this._getElement(target, scrollableEl);
    const options = __spreadValues(__spreadValues({}, customOptions), {
      left: targetEl.offsetLeft + (customOptions.left || 0),
      top: targetEl.offsetTop + (customOptions.top || 0)
    });
    return targetEl ? this.scrollTo(scrollableEl, options) : Promise.resolve();
  }
};
_SmoothScrollManager.\u0275fac = function SmoothScrollManager_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _SmoothScrollManager)(\u0275\u0275inject(DOCUMENT), \u0275\u0275inject(PLATFORM_ID), \u0275\u0275inject(SMOOTH_SCROLL_OPTIONS, 8));
};
_SmoothScrollManager.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _SmoothScrollManager,
  factory: _SmoothScrollManager.\u0275fac,
  providedIn: "root"
});
var SmoothScrollManager = _SmoothScrollManager;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SmoothScrollManager, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [{
      type: Document,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [SMOOTH_SCROLL_OPTIONS]
      }]
    }];
  }, null);
})();
var _SmoothScroll = class _SmoothScroll {
  constructor(element, smoothScroll) {
    this.element = element;
    this.smoothScroll = smoothScroll;
  }
  scrollTo(options) {
    return this.smoothScroll.scrollTo(this.element, options);
  }
  scrollToElement(target, options) {
    return this.smoothScroll.scrollToElement(this.element, target, options);
  }
};
_SmoothScroll.\u0275fac = function SmoothScroll_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _SmoothScroll)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(SmoothScrollManager));
};
_SmoothScroll.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _SmoothScroll,
  selectors: [["", "smoothScroll", ""], ["", "smooth-scroll", ""]],
  exportAs: ["smoothScroll"],
  standalone: true
});
var SmoothScroll = _SmoothScroll;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SmoothScroll, [{
    type: Directive,
    args: [{
      selector: "[smoothScroll], [smooth-scroll]",
      exportAs: "smoothScroll",
      standalone: true
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: SmoothScrollManager
    }];
  }, null);
})();

// node_modules/ngx-scrollbar/fesm2022/ngx-scrollbar.mjs
var _c02 = ["scrollbarY"];
var _c1 = ["scrollbarX"];
var _c2 = ["*"];
function NgScrollbar_ng_container_5_scrollbar_x_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "scrollbar-x", null, 0);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275attribute("scrollable", ctx_r0.state.isHorizontallyScrollable)("fit", ctx_r0.state.verticalUsed);
  }
}
function NgScrollbar_ng_container_5_scrollbar_y_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "scrollbar-y", null, 1);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275attribute("scrollable", ctx_r0.state.isVerticallyScrollable)("fit", ctx_r0.state.horizontalUsed);
  }
}
function NgScrollbar_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NgScrollbar_ng_container_5_scrollbar_x_1_Template, 2, 2, "scrollbar-x", 5)(2, NgScrollbar_ng_container_5_scrollbar_y_2_Template, 2, 2, "scrollbar-y", 5);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.state.horizontalUsed);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.state.verticalUsed);
  }
}
var _NgAttr = class _NgAttr {
  constructor(el) {
    this.el = el;
  }
  set ngAttr(attrs) {
    for (const [key, value] of Object.entries(attrs)) {
      this.el.nativeElement.setAttribute(key, value);
    }
  }
};
_NgAttr.\u0275fac = function NgAttr_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgAttr)(\u0275\u0275directiveInject(ElementRef));
};
_NgAttr.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgAttr,
  selectors: [["", "ngAttr", ""]],
  inputs: {
    ngAttr: "ngAttr"
  },
  standalone: true
});
var NgAttr = _NgAttr;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgAttr, [{
    type: Directive,
    args: [{
      selector: "[ngAttr]",
      standalone: true
    }]
  }], function() {
    return [{
      type: ElementRef
    }];
  }, {
    ngAttr: [{
      type: Input
    }]
  });
})();
function preventSelection(doc) {
  return tap(() => {
    doc.onselectstart = () => false;
  });
}
function enableSelection(doc) {
  return tap(() => {
    doc.onselectstart = null;
  });
}
function stopPropagation() {
  return tap((e) => e.stopPropagation());
}
function isWithinBounds(e, rect) {
  return e.clientX >= rect.left && e.clientX <= rect.left + rect.width && e.clientY >= rect.top && e.clientY <= rect.top + rect.height;
}
var _ScrollViewport = class _ScrollViewport {
  // Get viewport size, clientHeight or clientWidth
  get clientHeight() {
    return this.nativeElement.clientHeight;
  }
  get clientWidth() {
    return this.nativeElement.clientWidth;
  }
  get scrollHeight() {
    return this.nativeElement.scrollHeight;
  }
  get scrollWidth() {
    return this.nativeElement.scrollWidth;
  }
  // Get viewport scroll offset, scrollTop or scrollLeft
  get scrollTop() {
    return this.nativeElement.scrollTop;
  }
  get scrollLeft() {
    return this.nativeElement.scrollLeft;
  }
  // Get the available scrollable size
  get scrollMaxX() {
    return this.scrollWidth - this.clientWidth;
  }
  get scrollMaxY() {
    return this.scrollHeight - this.clientHeight;
  }
  get contentHeight() {
    return this.contentWrapperElement?.clientHeight || 0;
  }
  get contentWidth() {
    return this.contentWrapperElement?.clientWidth || 0;
  }
  constructor(viewPort) {
    this.viewPort = viewPort;
    this.nativeElement = viewPort.nativeElement;
  }
  /**
   * Activate viewport pointer events such as 'hovered' and 'clicked' events
   */
  activatePointerEvents(propagate, destroyed) {
    this.hovered = new Observable((subscriber) => {
      const mouseMoveStream = fromEvent(this.nativeElement, "mousemove", {
        passive: true
      });
      const mouseMove = propagate ? mouseMoveStream : mouseMoveStream.pipe(stopPropagation());
      const mouseLeave = fromEvent(this.nativeElement, "mouseleave", {
        passive: true
      }).pipe(map(() => false));
      merge(mouseMove, mouseLeave).pipe(tap((e) => subscriber.next(e)), takeUntil(destroyed)).subscribe();
    });
    this.clicked = new Observable((subscriber) => {
      const mouseDown = fromEvent(this.nativeElement, "mousedown", {
        passive: true
      }).pipe(tap((e) => subscriber.next(e)));
      const mouseUp = fromEvent(this.nativeElement, "mouseup", {
        passive: true
      }).pipe(tap(() => subscriber.next(false)));
      mouseDown.pipe(switchMap(() => mouseUp), takeUntil(destroyed)).subscribe();
    });
  }
  /**
   * Set this directive as a non-functional wrapper, called when a custom viewport is used
   */
  setAsWrapper() {
    this.nativeElement.className = "ng-native-scrollbar-hider ng-scroll-layer";
    if (this.nativeElement.firstElementChild) {
      this.nativeElement.firstElementChild.className = "ng-scroll-layer";
    }
  }
  /**
   * Set this directive as  the viewport, called when no custom viewport is used
   */
  setAsViewport(customClassName) {
    this.nativeElement.className += ` ng-native-scrollbar-hider ng-scroll-viewport ${customClassName}`;
    if (this.nativeElement.firstElementChild) {
      this.contentWrapperElement = this.nativeElement.firstElementChild;
      this.contentWrapperElement.classList.add("ng-scroll-content");
    }
  }
  /**
   * Scroll viewport vertically
   */
  scrollYTo(value) {
    this.nativeElement.scrollTop = value;
  }
  /**
   * Scroll viewport horizontally
   */
  scrollXTo(value) {
    this.nativeElement.scrollLeft = value;
  }
};
_ScrollViewport.\u0275fac = function ScrollViewport_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ScrollViewport)(\u0275\u0275directiveInject(ElementRef));
};
_ScrollViewport.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _ScrollViewport,
  selectors: [["", "scrollViewport", ""]],
  standalone: true
});
var ScrollViewport = _ScrollViewport;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScrollViewport, [{
    type: Directive,
    args: [{
      selector: "[scrollViewport]",
      standalone: true
    }]
  }], function() {
    return [{
      type: ElementRef
    }];
  }, null);
})();
var _NgScrollbarBase = class _NgScrollbarBase {
};
_NgScrollbarBase.\u0275fac = function NgScrollbarBase_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgScrollbarBase)();
};
_NgScrollbarBase.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgScrollbarBase
});
var NgScrollbarBase = _NgScrollbarBase;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgScrollbarBase, [{
    type: Directive
  }], null, null);
})();
var _TrackAdapter = class _TrackAdapter {
  // Stream that emits when the track element is clicked
  get clicked() {
    const mouseDown = fromEvent(this.trackElement, "mousedown", {
      passive: true
    }).pipe(stopPropagation(), preventSelection(this.document));
    const mouseup = fromEvent(this.document, "mouseup", {
      passive: true
    }).pipe(stopPropagation(), enableSelection(this.document), switchMap(() => EMPTY));
    return merge(mouseDown, mouseup);
  }
  // Get track client rect
  get clientRect() {
    return this.trackElement.getBoundingClientRect();
  }
  constructor(cmp, trackElement, document2) {
    this.cmp = cmp;
    this.trackElement = trackElement;
    this.document = document2;
  }
  /**
   * Stream that emits when scrollbar track is clicked
   */
  onTrackClicked(e, thumbSize, scrollSize) {
    return of(e).pipe(
      map((e2) => e2[this.pageProperty]),
      // Calculate scrollTo position
      map((pageOffset) => {
        const clickOffset = pageOffset - this.offset;
        const offset = clickOffset - thumbSize / 2;
        const ratio = offset / this.size;
        return ratio * scrollSize;
      }),
      // Smooth scroll to position
      tap((value) => {
        this.cmp.scrollTo(__spreadProps(__spreadValues({}, this.mapToScrollToOption(value)), {
          duration: coerceNumberProperty(this.cmp.trackClickScrollDuration)
        }));
      })
    );
  }
};
_TrackAdapter.\u0275fac = function TrackAdapter_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _TrackAdapter)(\u0275\u0275directiveInject(NgScrollbarBase), \u0275\u0275directiveInject(HTMLElement), \u0275\u0275directiveInject(Document));
};
_TrackAdapter.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _TrackAdapter
});
var TrackAdapter = _TrackAdapter;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TrackAdapter, [{
    type: Directive
  }], function() {
    return [{
      type: NgScrollbarBase
    }, {
      type: HTMLElement
    }, {
      type: Document
    }];
  }, null);
})();
var _TrackXDirective = class _TrackXDirective extends TrackAdapter {
  get pageProperty() {
    return "pageX";
  }
  get offset() {
    return this.clientRect.left;
  }
  get size() {
    return this.trackElement.clientWidth;
  }
  constructor(cmp, trackElement, document2) {
    super(cmp, trackElement.nativeElement, document2);
    this.cmp = cmp;
    this.document = document2;
  }
  mapToScrollToOption(value) {
    return {
      left: value
    };
  }
};
_TrackXDirective.\u0275fac = function TrackXDirective_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _TrackXDirective)(\u0275\u0275directiveInject(NgScrollbarBase), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(DOCUMENT));
};
_TrackXDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _TrackXDirective,
  selectors: [["", "scrollbarTrackX", ""]],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature]
});
var TrackXDirective = _TrackXDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TrackXDirective, [{
    type: Directive,
    args: [{
      selector: "[scrollbarTrackX]",
      standalone: true
    }]
  }], function() {
    return [{
      type: NgScrollbarBase
    }, {
      type: ElementRef
    }, {
      type: Document,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }];
  }, null);
})();
var _TrackYDirective = class _TrackYDirective extends TrackAdapter {
  get pageProperty() {
    return "pageY";
  }
  get offset() {
    return this.clientRect.top;
  }
  get size() {
    return this.trackElement.clientHeight;
  }
  constructor(cmp, trackElement, document2) {
    super(cmp, trackElement.nativeElement, document2);
    this.cmp = cmp;
    this.document = document2;
  }
  mapToScrollToOption(value) {
    return {
      top: value
    };
  }
};
_TrackYDirective.\u0275fac = function TrackYDirective_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _TrackYDirective)(\u0275\u0275directiveInject(NgScrollbarBase), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(DOCUMENT));
};
_TrackYDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _TrackYDirective,
  selectors: [["", "scrollbarTrackY", ""]],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature]
});
var TrackYDirective = _TrackYDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TrackYDirective, [{
    type: Directive,
    args: [{
      selector: "[scrollbarTrackY]",
      standalone: true
    }]
  }], function() {
    return [{
      type: NgScrollbarBase
    }, {
      type: ElementRef
    }, {
      type: Document,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }];
  }, null);
})();
var _ThumbAdapter = class _ThumbAdapter {
  get trackMax() {
    return this.track.size - this.size;
  }
  // Get thumb client rect
  get clientRect() {
    return this.thumbElement.getBoundingClientRect();
  }
  // Stream that emits when scrollbar thumb is clicked
  get clicked() {
    return fromEvent(this.thumbElement, "mousedown", {
      passive: true
    }).pipe(stopPropagation());
  }
  constructor(cmp, track, thumbElement, document2) {
    this.cmp = cmp;
    this.track = track;
    this.thumbElement = thumbElement;
    this.document = document2;
    this._dragging = new Subject();
    this.dragging = this._dragging.pipe(distinctUntilChanged());
  }
  // Calculate and update thumb position and size
  update() {
    const size = calculateThumbSize(this.track.size, this.viewportScrollSize, this.cmp.minThumbSize);
    const position = calculateThumbPosition(this.viewportScrollOffset, this.viewportScrollMax, this.trackMax);
    animationFrameScheduler.schedule(() => this.updateStyles(this.handleDirection(position, this.trackMax), size));
  }
  /**
   * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged
   * This function is called by thumb drag event using viewport or scrollbar pointer events
   */
  dragged(event) {
    let trackMaxStart;
    let scrollMaxStart;
    const dragStart = of(event).pipe(preventSelection(this.document), tap(() => {
      trackMaxStart = this.trackMax;
      scrollMaxStart = this.viewportScrollMax;
      this.setDragging(true);
    }));
    const dragging = fromEvent(this.document, "mousemove", {
      capture: true,
      passive: true
    }).pipe(stopPropagation());
    const dragEnd = fromEvent(this.document, "mouseup", {
      capture: true
    }).pipe(stopPropagation(), enableSelection(this.document), tap(() => this.setDragging(false)));
    return dragStart.pipe(map((e) => e[this.pageProperty]), map((pageOffset) => pageOffset - this.dragStartOffset), mergeMap((mouseDownOffset) => dragging.pipe(
      map((e) => e[this.clientProperty]),
      // Calculate how far the pointer is from the top/left of the scrollbar (minus the dragOffset).
      map((mouseOffset) => mouseOffset - this.track.offset),
      map((offset) => scrollMaxStart * (offset - mouseDownOffset) / trackMaxStart),
      map((position) => this.handleDrag(position, scrollMaxStart)),
      tap((position) => this.scrollTo(position)),
      takeUntil(dragEnd)
    )));
  }
};
_ThumbAdapter.\u0275fac = function ThumbAdapter_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ThumbAdapter)(\u0275\u0275directiveInject(NgScrollbarBase), \u0275\u0275directiveInject(TrackAdapter), \u0275\u0275directiveInject(HTMLElement), \u0275\u0275directiveInject(Document));
};
_ThumbAdapter.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _ThumbAdapter,
  outputs: {
    dragging: "dragging"
  }
});
var ThumbAdapter = _ThumbAdapter;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThumbAdapter, [{
    type: Directive
  }], function() {
    return [{
      type: NgScrollbarBase
    }, {
      type: TrackAdapter
    }, {
      type: HTMLElement
    }, {
      type: Document
    }];
  }, {
    dragging: [{
      type: Output
    }]
  });
})();
function calculateThumbSize(trackSize, contentSize, minThumbSize) {
  const scrollbarRatio = trackSize / contentSize;
  const thumbSize = scrollbarRatio * trackSize;
  return Math.max(~~thumbSize, minThumbSize);
}
function calculateThumbPosition(scrollPosition, scrollMax, trackMax) {
  return scrollPosition * trackMax / scrollMax;
}
var _ThumbXDirective = class _ThumbXDirective extends ThumbAdapter {
  get clientProperty() {
    return "clientX";
  }
  get pageProperty() {
    return "pageX";
  }
  get viewportScrollSize() {
    return this.cmp.viewport.scrollWidth;
  }
  get viewportScrollOffset() {
    return this.cmp.viewport.scrollLeft;
  }
  get viewportScrollMax() {
    return this.cmp.viewport.scrollMaxX;
  }
  get dragStartOffset() {
    return this.clientRect.left + this.document.defaultView.pageXOffset || 0;
  }
  get size() {
    return this.thumbElement.clientWidth;
  }
  constructor(cmp, track, element, document2, dir) {
    super(cmp, track, element.nativeElement, document2);
    this.cmp = cmp;
    this.track = track;
    this.element = element;
    this.document = document2;
    this.dir = dir;
  }
  updateStyles(position, size) {
    this.thumbElement.style.width = `${size}px`;
    this.thumbElement.style.transform = `translate3d(${position}px, 0, 0)`;
  }
  handleDrag(position, scrollMax) {
    if (this.dir.value === "rtl") {
      if (this.cmp.manager.rtlScrollAxisType === 1) {
        return position - scrollMax;
      }
      if (this.cmp.manager.rtlScrollAxisType === 2) {
        return scrollMax - position;
      }
    }
    return position;
  }
  handleDirection(position, trackMax) {
    if (this.dir.value === "rtl") {
      if (this.cmp.manager.rtlScrollAxisType === 2) {
        return -position;
      }
      if (this.cmp.manager.rtlScrollAxisType === 0) {
        return position - trackMax;
      }
    }
    return position;
  }
  setDragging(value) {
    this.cmp.setDragging({
      horizontalDragging: value
    });
  }
  scrollTo(position) {
    this.cmp.viewport.scrollXTo(position);
  }
};
_ThumbXDirective.\u0275fac = function ThumbXDirective_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ThumbXDirective)(\u0275\u0275directiveInject(NgScrollbarBase), \u0275\u0275directiveInject(TrackXDirective), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(DOCUMENT), \u0275\u0275directiveInject(Directionality));
};
_ThumbXDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _ThumbXDirective,
  selectors: [["", "scrollbarThumbX", ""]],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature]
});
var ThumbXDirective = _ThumbXDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThumbXDirective, [{
    type: Directive,
    args: [{
      selector: "[scrollbarThumbX]",
      standalone: true
    }]
  }], function() {
    return [{
      type: NgScrollbarBase
    }, {
      type: TrackXDirective
    }, {
      type: ElementRef
    }, {
      type: Document,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }, {
      type: Directionality
    }];
  }, null);
})();
var _ThumbYDirective = class _ThumbYDirective extends ThumbAdapter {
  get pageProperty() {
    return "pageY";
  }
  get viewportScrollSize() {
    return this.cmp.viewport.scrollHeight;
  }
  get viewportScrollOffset() {
    return this.cmp.viewport.scrollTop;
  }
  get viewportScrollMax() {
    return this.cmp.viewport.scrollMaxY;
  }
  get clientProperty() {
    return "clientY";
  }
  get dragStartOffset() {
    return this.clientRect.top + this.document.defaultView.pageYOffset || 0;
  }
  get size() {
    return this.thumbElement.clientHeight;
  }
  constructor(cmp, track, element, document2) {
    super(cmp, track, element.nativeElement, document2);
    this.cmp = cmp;
    this.track = track;
    this.element = element;
    this.document = document2;
  }
  updateStyles(position, size) {
    this.thumbElement.style.height = `${size}px`;
    this.thumbElement.style.transform = `translate3d(0px, ${position}px, 0)`;
  }
  handleDrag(position) {
    return position;
  }
  handleDirection(position) {
    return position;
  }
  setDragging(value) {
    this.cmp.setDragging({
      verticalDragging: value
    });
  }
  scrollTo(position) {
    this.cmp.viewport.scrollYTo(position);
  }
};
_ThumbYDirective.\u0275fac = function ThumbYDirective_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ThumbYDirective)(\u0275\u0275directiveInject(NgScrollbarBase), \u0275\u0275directiveInject(TrackYDirective), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(DOCUMENT));
};
_ThumbYDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _ThumbYDirective,
  selectors: [["", "scrollbarThumbY", ""]],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature]
});
var ThumbYDirective = _ThumbYDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThumbYDirective, [{
    type: Directive,
    args: [{
      selector: "[scrollbarThumbY]",
      standalone: true
    }]
  }], function() {
    return [{
      type: NgScrollbarBase
    }, {
      type: TrackYDirective
    }, {
      type: ElementRef
    }, {
      type: Document,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }];
  }, null);
})();
var _Scrollbar = class _Scrollbar {
  constructor(el, cmp, platform, document2, zone) {
    this.el = el;
    this.cmp = cmp;
    this.platform = platform;
    this.document = document2;
    this.zone = zone;
    this.destroyed = new Subject();
  }
  /**
   * Activate scrollbar pointer events
   */
  activatePointerEvents() {
    let thumbDragEvent;
    let trackClickEvent;
    let trackHoveredEvent;
    if (this.cmp.pointerEventsMethod === "viewport") {
      this.viewportTrackClicked = new Subject();
      this.viewportThumbClicked = new Subject();
      this.cmp.viewport.activatePointerEvents(this.cmp.viewportPropagateMouseMove, this.destroyed);
      thumbDragEvent = this.viewportThumbClicked;
      trackClickEvent = this.viewportTrackClicked;
      trackHoveredEvent = this.cmp.viewport.hovered.pipe(
        // Check if track is hovered
        map((e) => e ? isWithinBounds(e, this.el.getBoundingClientRect()) : false),
        distinctUntilChanged(),
        // Enable / disable text selection
        tap((hovered) => this.document.onselectstart = hovered ? () => false : null)
      );
      this.cmp.viewport.clicked.pipe(tap((e) => {
        if (e) {
          if (isWithinBounds(e, this.thumb.clientRect)) {
            this.viewportThumbClicked.next(e);
          } else if (isWithinBounds(e, this.track.clientRect)) {
            this.cmp.setClicked(true);
            this.viewportTrackClicked.next(e);
          }
        } else {
          this.cmp.setClicked(false);
        }
      }), takeUntil(this.destroyed)).subscribe();
    } else {
      thumbDragEvent = this.thumb.clicked;
      trackClickEvent = this.track.clicked;
      trackHoveredEvent = this.hovered;
    }
    return merge(
      // Activate scrollbar hovered event
      trackHoveredEvent.pipe(tap((e) => this.setHovered(e))),
      // Activate scrollbar thumb drag event
      thumbDragEvent.pipe(switchMap((e) => this.thumb.dragged(e))),
      // Activate scrollbar track click event
      trackClickEvent.pipe(switchMap((e) => this.track.onTrackClicked(e, this.thumb.size, this.viewportScrollSize)))
    );
  }
  // Stream that emits when the track element is hovered
  get hovered() {
    const mouseEnter = fromEvent(this.el, "mouseenter", {
      passive: true
    }).pipe(stopPropagation(), map(() => true));
    const mouseLeave = fromEvent(this.el, "mouseleave", {
      passive: true
    }).pipe(stopPropagation(), map(() => false));
    return merge(mouseEnter, mouseLeave);
  }
  ngOnInit() {
    this.zone.runOutsideAngular(() => {
      if (!(this.platform.IOS || this.platform.ANDROID) && !this.cmp.pointerEventsDisabled) {
        this.activatePointerEvents().pipe(takeUntil(this.destroyed)).subscribe();
      }
      merge(this.cmp.scrolled, this.cmp.updated).pipe(tap(() => this.thumb?.update()), takeUntil(this.destroyed)).subscribe();
    });
  }
  ngOnDestroy() {
    this.destroyed.next();
    this.destroyed.complete();
    if (this.viewportThumbClicked && this.viewportTrackClicked) {
      this.viewportTrackClicked.complete();
      this.viewportThumbClicked.complete();
    }
  }
};
_Scrollbar.\u0275fac = function Scrollbar_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _Scrollbar)(\u0275\u0275directiveInject(HTMLElement), \u0275\u0275directiveInject(NgScrollbarBase), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(Document), \u0275\u0275directiveInject(NgZone));
};
_Scrollbar.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _Scrollbar
});
var Scrollbar = _Scrollbar;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Scrollbar, [{
    type: Directive
  }], function() {
    return [{
      type: HTMLElement
    }, {
      type: NgScrollbarBase
    }, {
      type: Platform
    }, {
      type: Document
    }, {
      type: NgZone
    }];
  }, null);
})();
var _ScrollbarY = class _ScrollbarY extends Scrollbar {
  get viewportScrollSize() {
    return this.cmp.viewport.scrollHeight;
  }
  constructor(el, cmp, platform, document2, zone) {
    super(el.nativeElement, cmp, platform, document2, zone);
    this.cmp = cmp;
    this.platform = platform;
    this.document = document2;
    this.zone = zone;
  }
  setHovered(value) {
    this.cmp.setHovered({
      verticalHovered: value
    });
  }
};
_ScrollbarY.\u0275fac = function ScrollbarY_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ScrollbarY)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NgScrollbarBase), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(DOCUMENT), \u0275\u0275directiveInject(NgZone));
};
_ScrollbarY.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _ScrollbarY,
  selectors: [["scrollbar-y"]],
  viewQuery: function ScrollbarY_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(TrackYDirective, 7);
      \u0275\u0275viewQuery(ThumbYDirective, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.track = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.thumb = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function ScrollbarY_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("scrollbar-control", true);
    }
  },
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  decls: 2,
  vars: 6,
  consts: [["scrollbarTrackY", ""], ["scrollbarThumbY", ""]],
  template: function ScrollbarY_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0);
      \u0275\u0275element(1, "div", 1);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275classMapInterpolate1("ng-scrollbar-track ", ctx.cmp.trackClass, "");
      \u0275\u0275advance();
      \u0275\u0275classMapInterpolate1("ng-scrollbar-thumb ", ctx.cmp.thumbClass, "");
    }
  },
  dependencies: [TrackYDirective, ThumbYDirective],
  styles: [".ng-scrollbar-wrapper>scrollbar-y.scrollbar-control{width:var(--vertical-scrollbar-total-size)}  .ng-scrollbar-wrapper>scrollbar-y.scrollbar-control>.ng-scrollbar-track{width:var(--vertical-scrollbar-size);height:calc(100% - var(--scrollbar-padding) * 2)}  .ng-scrollbar-wrapper>scrollbar-y.scrollbar-control>.ng-scrollbar-track>.ng-scrollbar-thumb{height:0;width:100%}  .ng-scrollbar-wrapper[verticalHovered=true]>scrollbar-y.scrollbar-control .ng-scrollbar-thumb,   .ng-scrollbar-wrapper[verticalDragging=true]>scrollbar-y.scrollbar-control .ng-scrollbar-thumb{background-color:var(--scrollbar-thumb-hover-color)}  .ng-scrollbar-wrapper[deactivated=false]>scrollbar-y.scrollbar-control{top:0;bottom:0}  .ng-scrollbar-wrapper[deactivated=false][dir=ltr]>scrollbar-y.scrollbar-control{right:0;left:unset}  .ng-scrollbar-wrapper[deactivated=false][dir=ltr][position=invertY]>scrollbar-y.scrollbar-control,   .ng-scrollbar-wrapper[deactivated=false][dir=ltr][position=invertAll]>scrollbar-y.scrollbar-control{left:0;right:unset}  .ng-scrollbar-wrapper[deactivated=false][dir=rtl]>scrollbar-y.scrollbar-control{left:0;right:unset}  .ng-scrollbar-wrapper[deactivated=false][dir=rtl][position=invertY]>scrollbar-y.scrollbar-control,   .ng-scrollbar-wrapper[deactivated=false][dir=rtl][position=invertAll]>scrollbar-y.scrollbar-control{left:unset;right:0}  .ng-scrollbar-wrapper[deactivated=false][track=all]>scrollbar-y.scrollbar-control[fit=true]{bottom:var(--scrollbar-total-size);top:0}  .ng-scrollbar-wrapper[deactivated=false][track=all][position=invertX]>scrollbar-y.scrollbar-control[fit=true],   .ng-scrollbar-wrapper[deactivated=false][track=all][position=invertAll]>scrollbar-y.scrollbar-control[fit=true]{top:var(--scrollbar-total-size);bottom:0}"],
  changeDetection: 0
});
var ScrollbarY = _ScrollbarY;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScrollbarY, [{
    type: Component,
    args: [{
      selector: "scrollbar-y",
      host: {
        "[class.scrollbar-control]": "true"
      },
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <div scrollbarTrackY class="ng-scrollbar-track {{cmp.trackClass}}">
      <div scrollbarThumbY class="ng-scrollbar-thumb {{cmp.thumbClass}}"></div>
    </div>
  `,
      standalone: true,
      imports: [TrackYDirective, ThumbYDirective],
      styles: ["::ng-deep .ng-scrollbar-wrapper>scrollbar-y.scrollbar-control{width:var(--vertical-scrollbar-total-size)}::ng-deep .ng-scrollbar-wrapper>scrollbar-y.scrollbar-control>.ng-scrollbar-track{width:var(--vertical-scrollbar-size);height:calc(100% - var(--scrollbar-padding) * 2)}::ng-deep .ng-scrollbar-wrapper>scrollbar-y.scrollbar-control>.ng-scrollbar-track>.ng-scrollbar-thumb{height:0;width:100%}::ng-deep .ng-scrollbar-wrapper[verticalHovered=true]>scrollbar-y.scrollbar-control .ng-scrollbar-thumb,::ng-deep .ng-scrollbar-wrapper[verticalDragging=true]>scrollbar-y.scrollbar-control .ng-scrollbar-thumb{background-color:var(--scrollbar-thumb-hover-color)}::ng-deep .ng-scrollbar-wrapper[deactivated=false]>scrollbar-y.scrollbar-control{top:0;bottom:0}::ng-deep .ng-scrollbar-wrapper[deactivated=false][dir=ltr]>scrollbar-y.scrollbar-control{right:0;left:unset}::ng-deep .ng-scrollbar-wrapper[deactivated=false][dir=ltr][position=invertY]>scrollbar-y.scrollbar-control,::ng-deep .ng-scrollbar-wrapper[deactivated=false][dir=ltr][position=invertAll]>scrollbar-y.scrollbar-control{left:0;right:unset}::ng-deep .ng-scrollbar-wrapper[deactivated=false][dir=rtl]>scrollbar-y.scrollbar-control{left:0;right:unset}::ng-deep .ng-scrollbar-wrapper[deactivated=false][dir=rtl][position=invertY]>scrollbar-y.scrollbar-control,::ng-deep .ng-scrollbar-wrapper[deactivated=false][dir=rtl][position=invertAll]>scrollbar-y.scrollbar-control{left:unset;right:0}::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all]>scrollbar-y.scrollbar-control[fit=true]{bottom:var(--scrollbar-total-size);top:0}::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][position=invertX]>scrollbar-y.scrollbar-control[fit=true],::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][position=invertAll]>scrollbar-y.scrollbar-control[fit=true]{top:var(--scrollbar-total-size);bottom:0}\n"]
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: NgScrollbarBase
    }, {
      type: Platform
    }, {
      type: Document,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }, {
      type: NgZone
    }];
  }, {
    track: [{
      type: ViewChild,
      args: [TrackYDirective, {
        static: true
      }]
    }],
    thumb: [{
      type: ViewChild,
      args: [ThumbYDirective, {
        static: true
      }]
    }]
  });
})();
var _ScrollbarX = class _ScrollbarX extends Scrollbar {
  get viewportScrollSize() {
    return this.cmp.viewport.scrollWidth;
  }
  constructor(el, cmp, platform, document2, zone) {
    super(el.nativeElement, cmp, platform, document2, zone);
    this.cmp = cmp;
    this.platform = platform;
    this.document = document2;
    this.zone = zone;
  }
  setHovered(value) {
    this.cmp.setHovered({
      horizontalHovered: value
    });
  }
};
_ScrollbarX.\u0275fac = function ScrollbarX_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ScrollbarX)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NgScrollbarBase), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(DOCUMENT), \u0275\u0275directiveInject(NgZone));
};
_ScrollbarX.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _ScrollbarX,
  selectors: [["scrollbar-x"]],
  viewQuery: function ScrollbarX_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(TrackXDirective, 7);
      \u0275\u0275viewQuery(ThumbXDirective, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.track = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.thumb = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function ScrollbarX_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("scrollbar-control", true);
    }
  },
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  decls: 2,
  vars: 6,
  consts: [["scrollbarTrackX", ""], ["scrollbarThumbX", ""]],
  template: function ScrollbarX_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0);
      \u0275\u0275element(1, "div", 1);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275classMapInterpolate1("ng-scrollbar-track ", ctx.cmp.trackClass, "");
      \u0275\u0275advance();
      \u0275\u0275classMapInterpolate1("ng-scrollbar-thumb ", ctx.cmp.thumbClass, "");
    }
  },
  dependencies: [TrackXDirective, ThumbXDirective],
  styles: [".ng-scrollbar-wrapper>scrollbar-x.scrollbar-control{height:var(--horizontal-scrollbar-total-size)}  .ng-scrollbar-wrapper>scrollbar-x.scrollbar-control>.ng-scrollbar-track{height:var(--horizontal-scrollbar-size);width:calc(100% - var(--scrollbar-padding) * 2)}  .ng-scrollbar-wrapper>scrollbar-x.scrollbar-control>.ng-scrollbar-track>.ng-scrollbar-thumb{width:0;height:100%}  .ng-scrollbar-wrapper[horizontalHovered=true]>scrollbar-x.scrollbar-control .ng-scrollbar-thumb,   .ng-scrollbar-wrapper[horizontalDragging=true]>scrollbar-x.scrollbar-control .ng-scrollbar-thumb{background-color:var(--scrollbar-thumb-hover-color)}  .ng-scrollbar-wrapper[position=invertX]>scrollbar-x.scrollbar-control,   .ng-scrollbar-wrapper[position=invertAll]>scrollbar-x.scrollbar-control{top:0;bottom:unset}  .ng-scrollbar-wrapper[deactivated=false]>scrollbar-x.scrollbar-control{left:0;right:0;bottom:0;top:unset}  .ng-scrollbar-wrapper[deactivated=false][position=invertX]>scrollbar-x.scrollbar-control,   .ng-scrollbar-wrapper[deactivated=false][position=invertAll]>scrollbar-x.scrollbar-control{top:0;bottom:unset}  .ng-scrollbar-wrapper[deactivated=false][track=all][dir=ltr]>scrollbar-x.scrollbar-control[fit=true]{right:var(--scrollbar-total-size);left:0}  .ng-scrollbar-wrapper[deactivated=false][track=all][dir=ltr][position=invertY]>scrollbar-x.scrollbar-control[fit=true],   .ng-scrollbar-wrapper[deactivated=false][track=all][dir=ltr][position=invertAll]>scrollbar-x.scrollbar-control[fit=true]{left:var(--scrollbar-total-size);right:0}  .ng-scrollbar-wrapper[deactivated=false][track=all][dir=rtl]>scrollbar-x.scrollbar-control[fit=true]{left:var(--scrollbar-total-size);right:0}  .ng-scrollbar-wrapper[deactivated=false][track=all][dir=rtl][position=invertY]>scrollbar-x.scrollbar-control[fit=true],   .ng-scrollbar-wrapper[deactivated=false][track=all][dir=rtl][position=invertAll]>scrollbar-x.scrollbar-control[fit=true]{right:var(--scrollbar-total-size);left:0}"],
  changeDetection: 0
});
var ScrollbarX = _ScrollbarX;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScrollbarX, [{
    type: Component,
    args: [{
      selector: "scrollbar-x",
      host: {
        "[class.scrollbar-control]": "true"
      },
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <div scrollbarTrackX class="ng-scrollbar-track {{cmp.trackClass}}">
      <div scrollbarThumbX class="ng-scrollbar-thumb {{cmp.thumbClass}}"></div>
    </div>
  `,
      standalone: true,
      imports: [TrackXDirective, ThumbXDirective],
      styles: ["::ng-deep .ng-scrollbar-wrapper>scrollbar-x.scrollbar-control{height:var(--horizontal-scrollbar-total-size)}::ng-deep .ng-scrollbar-wrapper>scrollbar-x.scrollbar-control>.ng-scrollbar-track{height:var(--horizontal-scrollbar-size);width:calc(100% - var(--scrollbar-padding) * 2)}::ng-deep .ng-scrollbar-wrapper>scrollbar-x.scrollbar-control>.ng-scrollbar-track>.ng-scrollbar-thumb{width:0;height:100%}::ng-deep .ng-scrollbar-wrapper[horizontalHovered=true]>scrollbar-x.scrollbar-control .ng-scrollbar-thumb,::ng-deep .ng-scrollbar-wrapper[horizontalDragging=true]>scrollbar-x.scrollbar-control .ng-scrollbar-thumb{background-color:var(--scrollbar-thumb-hover-color)}::ng-deep .ng-scrollbar-wrapper[position=invertX]>scrollbar-x.scrollbar-control,::ng-deep .ng-scrollbar-wrapper[position=invertAll]>scrollbar-x.scrollbar-control{top:0;bottom:unset}::ng-deep .ng-scrollbar-wrapper[deactivated=false]>scrollbar-x.scrollbar-control{left:0;right:0;bottom:0;top:unset}::ng-deep .ng-scrollbar-wrapper[deactivated=false][position=invertX]>scrollbar-x.scrollbar-control,::ng-deep .ng-scrollbar-wrapper[deactivated=false][position=invertAll]>scrollbar-x.scrollbar-control{top:0;bottom:unset}::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][dir=ltr]>scrollbar-x.scrollbar-control[fit=true]{right:var(--scrollbar-total-size);left:0}::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][dir=ltr][position=invertY]>scrollbar-x.scrollbar-control[fit=true],::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][dir=ltr][position=invertAll]>scrollbar-x.scrollbar-control[fit=true]{left:var(--scrollbar-total-size);right:0}::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][dir=rtl]>scrollbar-x.scrollbar-control[fit=true]{left:var(--scrollbar-total-size);right:0}::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][dir=rtl][position=invertY]>scrollbar-x.scrollbar-control[fit=true],::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][dir=rtl][position=invertAll]>scrollbar-x.scrollbar-control[fit=true]{right:var(--scrollbar-total-size);left:0}\n"]
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: NgScrollbarBase
    }, {
      type: Platform
    }, {
      type: Document,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }, {
      type: NgZone
    }];
  }, {
    track: [{
      type: ViewChild,
      args: [TrackXDirective, {
        static: true
      }]
    }],
    thumb: [{
      type: ViewChild,
      args: [ThumbXDirective, {
        static: true
      }]
    }]
  });
})();
var NG_SCROLLBAR_OPTIONS = new InjectionToken("NG_SCROLLBAR_OPTIONS");
var defaultOptions = {
  viewClass: "",
  trackClass: "",
  thumbClass: "",
  track: "vertical",
  appearance: "compact",
  visibility: "native",
  position: "native",
  pointerEventsMethod: "viewport",
  trackClickScrollDuration: 300,
  minThumbSize: 20,
  windowResizeDebounce: 0,
  sensorDebounce: 0,
  scrollAuditTime: 0,
  viewportPropagateMouseMove: true,
  autoHeightDisabled: true,
  autoWidthDisabled: true,
  sensorDisabled: false,
  pointerEventsDisabled: false
};
var _ScrollbarManager = class _ScrollbarManager {
  constructor(options) {
    this.globalOptions = options ? __spreadValues(__spreadValues({}, defaultOptions), options) : defaultOptions;
    this.rtlScrollAxisType = getRtlScrollAxisType();
  }
};
_ScrollbarManager.\u0275fac = function ScrollbarManager_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ScrollbarManager)(\u0275\u0275inject(NG_SCROLLBAR_OPTIONS, 8));
};
_ScrollbarManager.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ScrollbarManager,
  factory: _ScrollbarManager.\u0275fac,
  providedIn: "root"
});
var ScrollbarManager = _ScrollbarManager;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScrollbarManager, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [NG_SCROLLBAR_OPTIONS]
      }]
    }];
  }, null);
})();
var _NativeScrollbarSizeFactory = class _NativeScrollbarSizeFactory {
  constructor(document2, manager, platform) {
    this.document = document2;
    this.manager = manager;
    this.platform = platform;
    this._scrollbarSize = new BehaviorSubject(this.getNativeScrollbarSize());
    this.scrollbarSize = this._scrollbarSize.asObservable();
    if (platform.isBrowser) {
      fromEvent(this.document.defaultView, "resize", {
        passive: true
      }).pipe(debounceTime(this.manager.globalOptions.windowResizeDebounce), map(() => this.getNativeScrollbarSize()), distinctUntilChanged(), tap((size) => this._scrollbarSize.next(size))).subscribe();
    }
  }
  /**
   * Get native scrollbar size
   */
  getNativeScrollbarSize() {
    if (!this.platform.isBrowser) {
      return 0;
    }
    if (this.platform.IOS) {
      return 6;
    }
    const box = this.document.createElement("div");
    box.className = "ng-scrollbar-measure";
    box.style.left = "0px";
    box.style.overflow = "scroll";
    box.style.position = "fixed";
    box.style.top = "-9999px";
    this.document.body.appendChild(box);
    const size = box.getBoundingClientRect().right;
    this.document.body.removeChild(box);
    return size;
  }
};
_NativeScrollbarSizeFactory.\u0275fac = function NativeScrollbarSizeFactory_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NativeScrollbarSizeFactory)(\u0275\u0275inject(DOCUMENT), \u0275\u0275inject(ScrollbarManager), \u0275\u0275inject(Platform));
};
_NativeScrollbarSizeFactory.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NativeScrollbarSizeFactory,
  factory: _NativeScrollbarSizeFactory.\u0275fac,
  providedIn: "root"
});
var NativeScrollbarSizeFactory = _NativeScrollbarSizeFactory;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NativeScrollbarSizeFactory, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [{
      type: Document,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }, {
      type: ScrollbarManager
    }, {
      type: Platform
    }];
  }, null);
})();
var _HideNativeScrollbar = class _HideNativeScrollbar {
  constructor(el, renderer, hideNativeScrollbar) {
    this.renderer = renderer;
    this.hideNativeScrollbar = hideNativeScrollbar;
    this._subscriber = Subscription.EMPTY;
    this._subscriber = hideNativeScrollbar.scrollbarSize.subscribe((size) => {
      this.renderer.setStyle(el.nativeElement, "--native-scrollbar-size", `-${size}px`, RendererStyleFlags2.DashCase);
    });
  }
  ngOnDestroy() {
    this._subscriber.unsubscribe();
  }
};
_HideNativeScrollbar.\u0275fac = function HideNativeScrollbar_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _HideNativeScrollbar)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(NativeScrollbarSizeFactory));
};
_HideNativeScrollbar.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _HideNativeScrollbar,
  selectors: [["", "hideNativeScrollbar", ""]],
  standalone: true
});
var HideNativeScrollbar = _HideNativeScrollbar;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HideNativeScrollbar, [{
    type: Directive,
    args: [{
      selector: "[hideNativeScrollbar]",
      standalone: true
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: NativeScrollbarSizeFactory
    }];
  }, null);
})();
var _ResizeSensor = class _ResizeSensor {
  /** Debounce interval for emitting the changes. */
  get debounce() {
    return this._debounce;
  }
  set debounce(value) {
    this._debounce = coerceNumberProperty(value);
    this._subscribe();
  }
  /** Whether ResizeObserver is disabled. */
  get disabled() {
    return this._disabled;
  }
  set disabled(value) {
    this._disabled = coerceBooleanProperty(value);
    this._disabled ? this._unsubscribe() : this._subscribe();
  }
  constructor(zone, platform, scrollbar) {
    this.zone = zone;
    this.platform = platform;
    this.scrollbar = scrollbar;
    this._disabled = false;
    this._currentSubscription = null;
    this.event = new EventEmitter();
    if (!scrollbar) {
      throw new Error("[NgScrollbar Resize Sensor Directive]: Host element must be an NgScrollbar component.");
    }
  }
  ngAfterContentInit() {
    if (!this._currentSubscription && !this._disabled) {
      this._subscribe();
    }
  }
  ngOnDestroy() {
    this._unsubscribe();
  }
  _subscribe() {
    this._unsubscribe();
    if (this.platform.isBrowser) {
      const stream = new Observable((observer) => {
        this._resizeObserver = new ResizeObserver((e) => observer.next(e));
        this._resizeObserver.observe(this.scrollbar.viewport.nativeElement);
        if (this.scrollbar.viewport.contentWrapperElement) {
          this._resizeObserver.observe(this.scrollbar.viewport.contentWrapperElement);
        }
      });
      this.zone.runOutsideAngular(() => {
        this._currentSubscription = (this._debounce ? stream.pipe(debounceTime(this._debounce)) : stream).subscribe(this.event);
      });
    }
  }
  _unsubscribe() {
    this._resizeObserver?.disconnect();
    this._currentSubscription?.unsubscribe();
  }
};
_ResizeSensor.\u0275fac = function ResizeSensor_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ResizeSensor)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(NgScrollbarBase));
};
_ResizeSensor.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _ResizeSensor,
  selectors: [["", "resizeSensor", ""]],
  inputs: {
    debounce: [0, "sensorDebounce", "debounce"],
    disabled: [0, "sensorDisabled", "disabled"]
  },
  outputs: {
    event: "resizeSensor"
  },
  standalone: true
});
var ResizeSensor = _ResizeSensor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ResizeSensor, [{
    type: Directive,
    args: [{
      selector: "[resizeSensor]",
      standalone: true
    }]
  }], function() {
    return [{
      type: NgZone
    }, {
      type: Platform
    }, {
      type: NgScrollbarBase
    }];
  }, {
    debounce: [{
      type: Input,
      args: ["sensorDebounce"]
    }],
    disabled: [{
      type: Input,
      args: ["sensorDisabled"]
    }],
    event: [{
      type: Output,
      args: ["resizeSensor"]
    }]
  });
})();
var _NgScrollbar = class _NgScrollbar {
  /** Disable custom scrollbar and switch back to native scrollbar */
  get disabled() {
    return this._disabled;
  }
  set disabled(disabled) {
    this._disabled = coerceBooleanProperty(disabled);
  }
  /** Whether ResizeObserver is disabled */
  get sensorDisabled() {
    return this._sensorDisabled;
  }
  set sensorDisabled(disabled) {
    this._sensorDisabled = coerceBooleanProperty(disabled);
  }
  /** A flag used to enable/disable the scrollbar thumb dragged event */
  get pointerEventsDisabled() {
    return this._pointerEventsDisabled;
  }
  set pointerEventsDisabled(disabled) {
    this._pointerEventsDisabled = coerceBooleanProperty(disabled);
  }
  /** Enable viewport mousemove event propagation (only when pointerEventsMethod="viewport") */
  get viewportPropagateMouseMove() {
    return this._viewportPropagateMouseMove;
  }
  set viewportPropagateMouseMove(disabled) {
    this._viewportPropagateMouseMove = coerceBooleanProperty(disabled);
  }
  /** Disable auto-height */
  get autoHeightDisabled() {
    return this._autoHeightDisabled;
  }
  set autoHeightDisabled(disabled) {
    this._autoHeightDisabled = coerceBooleanProperty(disabled);
  }
  /** Disable auto-width */
  get autoWidthDisabled() {
    return this._autoWidthDisabled;
  }
  set autoWidthDisabled(disabled) {
    this._autoWidthDisabled = coerceBooleanProperty(disabled);
  }
  get nativeElement() {
    return this.el.nativeElement;
  }
  constructor(el, zone, changeDetectorRef, dir, smoothScroll, manager) {
    this.el = el;
    this.zone = zone;
    this.changeDetectorRef = changeDetectorRef;
    this.dir = dir;
    this.smoothScroll = smoothScroll;
    this.manager = manager;
    this._disabled = false;
    this._sensorDisabled = this.manager.globalOptions.sensorDisabled;
    this._pointerEventsDisabled = this.manager.globalOptions.pointerEventsDisabled;
    this._autoHeightDisabled = this.manager.globalOptions.autoHeightDisabled;
    this._autoWidthDisabled = this.manager.globalOptions.autoWidthDisabled;
    this._viewportPropagateMouseMove = this.manager.globalOptions.viewportPropagateMouseMove;
    this.viewClass = this.manager.globalOptions.viewClass;
    this.trackClass = this.manager.globalOptions.trackClass;
    this.thumbClass = this.manager.globalOptions.thumbClass;
    this.minThumbSize = this.manager.globalOptions.minThumbSize;
    this.trackClickScrollDuration = this.manager.globalOptions.trackClickScrollDuration;
    this.pointerEventsMethod = this.manager.globalOptions.pointerEventsMethod;
    this.track = this.manager.globalOptions.track;
    this.visibility = this.manager.globalOptions.visibility;
    this.appearance = this.manager.globalOptions.appearance;
    this.position = this.manager.globalOptions.position;
    this.sensorDebounce = this.manager.globalOptions.sensorDebounce;
    this.scrollAuditTime = this.manager.globalOptions.scrollAuditTime;
    this.updated = new EventEmitter();
    this.state = {};
    this.destroyed = new Subject();
  }
  /**
   * Update local state with each change detection
   */
  updateState() {
    let verticalUsed = false;
    let horizontalUsed = false;
    let isVerticallyScrollable = false;
    let isHorizontallyScrollable = false;
    if (this.track === "all" || this.track === "vertical") {
      isVerticallyScrollable = this.viewport.scrollHeight > this.viewport.clientHeight;
      verticalUsed = this.visibility === "always" || isVerticallyScrollable;
    }
    if (this.track === "all" || this.track === "horizontal") {
      isHorizontallyScrollable = this.viewport.scrollWidth > this.viewport.clientWidth;
      horizontalUsed = this.visibility === "always" || isHorizontallyScrollable;
    }
    this.setState({
      position: this.position,
      track: this.track,
      appearance: this.appearance,
      visibility: this.visibility,
      deactivated: this.disabled,
      dir: this.dir.value,
      pointerEventsMethod: this.pointerEventsMethod,
      verticalUsed,
      horizontalUsed,
      isVerticallyScrollable,
      isHorizontallyScrollable
    });
  }
  setState(state) {
    this.state = __spreadValues(__spreadValues({}, this.state), state);
    this.changeDetectorRef.detectChanges();
  }
  getScrolledByDirection(property) {
    let event;
    return this.scrolled.pipe(tap((e) => event = e), map((e) => e.target[property]), pairwise(), filter(([prev, curr]) => prev !== curr), map(() => event));
  }
  /**
   * Set hovered state if a scrollbar is being hovered
   */
  setHovered(hovered) {
    this.zone.run(() => this.setState(__spreadValues({}, hovered)));
  }
  /**
   * Set dragging state if a scrollbar is being dragged
   */
  setDragging(dragging) {
    this.zone.run(() => this.setState(__spreadValues({}, dragging)));
  }
  /**
   * Set clicked state if a scrollbar track is being clicked
   */
  setClicked(scrollbarClicked) {
    this.zone.run(() => this.setState({
      scrollbarClicked
    }));
  }
  ngOnInit() {
    this.zone.runOutsideAngular(() => {
      if (this.customViewPort) {
        this.viewport = this.customViewPort;
        this.defaultViewPort.setAsWrapper();
      } else {
        this.viewport = this.defaultViewPort;
      }
      this.viewport.setAsViewport(this.viewClass);
      let scrollStream = fromEvent(this.viewport.nativeElement, "scroll", {
        passive: true
      });
      scrollStream = this.scrollAuditTime ? scrollStream.pipe(auditTime(this.scrollAuditTime)) : scrollStream;
      this.scrolled = scrollStream.pipe(takeUntil(this.destroyed));
      this.verticalScrolled = this.getScrolledByDirection("scrollTop");
      this.horizontalScrolled = this.getScrolledByDirection("scrollLeft");
    });
  }
  ngOnChanges(changes) {
    if (this.viewport) {
      this.update();
    }
  }
  ngAfterViewInit() {
    this.update();
    this.dir.change.pipe(tap(() => this.update()), takeUntil(this.destroyed)).subscribe();
  }
  ngOnDestroy() {
    this.destroyed.next();
    this.destroyed.complete();
  }
  /**
   * Update local state and the internal scrollbar controls
   */
  update() {
    if (!this.autoHeightDisabled) {
      this.updateHeight();
    }
    if (!this.autoWidthDisabled) {
      this.updateWidth();
    }
    this.updateState();
    this.updated.next();
  }
  /**
   * Smooth scroll functions
   */
  scrollTo(options) {
    return this.smoothScroll.scrollTo(this.viewport.nativeElement, options);
  }
  /**
   * Scroll to element by reference or selector
   */
  scrollToElement(target, options) {
    return this.smoothScroll.scrollToElement(this.viewport.nativeElement, target, options);
  }
  updateHeight() {
    if (this.appearance === "standard" && this.scrollbarX) {
      this.nativeElement.style.height = `${this.viewport.contentHeight + this.scrollbarX.nativeElement.clientHeight}px`;
    } else {
      this.nativeElement.style.height = `${this.viewport.contentHeight}px`;
    }
  }
  updateWidth() {
    if (this.appearance === "standard" && this.scrollbarY) {
      this.nativeElement.style.width = `${this.viewport.contentWidth + this.scrollbarY.nativeElement.clientWidth}px`;
    } else {
      this.nativeElement.style.width = `${this.viewport.contentWidth}px`;
    }
  }
};
_NgScrollbar.\u0275fac = function NgScrollbar_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgScrollbar)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Directionality), \u0275\u0275directiveInject(SmoothScrollManager), \u0275\u0275directiveInject(ScrollbarManager));
};
_NgScrollbar.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NgScrollbar,
  selectors: [["ng-scrollbar"]],
  contentQueries: function NgScrollbar_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      \u0275\u0275contentQuery(dirIndex, ScrollViewport, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.customViewPort = _t.first);
    }
  },
  viewQuery: function NgScrollbar_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c02, 5, ElementRef);
      \u0275\u0275viewQuery(_c1, 5, ElementRef);
      \u0275\u0275viewQuery(ScrollViewport, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.scrollbarY = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.scrollbarX = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.defaultViewPort = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function NgScrollbar_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ng-scrollbar", true);
    }
  },
  inputs: {
    disabled: "disabled",
    sensorDisabled: "sensorDisabled",
    pointerEventsDisabled: "pointerEventsDisabled",
    viewportPropagateMouseMove: "viewportPropagateMouseMove",
    autoHeightDisabled: "autoHeightDisabled",
    autoWidthDisabled: "autoWidthDisabled",
    viewClass: "viewClass",
    trackClass: "trackClass",
    thumbClass: "thumbClass",
    minThumbSize: "minThumbSize",
    trackClickScrollDuration: "trackClickScrollDuration",
    pointerEventsMethod: "pointerEventsMethod",
    track: "track",
    visibility: "visibility",
    appearance: "appearance",
    position: "position",
    sensorDebounce: "sensorDebounce",
    scrollAuditTime: "scrollAuditTime"
  },
  outputs: {
    updated: "updated"
  },
  exportAs: ["ngScrollbar"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([{
    provide: NgScrollbarBase,
    useExisting: _NgScrollbar
  }]), \u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c2,
  decls: 6,
  vars: 4,
  consts: [["scrollbarX", ""], ["scrollbarY", ""], [1, "ng-scrollbar-wrapper", 3, "ngAttr"], [1, "ng-scroll-viewport-wrapper", 3, "resizeSensor", "sensorDebounce", "sensorDisabled"], ["scrollViewport", "", "hideNativeScrollbar", ""], [4, "ngIf"]],
  template: function NgScrollbar_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275elementStart(0, "div", 2)(1, "div", 3);
      \u0275\u0275listener("resizeSensor", function NgScrollbar_Template_div_resizeSensor_1_listener() {
        return ctx.update();
      });
      \u0275\u0275elementStart(2, "div", 4)(3, "div");
      \u0275\u0275projection(4);
      \u0275\u0275elementEnd()()();
      \u0275\u0275template(5, NgScrollbar_ng_container_5_Template, 3, 2, "ng-container", 5);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275property("ngAttr", ctx.state);
      \u0275\u0275advance();
      \u0275\u0275property("sensorDebounce", ctx.sensorDebounce)("sensorDisabled", ctx.sensorDisabled);
      \u0275\u0275advance(4);
      \u0275\u0275property("ngIf", !ctx.disabled);
    }
  },
  dependencies: [NgIf, NgAttr, ResizeSensor, ScrollViewport, HideNativeScrollbar, ScrollbarX, ScrollbarY],
  styles: [".ng-scrollbar-measure{scrollbar-width:none;-ms-overflow-style:none}  .ng-scrollbar-measure::-webkit-scrollbar{display:none}[_nghost-%COMP%]{--scrollbar-border-radius: 7px;--scrollbar-padding: 4px;--scrollbar-track-color: transparent;--scrollbar-thumb-color: rgba(0, 0, 0, .2);--scrollbar-thumb-hover-color: var(--scrollbar-thumb-color);--scrollbar-size: 5px;--scrollbar-hover-size: var(--scrollbar-size);--scrollbar-overscroll-behavior: initial;--scrollbar-transition-duration: .4s;--scrollbar-transition-delay: .8s;--scrollbar-thumb-transition: height ease-out .15s, width ease-out .15s;--scrollbar-track-transition: height ease-out .15s, width ease-out .15s;display:block;position:relative;height:100%;max-height:100%;max-width:100%;box-sizing:content-box!important}[_nghost-%COMP%] > .ng-scrollbar-wrapper[_ngcontent-%COMP%]{--scrollbar-total-size: calc(var(--scrollbar-size) + var(--scrollbar-padding) * 2);--vertical-scrollbar-size: var(--scrollbar-size);--horizontal-scrollbar-size: var(--scrollbar-size);--vertical-scrollbar-total-size: calc(var(--vertical-scrollbar-size) + var(--scrollbar-padding) * 2);--horizontal-scrollbar-total-size: calc(var(--horizontal-scrollbar-size) + var(--scrollbar-padding) * 2)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[verticalHovered=true][_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[verticalDragging=true][_ngcontent-%COMP%]{--vertical-scrollbar-size: var(--scrollbar-hover-size);--vertical-scrollbar-total-size: calc(var(--vertical-scrollbar-size) + var(--scrollbar-padding) * 2);cursor:default}[_nghost-%COMP%] > .ng-scrollbar-wrapper[horizontalHovered=true][_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[horizontalDragging=true][_ngcontent-%COMP%]{--horizontal-scrollbar-size: var(--scrollbar-hover-size);--horizontal-scrollbar-total-size: calc(var(--horizontal-scrollbar-size) + var(--scrollbar-padding) * 2);cursor:default}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=ltr][pointerEventsMethod=scrollbar][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%]{left:0;right:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=ltr][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=ltr][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport{padding-right:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=ltr][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%] > .ng-scroll-content[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=ltr][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport>.ng-scroll-content{padding-right:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=rtl][pointerEventsMethod=scrollbar][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%]{left:var(--scrollbar-total-size);right:0}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=rtl][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=rtl][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport{padding-left:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=rtl][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%] > .ng-scroll-content[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=rtl][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport>.ng-scroll-content{padding-left:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr][pointerEventsMethod=scrollbar][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr][pointerEventsMethod=scrollbar][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%]{left:var(--scrollbar-total-size);right:0}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport, [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport{padding-left:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%] > .ng-scroll-content[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport>.ng-scroll-content, [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%] > .ng-scroll-content[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport>.ng-scroll-content{padding-left:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl][pointerEventsMethod=scrollbar][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl][pointerEventsMethod=scrollbar][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%]{left:0;right:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport, [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport{padding-right:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%] > .ng-scroll-content[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport>.ng-scroll-content, [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%] > .ng-scroll-content[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport>.ng-scroll-content{padding-right:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][pointerEventsMethod=scrollbar][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%]{top:0;bottom:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport{padding-bottom:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%] > .ng-scroll-content[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport>.ng-scroll-content{padding-bottom:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertX][pointerEventsMethod=scrollbar][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertAll][pointerEventsMethod=scrollbar][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%]{top:var(--scrollbar-total-size);bottom:0}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertX][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertX][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport, [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertAll][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertAll][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport{padding-top:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertX][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%] > .ng-scroll-content[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertX][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport>.ng-scroll-content, [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertAll][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%] > .ng-scroll-content[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertAll][pointerEventsMethod=viewport][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport>.ng-scroll-content{padding-top:var(--scrollbar-total-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport{scrollbar-width:none;-ms-overflow-style:none}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%]::-webkit-scrollbar, [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport::-webkit-scrollbar{display:none}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][horizontalUsed=true][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-native-scrollbar-hider[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][horizontalUsed=true][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-native-scrollbar-hider{bottom:var(--native-scrollbar-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][verticalUsed=true][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-native-scrollbar-hider[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][verticalUsed=true][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-native-scrollbar-hider{left:0;right:var(--native-scrollbar-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][verticalUsed=true][dir=rtl][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-native-scrollbar-hider[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][verticalUsed=true][dir=rtl][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-native-scrollbar-hider{right:0;left:var(--native-scrollbar-size)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][visibility=hover][_ngcontent-%COMP%] > .scrollbar-control[_ngcontent-%COMP%]{opacity:0;transition-property:opacity;transition-duration:var(--scrollbar-transition-duration);transition-delay:var(--scrollbar-transition-delay)}[_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][visibility=hover][_ngcontent-%COMP%]:hover > .scrollbar-control[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][visibility=hover][_ngcontent-%COMP%]:active > .scrollbar-control[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[deactivated=false][visibility=hover][_ngcontent-%COMP%]:focus > .scrollbar-control[_ngcontent-%COMP%]{opacity:1;transition-duration:var(--scrollbar-transition-duration);transition-delay:0ms}[_nghost-%COMP%] > .ng-scrollbar-wrapper[horizontalUsed=true][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[horizontalUsed=true][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport{overflow-x:auto;overflow-y:hidden}[_nghost-%COMP%] > .ng-scrollbar-wrapper[verticalUsed=true][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[verticalUsed=true][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport{overflow-y:auto;overflow-x:hidden}[_nghost-%COMP%] > .ng-scrollbar-wrapper[verticalUsed=true][horizontalUsed=true][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > .ng-scroll-viewport[_ngcontent-%COMP%], [_nghost-%COMP%] > .ng-scrollbar-wrapper[verticalUsed=true][horizontalUsed=true][_ngcontent-%COMP%] > .ng-scroll-viewport-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] > *[_ngcontent-%COMP%] >   .ng-scroll-viewport{overflow:auto}.ng-scroll-viewport-wrapper[_ngcontent-%COMP%]{overflow:hidden}.ng-scroll-viewport[_ngcontent-%COMP%]{-webkit-overflow-scrolling:touch;contain:strict;will-change:scroll-position;overscroll-behavior:var(--scrollbar-overscroll-behavior)}  .ng-scroll-content{display:inline-block;min-width:100%}.ng-scrollbar-wrapper[_ngcontent-%COMP%], .ng-scroll-viewport-wrapper[_ngcontent-%COMP%], .ng-scroll-layer[_ngcontent-%COMP%],   .ng-scroll-viewport{position:absolute;inset:0}", ".ng-scrollbar-wrapper[pointerEventsMethod=viewport]>.scrollbar-control{pointer-events:none}  .ng-scrollbar-wrapper[horizontalDragging=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,   .ng-scrollbar-wrapper[horizontalDragging=true]>.ng-scroll-viewport-wrapper>*>*>  .ng-scroll-viewport,   .ng-scrollbar-wrapper[verticalDragging=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,   .ng-scrollbar-wrapper[verticalDragging=true]>.ng-scroll-viewport-wrapper>*>*>  .ng-scroll-viewport,   .ng-scrollbar-wrapper[scrollbarClicked=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,   .ng-scrollbar-wrapper[scrollbarClicked=true]>.ng-scroll-viewport-wrapper>*>*>  .ng-scroll-viewport{-webkit-user-select:none;-moz-user-select:none;user-select:none}  .ng-scrollbar-wrapper>.scrollbar-control{position:absolute;display:flex;justify-content:center;align-items:center;transition:var(--scrollbar-track-transition)}  .ng-scrollbar-wrapper>.scrollbar-control[scrollable=false] .ng-scrollbar-thumb{display:none}  .ng-scrollbar-track{height:100%;width:100%;z-index:1;border-radius:var(--scrollbar-border-radius);background-color:var(--scrollbar-track-color);overflow:hidden;transition:var(--scrollbar-track-transition);cursor:default}  .ng-scrollbar-thumb{box-sizing:border-box;position:relative;border-radius:inherit;background-color:var(--scrollbar-thumb-color);transform:translateZ(0);transition:var(--scrollbar-thumb-transition)}"],
  changeDetection: 0
});
var NgScrollbar = _NgScrollbar;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgScrollbar, [{
    type: Component,
    args: [{
      selector: "ng-scrollbar",
      exportAs: "ngScrollbar",
      changeDetection: ChangeDetectionStrategy.OnPush,
      host: {
        "[class.ng-scrollbar]": "true"
      },
      providers: [{
        provide: NgScrollbarBase,
        useExisting: NgScrollbar
      }],
      standalone: true,
      imports: [NgIf, NgAttr, ResizeSensor, ScrollViewport, HideNativeScrollbar, ScrollbarX, ScrollbarY],
      template: '<div class="ng-scrollbar-wrapper" [ngAttr]="state">\r\n  <div class="ng-scroll-viewport-wrapper"\r\n       (resizeSensor)="update()"\r\n       [sensorDebounce]="sensorDebounce"\r\n       [sensorDisabled]="sensorDisabled">\r\n    <div scrollViewport\r\n         hideNativeScrollbar>\r\n      <div>\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <ng-container *ngIf="!disabled">\r\n    <scrollbar-x #scrollbarX\r\n                 *ngIf="state.horizontalUsed"\r\n                 [attr.scrollable]="state.isHorizontallyScrollable"\r\n                 [attr.fit]="state.verticalUsed">\r\n    </scrollbar-x>\r\n    <scrollbar-y #scrollbarY\r\n                 *ngIf="state.verticalUsed"\r\n                 [attr.scrollable]="state.isVerticallyScrollable"\r\n                 [attr.fit]="state.horizontalUsed">\r\n    </scrollbar-y>\r\n  </ng-container>\r\n</div>\r\n\r\n',
      styles: ["::ng-deep .ng-scrollbar-measure{scrollbar-width:none;-ms-overflow-style:none}::ng-deep .ng-scrollbar-measure::-webkit-scrollbar{display:none}:host{--scrollbar-border-radius: 7px;--scrollbar-padding: 4px;--scrollbar-track-color: transparent;--scrollbar-thumb-color: rgba(0, 0, 0, .2);--scrollbar-thumb-hover-color: var(--scrollbar-thumb-color);--scrollbar-size: 5px;--scrollbar-hover-size: var(--scrollbar-size);--scrollbar-overscroll-behavior: initial;--scrollbar-transition-duration: .4s;--scrollbar-transition-delay: .8s;--scrollbar-thumb-transition: height ease-out .15s, width ease-out .15s;--scrollbar-track-transition: height ease-out .15s, width ease-out .15s;display:block;position:relative;height:100%;max-height:100%;max-width:100%;box-sizing:content-box!important}:host>.ng-scrollbar-wrapper{--scrollbar-total-size: calc(var(--scrollbar-size) + var(--scrollbar-padding) * 2);--vertical-scrollbar-size: var(--scrollbar-size);--horizontal-scrollbar-size: var(--scrollbar-size);--vertical-scrollbar-total-size: calc(var(--vertical-scrollbar-size) + var(--scrollbar-padding) * 2);--horizontal-scrollbar-total-size: calc(var(--horizontal-scrollbar-size) + var(--scrollbar-padding) * 2)}:host>.ng-scrollbar-wrapper[verticalHovered=true],:host>.ng-scrollbar-wrapper[verticalDragging=true]{--vertical-scrollbar-size: var(--scrollbar-hover-size);--vertical-scrollbar-total-size: calc(var(--vertical-scrollbar-size) + var(--scrollbar-padding) * 2);cursor:default}:host>.ng-scrollbar-wrapper[horizontalHovered=true],:host>.ng-scrollbar-wrapper[horizontalDragging=true]{--horizontal-scrollbar-size: var(--scrollbar-hover-size);--horizontal-scrollbar-total-size: calc(var(--horizontal-scrollbar-size) + var(--scrollbar-padding) * 2);cursor:default}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=ltr][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper{left:0;right:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport{padding-right:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport>.ng-scroll-content,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport>.ng-scroll-content{padding-right:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=rtl][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper{left:var(--scrollbar-total-size);right:0}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport{padding-left:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport>.ng-scroll-content,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport>.ng-scroll-content{padding-left:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper{left:var(--scrollbar-total-size);right:0}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport{padding-left:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport>.ng-scroll-content,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport>.ng-scroll-content,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport>.ng-scroll-content,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport>.ng-scroll-content{padding-left:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper{left:0;right:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport{padding-right:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport>.ng-scroll-content,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport>.ng-scroll-content,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport>.ng-scroll-content,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport>.ng-scroll-content{padding-right:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper{top:0;bottom:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport{padding-bottom:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport>.ng-scroll-content,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport>.ng-scroll-content{padding-bottom:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertX][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertAll][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper{top:var(--scrollbar-total-size);bottom:0}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertX][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertX][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertAll][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertAll][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport{padding-top:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertX][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport>.ng-scroll-content,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertX][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport>.ng-scroll-content,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertAll][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport>.ng-scroll-content,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertAll][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport>.ng-scroll-content{padding-top:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport{scrollbar-width:none;-ms-overflow-style:none}:host>.ng-scrollbar-wrapper[deactivated=false]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport::-webkit-scrollbar,:host>.ng-scrollbar-wrapper[deactivated=false]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport::-webkit-scrollbar{display:none}:host>.ng-scrollbar-wrapper[deactivated=false][horizontalUsed=true]>.ng-scroll-viewport-wrapper>.ng-native-scrollbar-hider,:host>.ng-scrollbar-wrapper[deactivated=false][horizontalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-native-scrollbar-hider{bottom:var(--native-scrollbar-size)}:host>.ng-scrollbar-wrapper[deactivated=false][verticalUsed=true]>.ng-scroll-viewport-wrapper>.ng-native-scrollbar-hider,:host>.ng-scrollbar-wrapper[deactivated=false][verticalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-native-scrollbar-hider{left:0;right:var(--native-scrollbar-size)}:host>.ng-scrollbar-wrapper[deactivated=false][verticalUsed=true][dir=rtl]>.ng-scroll-viewport-wrapper>.ng-native-scrollbar-hider,:host>.ng-scrollbar-wrapper[deactivated=false][verticalUsed=true][dir=rtl]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-native-scrollbar-hider{right:0;left:var(--native-scrollbar-size)}:host>.ng-scrollbar-wrapper[deactivated=false][visibility=hover]>.scrollbar-control{opacity:0;transition-property:opacity;transition-duration:var(--scrollbar-transition-duration);transition-delay:var(--scrollbar-transition-delay)}:host>.ng-scrollbar-wrapper[deactivated=false][visibility=hover]:hover>.scrollbar-control,:host>.ng-scrollbar-wrapper[deactivated=false][visibility=hover]:active>.scrollbar-control,:host>.ng-scrollbar-wrapper[deactivated=false][visibility=hover]:focus>.scrollbar-control{opacity:1;transition-duration:var(--scrollbar-transition-duration);transition-delay:0ms}:host>.ng-scrollbar-wrapper[horizontalUsed=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[horizontalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport{overflow-x:auto;overflow-y:hidden}:host>.ng-scrollbar-wrapper[verticalUsed=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[verticalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport{overflow-y:auto;overflow-x:hidden}:host>.ng-scrollbar-wrapper[verticalUsed=true][horizontalUsed=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[verticalUsed=true][horizontalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport{overflow:auto}.ng-scroll-viewport-wrapper{overflow:hidden}.ng-scroll-viewport{-webkit-overflow-scrolling:touch;contain:strict;will-change:scroll-position;overscroll-behavior:var(--scrollbar-overscroll-behavior)}::ng-deep .ng-scroll-content{display:inline-block;min-width:100%}.ng-scrollbar-wrapper,.ng-scroll-viewport-wrapper,.ng-scroll-layer,::ng-deep .ng-scroll-viewport{position:absolute;inset:0}\n", "::ng-deep .ng-scrollbar-wrapper[pointerEventsMethod=viewport]>.scrollbar-control{pointer-events:none}::ng-deep .ng-scrollbar-wrapper[horizontalDragging=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,::ng-deep .ng-scrollbar-wrapper[horizontalDragging=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport,::ng-deep .ng-scrollbar-wrapper[verticalDragging=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,::ng-deep .ng-scrollbar-wrapper[verticalDragging=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport,::ng-deep .ng-scrollbar-wrapper[scrollbarClicked=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,::ng-deep .ng-scrollbar-wrapper[scrollbarClicked=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep .ng-scroll-viewport{-webkit-user-select:none;-moz-user-select:none;user-select:none}::ng-deep .ng-scrollbar-wrapper>.scrollbar-control{position:absolute;display:flex;justify-content:center;align-items:center;transition:var(--scrollbar-track-transition)}::ng-deep .ng-scrollbar-wrapper>.scrollbar-control[scrollable=false] .ng-scrollbar-thumb{display:none}::ng-deep .ng-scrollbar-track{height:100%;width:100%;z-index:1;border-radius:var(--scrollbar-border-radius);background-color:var(--scrollbar-track-color);overflow:hidden;transition:var(--scrollbar-track-transition);cursor:default}::ng-deep .ng-scrollbar-thumb{box-sizing:border-box;position:relative;border-radius:inherit;background-color:var(--scrollbar-thumb-color);transform:translateZ(0);transition:var(--scrollbar-thumb-transition)}\n"]
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: NgZone
    }, {
      type: ChangeDetectorRef
    }, {
      type: Directionality
    }, {
      type: SmoothScrollManager
    }, {
      type: ScrollbarManager
    }];
  }, {
    disabled: [{
      type: Input
    }],
    sensorDisabled: [{
      type: Input
    }],
    pointerEventsDisabled: [{
      type: Input
    }],
    viewportPropagateMouseMove: [{
      type: Input
    }],
    autoHeightDisabled: [{
      type: Input
    }],
    autoWidthDisabled: [{
      type: Input
    }],
    viewClass: [{
      type: Input
    }],
    trackClass: [{
      type: Input
    }],
    thumbClass: [{
      type: Input
    }],
    minThumbSize: [{
      type: Input
    }],
    trackClickScrollDuration: [{
      type: Input
    }],
    pointerEventsMethod: [{
      type: Input
    }],
    track: [{
      type: Input
    }],
    visibility: [{
      type: Input
    }],
    appearance: [{
      type: Input
    }],
    position: [{
      type: Input
    }],
    sensorDebounce: [{
      type: Input
    }],
    scrollAuditTime: [{
      type: Input
    }],
    updated: [{
      type: Output
    }],
    scrollbarY: [{
      type: ViewChild,
      args: ["scrollbarY", {
        read: ElementRef
      }]
    }],
    scrollbarX: [{
      type: ViewChild,
      args: ["scrollbarX", {
        read: ElementRef
      }]
    }],
    defaultViewPort: [{
      type: ViewChild,
      args: [ScrollViewport, {
        static: true
      }]
    }],
    customViewPort: [{
      type: ContentChild,
      args: [ScrollViewport, {
        static: true
      }]
    }]
  });
})();
var _NgScrollbarModule = class _NgScrollbarModule {
};
_NgScrollbarModule.\u0275fac = function NgScrollbarModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgScrollbarModule)();
};
_NgScrollbarModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NgScrollbarModule
});
_NgScrollbarModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var NgScrollbarModule = _NgScrollbarModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgScrollbarModule, [{
    type: NgModule,
    args: [{
      imports: [NgScrollbar, ScrollViewport],
      exports: [NgScrollbar, ScrollViewport]
    }]
  }], null, null);
})();

// src/app/layout/default-layout/navs/_nav.ts
var navItems = [
  {
    title: true,
    name: "-------------------------------"
  },
  {
    title: true,
    name: "---- Documentacion -----"
  },
  {
    name: "Dashboard",
    url: "/documentacion/dashboard",
    iconComponent: { name: "cil-speedometer" },
    badge: {
      color: "info",
      text: "NEW"
    }
  },
  {
    title: true,
    name: "Theme"
  },
  {
    name: "Colors",
    url: "/documentacion/theme/colors",
    iconComponent: { name: "cil-drop" }
  },
  {
    name: "Typography",
    url: "/documentacion/theme/typography",
    linkProps: { fragment: "headings" },
    iconComponent: { name: "cil-pencil" }
  },
  {
    name: "Components",
    title: true
  },
  {
    name: "Base",
    url: "/base",
    iconComponent: { name: "cil-puzzle" },
    children: [
      {
        name: "Accordion",
        url: "/documentacion/base/accordion",
        icon: "nav-icon-bullet"
      },
      {
        name: "Breadcrumbs",
        url: "/documentacion/base/breadcrumbs",
        icon: "nav-icon-bullet"
      },
      {
        name: "Cards",
        url: "/documentacion/base/cards",
        icon: "nav-icon-bullet"
      },
      {
        name: "Carousel",
        url: "/documentacion/base/carousel",
        icon: "nav-icon-bullet"
      },
      {
        name: "Collapse",
        url: "/documentacion/base/collapse",
        icon: "nav-icon-bullet"
      },
      {
        name: "List Group",
        url: "/documentacion/base/list-group",
        icon: "nav-icon-bullet"
      },
      {
        name: "Navs & Tabs",
        url: "/documentacion/base/navs",
        icon: "nav-icon-bullet"
      },
      {
        name: "Pagination",
        url: "/documentacion/base/pagination",
        icon: "nav-icon-bullet"
      },
      {
        name: "Placeholder",
        url: "/documentacion/base/placeholder",
        icon: "nav-icon-bullet"
      },
      {
        name: "Popovers",
        url: "/documentacion/base/popovers",
        icon: "nav-icon-bullet"
      },
      {
        name: "Progress",
        url: "/documentacion/base/progress",
        icon: "nav-icon-bullet"
      },
      {
        name: "Spinners",
        url: "/documentacion/base/spinners",
        icon: "nav-icon-bullet"
      },
      {
        name: "Tables",
        url: "/documentacion/base/tables",
        icon: "nav-icon-bullet"
      },
      {
        name: "Tabs",
        url: "/documentacion/base/tabs",
        icon: "nav-icon-bullet"
      },
      {
        name: "Tooltips",
        url: "/documentacion/base/tooltips",
        icon: "nav-icon-bullet"
      }
    ]
  },
  {
    name: "Buttons",
    url: "/buttons",
    iconComponent: { name: "cil-cursor" },
    children: [
      {
        name: "Buttons",
        url: "/documentacion/buttons/buttons",
        icon: "nav-icon-bullet"
      },
      {
        name: "Button groups",
        url: "/documentacion/buttons/button-groups",
        icon: "nav-icon-bullet"
      },
      {
        name: "Dropdowns",
        url: "/documentacion/buttons/dropdowns",
        icon: "nav-icon-bullet"
      }
    ]
  },
  {
    name: "Forms",
    url: "/forms",
    iconComponent: { name: "cil-notes" },
    children: [
      {
        name: "Form Control",
        url: "/documentacion/forms/form-control",
        icon: "nav-icon-bullet"
      },
      {
        name: "Select",
        url: "/documentacion/forms/select",
        icon: "nav-icon-bullet"
      },
      {
        name: "Checks & Radios",
        url: "/documentacion/forms/checks-radios",
        icon: "nav-icon-bullet"
      },
      {
        name: "Range",
        url: "/documentacion/forms/range",
        icon: "nav-icon-bullet"
      },
      {
        name: "Input Group",
        url: "/documentacion/forms/input-group",
        icon: "nav-icon-bullet"
      },
      {
        name: "Floating Labels",
        url: "/documentacion/forms/floating-labels",
        icon: "nav-icon-bullet"
      },
      {
        name: "Layout",
        url: "/documentacion/forms/layout",
        icon: "nav-icon-bullet"
      },
      {
        name: "Validation",
        url: "/documentacion/forms/validation",
        icon: "nav-icon-bullet"
      }
    ]
  },
  {
    name: "Charts",
    iconComponent: { name: "cil-chart-pie" },
    url: "/documentacion/charts"
  },
  {
    name: "Icons",
    iconComponent: { name: "cil-star" },
    url: "/icons",
    children: [
      {
        name: "CoreUI Free",
        url: "/documentacion/icons/coreui-icons",
        icon: "nav-icon-bullet",
        badge: {
          color: "success",
          text: "FREE"
        }
      },
      {
        name: "CoreUI Flags",
        url: "/documentacion/icons/flags",
        icon: "nav-icon-bullet"
      },
      {
        name: "CoreUI Brands",
        url: "/documentacion/icons/brands",
        icon: "nav-icon-bullet"
      }
    ]
  },
  {
    name: "Notifications",
    url: "/notifications",
    iconComponent: { name: "cil-bell" },
    children: [
      {
        name: "Alerts",
        url: "/documentacion/notifications/alerts",
        icon: "nav-icon-bullet"
      },
      {
        name: "Badges",
        url: "/documentacion/notifications/badges",
        icon: "nav-icon-bullet"
      },
      {
        name: "Modal",
        url: "/documentacion/notifications/modal",
        icon: "nav-icon-bullet"
      },
      {
        name: "Toast",
        url: "/documentacion/notifications/toasts",
        icon: "nav-icon-bullet"
      }
    ]
  },
  {
    name: "Widgets",
    url: "/documentacion/widgets",
    iconComponent: { name: "cil-calculator" },
    badge: {
      color: "info",
      text: "NEW"
    }
  },
  {
    title: true,
    name: "Extras"
  },
  {
    name: "Pages",
    url: "/login",
    iconComponent: { name: "cil-star" },
    children: [
      {
        name: "Login",
        url: "/documentacion/login",
        icon: "nav-icon-bullet"
      },
      {
        name: "Register",
        url: "/documentacion/register",
        icon: "nav-icon-bullet"
      },
      {
        name: "Error 404",
        url: "/documentacion/404",
        icon: "nav-icon-bullet"
      },
      {
        name: "Error 500",
        url: "/documentacion/500",
        icon: "nav-icon-bullet"
      }
    ]
  },
  {
    title: true,
    name: "Links",
    class: "mt-auto"
  },
  {
    name: "Docs",
    url: "https://coreui.io/angular/docs/5.x/",
    iconComponent: { name: "cil-description" },
    attributes: { target: "_blank" }
  }
];

// src/app/layout/default-layout/navs/_nav-project.ts
var navItemsProject = [
  {
    name: "Productos",
    url: "/productos",
    iconComponent: { name: "cil-cut" }
  },
  {
    title: true,
    name: "Theme"
  },
  {
    name: "Colors",
    url: "/theme/colors",
    iconComponent: { name: "cil-drop" }
  }
];

// src/app/layout/default-layout/default-layout.component.ts
var _c03 = () => [];
var _c12 = () => ({ icon: false });
function DefaultLayoutComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "c-sidebar-footer", 10);
    \u0275\u0275element(1, "button", 15);
    \u0275\u0275elementEnd();
  }
}
var _DefaultLayoutComponent = class _DefaultLayoutComponent {
  constructor() {
    this.navItems = environment.production ? [...navItemsProject] : [...navItemsProject, ...navItems];
  }
  onScrollbarUpdate($event) {
  }
};
_DefaultLayoutComponent.\u0275fac = function DefaultLayoutComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _DefaultLayoutComponent)();
};
_DefaultLayoutComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DefaultLayoutComponent, selectors: [["app-dashboard"]], standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 17, vars: 8, consts: [["sidebar1", "cSidebar"], ["scrollbar", "ngScrollbar"], ["overflow", ""], ["colorScheme", "dark", "id", "sidebar1", "visible", "", 1, "d-print-none", "sidebar", "sidebar-fixed", "border-end"], [1, "border-bottom"], [1, "text-center", 3, "routerLink"], ["src", "assets/brand/logo.svg", "cImg", "", "alt", "Icono SVG", "align", "center", 1, "sidebar-brand-full", "w-75"], ["src", "assets/brand/icono-logo.png", "cImg", "", "alt", "Icono SVG", "align", "center", 1, "sidebar-brand-narrow", "mx-auto", "w-25"], ["pointerEventsMethod", "scrollbar", "visibility", "hover", 1, "overflow", 3, "updated"], ["dropdownMode", "close", "compact", "", 3, "navItems"], ["cSidebarToggle", "sidebar1", "toggle", "unfoldable", 1, "border-top", "d-none", "d-lg-flex", 2, "cursor", "pointer"], [1, "wrapper", "d-flex", "flex-column", "min-vh-100"], ["position", "sticky", "sidebarId", "sidebar1", 1, "mb-4", "d-print-none", "header", "header-sticky", "p-0", "shadow-sm", 3, "cShadowOnScroll"], [1, "body", "flex-grow-1"], ["breakpoint", "lg", 1, "h-auto", "px-4"], ["cSidebarToggler", "", "aria-label", "Toggle sidebar fold"]], template: function DefaultLayoutComponent_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "c-sidebar", 3, 0)(2, "c-sidebar-header", 4)(3, "c-sidebar-brand", 5);
    \u0275\u0275element(4, "img", 6)(5, "img", 7);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "ng-scrollbar", 8, 1);
    \u0275\u0275listener("updated", function DefaultLayoutComponent_Template_ng_scrollbar_updated_6_listener() {
      \u0275\u0275restoreView(_r1);
      const scrollbar_r2 = \u0275\u0275reference(7);
      return \u0275\u0275resetView(ctx.onScrollbarUpdate(scrollbar_r2.state));
    });
    \u0275\u0275element(8, "c-sidebar-nav", 9, 2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(10, DefaultLayoutComponent_Conditional_10_Template, 2, 0, "c-sidebar-footer", 10);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "div", 11);
    \u0275\u0275element(12, "app-default-header", 12);
    \u0275\u0275elementStart(13, "div", 13)(14, "c-container", 14);
    \u0275\u0275element(15, "router-outlet");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(16, "app-default-footer");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const sidebar1_r3 = \u0275\u0275reference(1);
    \u0275\u0275advance(3);
    \u0275\u0275property("routerLink", \u0275\u0275pureFunction0(6, _c03));
    \u0275\u0275advance(2);
    \u0275\u0275classMap(\u0275\u0275pureFunction0(7, _c12));
    \u0275\u0275advance(3);
    \u0275\u0275property("navItems", ctx.navItems);
    \u0275\u0275advance(2);
    \u0275\u0275conditional(!sidebar1_r3.narrow ? 10 : -1);
    \u0275\u0275advance(2);
    \u0275\u0275property("cShadowOnScroll", "sm");
  }
}, dependencies: [
  SidebarComponent,
  SidebarHeaderComponent,
  SidebarBrandComponent,
  RouterLink,
  NgScrollbar,
  SidebarNavComponent,
  SidebarFooterComponent,
  SidebarToggleDirective,
  SidebarTogglerDirective,
  DefaultHeaderComponent,
  ShadowOnScrollDirective,
  ContainerComponent,
  RouterOutlet,
  DefaultFooterComponent
], styles: ["\n\n[_nghost-%COMP%]   .ng-scrollbar[_ngcontent-%COMP%] {\n  --scrollbar-padding: 1px;\n  --scrollbar-size: 5px;\n  --scrollbar-thumb-color: var(--cui-gray-500, #999);\n  --scrollbar-thumb-hover-color: var(--cui-gray-400, #999);\n  --scrollbar-hover-size: calc(var(--scrollbar-size) * 1.5);\n}\n/*# sourceMappingURL=/sabinos-barber-frontend/default-layout.component.css.map */"] });
var DefaultLayoutComponent = _DefaultLayoutComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DefaultLayoutComponent, { className: "DefaultLayoutComponent", filePath: "src\\app\\layout\\default-layout\\default-layout.component.ts", lineNumber: 55 });
})();

// src/app/app.routes.ts
var routes = [
  {
    path: "",
    redirectTo: "dashboard",
    pathMatch: "full"
  },
  {
    path: "",
    component: DefaultLayoutComponent,
    children: [
      {
        path: "",
        loadChildren: () => import("./pages.routes-2BFPE26Q.js").then((m) => m.routesPages)
      }
    ]
  },
  { path: "**", redirectTo: "pages" }
];

// src/app/app.routes-documentacion.ts
var routesDocumentacion = [
  {
    path: "documentacion",
    data: {
      title: "documentacion"
    },
    children: [
      {
        path: "404",
        loadComponent: () => import("./page404.component-WFNG3Y54.js").then((m) => m.Page404Component),
        data: {
          title: "Page 404"
        }
      },
      {
        path: "500",
        loadComponent: () => import("./page500.component-FMB62FE4.js").then((m) => m.Page500Component),
        data: {
          title: "Page 500"
        }
      },
      {
        path: "login",
        loadComponent: () => import("./login.component-BZCZ3EIY.js").then((m) => m.LoginComponent),
        data: {
          title: "Login Page"
        }
      },
      {
        path: "dashboard",
        loadChildren: () => import("./routes-V5ECEEEP.js").then((m) => m.routes)
      },
      {
        path: "theme",
        loadChildren: () => import("./routes-HC7ZZJ5M.js").then((m) => m.routes)
      },
      {
        path: "base",
        loadChildren: () => import("./routes-RVFKYZIY.js").then((m) => m.routes)
      },
      {
        path: "buttons",
        loadChildren: () => import("./routes-OTZOQJ54.js").then((m) => m.routes)
      },
      {
        path: "forms",
        loadChildren: () => import("./routes-VGMQDWRZ.js").then((m) => m.routes)
      },
      {
        path: "icons",
        loadChildren: () => import("./routes-2H6GCE2H.js").then((m) => m.routes)
      },
      {
        path: "notifications",
        loadChildren: () => import("./routes-6WGUI4JK.js").then((m) => m.routes)
      },
      {
        path: "widgets",
        loadChildren: () => import("./routes-A3KZSVLE.js").then((m) => m.routes)
      },
      {
        path: "charts",
        loadChildren: () => import("./routes-PMS3AVIJ.js").then((m) => m.routes)
      },
      {
        path: "pages",
        loadChildren: () => import("./routes-JRFBV7NT.js").then((m) => m.routes)
      },
      {
        path: "register",
        loadComponent: () => import("./register.component-UY5E3TNL.js").then((m) => m.RegisterComponent),
        data: {
          title: "Register Page"
        }
      }
    ]
  }
];

// src/app/app.config.ts
var appConfig = {
  providers: [
    provideRouter(
      environment.production ? [...routes] : [...routes, ...routesDocumentacion],
      withRouterConfig({
        onSameUrlNavigation: "reload"
      }),
      withInMemoryScrolling({
        scrollPositionRestoration: "top",
        anchorScrolling: "enabled"
      }),
      withEnabledBlockingInitialNavigation(),
      withViewTransitions()
      // withHashLocation()
    ),
    importProvidersFrom(SidebarModule, DropdownModule),
    IconSetService,
    provideAnimations()
  ]
};

// src/main.ts
bootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));
/*! Bundled license information:

@angular/animations/fesm2022/browser.mjs:
  (**
   * @license Angular v18.2.9
   * (c) 2010-2024 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/platform-browser/fesm2022/animations.mjs:
  (**
   * @license Angular v18.2.9
   * (c) 2010-2024 Google LLC. https://angular.io/
   * License: MIT
   *)
*/
//# sourceMappingURL=main.js.map
